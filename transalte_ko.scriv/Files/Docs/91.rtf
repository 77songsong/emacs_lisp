{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node sentence-end, re-search-forward, Regexp Search, Regexp Search\
@comment  node-name,  next,  previous,  up\
@section The Regular Expression for @code\{sentence-end\}\
@findex sentence-end\
\
The symbol @code\{sentence-end\} is bound to the pattern that marks the\
end of a sentence.  What should this regular expression be?\
\
Clearly, a sentence may be ended by a period, a question mark, or an\
exclamation mark.  Indeed, in English, only clauses that end with one\
of those three characters should be considered the end of a sentence.\
This means that the pattern should include the character set:\
\
@smallexample\
[.?!]\
@end smallexample\
\
However, we do not want @code\{forward-sentence\} merely to jump to a\
period, a question mark, or an exclamation mark, because such a character\
might be used in the middle of a sentence.  A period, for example, is\
used after abbreviations.  So other information is needed.\
\
According to convention, you type two spaces after every sentence, but\
only one space after a period, a question mark, or an exclamation mark in\
the body of a sentence.  So a period, a question mark, or an exclamation\
mark followed by two spaces is a good indicator of an end of sentence.\
However, in a file, the two spaces may instead be a tab or the end of a\
line.  This means that the regular expression should include these three\
items as alternatives.\
\
@need 800\
This group of alternatives will look like this:\
\
@smallexample\
@group\
\\\\($\\\\| \\\\|  \\\\)\
       ^   ^^\
      TAB  SPC\
@end group\
@end smallexample\
\
@noindent\
Here, @samp\{$\} indicates the end of the line, and I have pointed out\
where the tab and two spaces are inserted in the expression.  Both are\
inserted by putting the actual characters into the expression.\
\
Two backslashes, @samp\{\\\\\}, are required before the parentheses and\
vertical bars: the first backslash quotes the following backslash in\
Emacs; and the second indicates that the following character, the\
parenthesis or the vertical bar, is special.\
\
@need 1000\
Also, a sentence may be followed by one or more carriage returns, like\
this:\
\
@smallexample\
@group\
[\
]*\
@end group\
@end smallexample\
\
@noindent\
Like tabs and spaces, a carriage return is inserted into a regular\
expression by inserting it literally.  The asterisk indicates that the\
@key\{RET\} is repeated zero or more times.\
\
But a sentence end does not consist only of a period, a question mark or\
an exclamation mark followed by appropriate space: a closing quotation\
mark or a closing brace of some kind may precede the space.  Indeed more\
than one such mark or brace may precede the space.  These require a\
expression that looks like this:\
\
@smallexample\
[]\\"')@\}]*\
@end smallexample\
\
In this expression, the first @samp\{]\} is the first character in the\
expression; the second character is @samp\{"\}, which is preceded by a\
@samp\{\\\} to tell Emacs the @samp\{"\} is @emph\{not\} special.  The last\
three characters are @samp\{'\}, @samp\{)\}, and @samp\{@\}\}.\
\
All this suggests what the regular expression pattern for matching the\
end of a sentence should be; and, indeed, if we evaluate\
@code\{sentence-end\} we find that it returns the following value:\
\
@smallexample\
@group\
sentence-end\
     @result\{\} "[.?!][]\\"')@\}]*\\\\($\\\\|     \\\\|  \\\\)[\
]*"\
@end group\
@end smallexample\
\
@noindent\
(Well, not in GNU Emacs 22; that is because of an effort to make the\
process simpler and to handle more glyphs and languages.  When the\
value of @code\{sentence-end\} is @code\{nil\}, then use the value defined\
by the function @code\{sentence-end\}.  (Here is a use of the difference\
between a value and a function in Emacs Lisp.)  The function returns a\
value constructed from the variables @code\{sentence-end-base\},\
@code\{sentence-end-double-space\}, @code\{sentence-end-without-period\},\
and @code\{sentence-end-without-space\}.  The critical variable is\
@code\{sentence-end-base\}; its global value is similar to the one\
described above but it also contains two additional quotation marks.\
These have differing degrees of curliness.  The\
@code\{sentence-end-without-period\} variable, when true, tells Emacs\
that a sentence may end without a period, such as text in Thai.)\
\
@ignore\
@noindent\
(Note that here the @key\{TAB\}, two spaces, and  @key\{RET\} are shown\
literally in the pattern.)\
\
This regular expression can be deciphered as follows:\
\
@table @code\
@item [.?!]\
The first part of the pattern is the three characters, a period, a question\
mark and an exclamation mark, within square brackets.  The pattern must\
begin with one or other of these characters.\
\
@item []\\"')@\}]*\
The second part of the pattern is the group of closing braces and\
quotation marks, which can appear zero or more times.  These may follow\
the period, question mark or exclamation mark.  In a regular expression,\
the backslash, @samp\{\\\}, followed by the double quotation mark,\
@samp\{"\}, indicates the class of string-quote characters.  Usually, the\
double quotation mark is the only character in this class.  The\
asterisk, @samp\{*\}, indicates that the items in the previous group (the\
group surrounded by square brackets, @samp\{[]\}) may be repeated zero or\
more times.\
\
@item \\\\($\\\\|   \\\\|  \\\\)\
The third part of the pattern is one or other of: either the end of a\
line, or two blank spaces, or a tab.  The double back-slashes are used\
to prevent Emacs from reading the parentheses and vertical bars as part\
of the search pattern; the parentheses are used to mark the group and\
the vertical bars are used to indicated that the patterns to either side\
of them are alternatives.  The dollar sign is used to indicate the end\
of a line and both the two spaces and the tab are each inserted as is to\
indicate what they are.\
\
@item [@key\{RET\}]*\
Finally, the last part of the pattern indicates that the end of the line\
or the whitespace following the period, question mark or exclamation\
mark may, but need not, be followed by one or more carriage returns.  In\
the pattern, the carriage return is inserted as an actual carriage\
return between square brackets but here it is shown as @key\{RET\}.\
@end table\
@end ignore}