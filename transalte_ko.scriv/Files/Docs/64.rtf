{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node save-restriction, what-line, Narrowing advantages, Narrowing & Widening\
@comment  node-name,  next,  previous,  up\
@section The @code\{save-restriction\} Special Form\
@findex save-restriction\
\
In Emacs Lisp, you can use the @code\{save-restriction\} special form to\
keep track of whatever narrowing is in effect, if any.  When the Lisp\
interpreter meets with @code\{save-restriction\}, it executes the code\
in the body of the @code\{save-restriction\} expression, and then undoes\
any changes to narrowing that the code caused.  If, for example, the\
buffer is narrowed and the code that follows @code\{save-restriction\}\
gets rid of the narrowing, @code\{save-restriction\} returns the buffer\
to its narrowed region afterwards.  In the @code\{what-line\} command,\
any narrowing the buffer may have is undone by the @code\{widen\}\
command that immediately follows the @code\{save-restriction\} command.\
Any original narrowing is restored just before the completion of the\
function.\
\
@need 1250\
The template for a @code\{save-restriction\} expression is simple:\
\
@smallexample\
@group\
(save-restriction\
  @var\{body\}@dots\{\} )\
@end group\
@end smallexample\
\
@noindent\
The body of the @code\{save-restriction\} is one or more expressions that\
will be evaluated in sequence by the Lisp interpreter.\
\
Finally, a point to note: when you use both @code\{save-excursion\} and\
@code\{save-restriction\}, one right after the other, you should use\
@code\{save-excursion\} outermost.  If you write them in reverse order,\
you may fail to record narrowing in the buffer to which Emacs switches\
after calling @code\{save-excursion\}.  Thus, when written together,\
@code\{save-excursion\} and @code\{save-restriction\} should be written\
like this:\
\
@smallexample\
@group\
(save-excursion\
  (save-restriction\
    @var\{body\}@dots\{\}))\
@end group\
@end smallexample\
\
In other circumstances, when not written together, the\
@code\{save-excursion\} and @code\{save-restriction\} special forms must\
be written in the order appropriate to the function.\
\
@need 1250\
For example,\
\
@smallexample\
@group\
  (save-restriction\
    (widen)\
    (save-excursion\
    @var\{body\}@dots\{\}))\
@end group\
@end smallexample\
\
@ignore\
Emacs 22\
/usr/local/src/emacs/lisp/simple.el\
\
(defun what-line ()\
  "Print the current buffer line number and narrowed line number of point."\
  (interactive)\
  (let ((start (point-min))\
        (n (line-number-at-pos)))\
    (if (= start 1)\
        (message "Line %d" n)\
      (save-excursion\
        (save-restriction\
          (widen)\
          (message "line %d (narrowed line %d)"\
                   (+ n (line-number-at-pos start) -1) n))))))\
\
(defun line-number-at-pos (&optional pos)\
  "Return (narrowed) buffer line number at position POS.\
If POS is nil, use current buffer location.\
Counting starts at (point-min), so the value refers\
to the contents of the accessible portion of the buffer."\
  (let ((opoint (or pos (point))) start)\
    (save-excursion\
      (goto-char (point-min))\
      (setq start (point))\
      (goto-char opoint)\
      (forward-line 0)\
      (1+ (count-lines start (point))))))\
\
(defun count-lines (start end)\
  "Return number of lines between START and END.\
This is usually the number of newlines between them,\
but can be one more if START is not equal to END\
and the greater of them is not at the start of a line."\
  (save-excursion\
    (save-restriction\
      (narrow-to-region start end)\
      (goto-char (point-min))\
      (if (eq selective-display t)\
          (save-match-data\
            (let ((done 0))\
              (while (re-search-forward "[\\n\\C-m]" nil t 40)\
                (setq done (+ 40 done)))\
              (while (re-search-forward "[\\n\\C-m]" nil t 1)\
                (setq done (+ 1 done)))\
              (goto-char (point-max))\
              (if (and (/= start end)\
                       (not (bolp)))\
                  (1+ done)\
                done)))\
        (- (buffer-size) (forward-line (buffer-size)))))))\
@end ignore}