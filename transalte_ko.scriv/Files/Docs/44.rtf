{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node Interactive Options, Permanent Installation, Interactive, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section Different Options for @code\{interactive\}\
@cindex Options for @code\{interactive\}\
@cindex Interactive options\
\
In the example, @code\{multiply-by-seven\} used @code\{"p"\} as the\
argument to @code\{interactive\}.  This argument told Emacs to interpret\
your typing either @kbd\{C-u\} followed by a number or @key\{META\}\
followed by a number as a command to pass that number to the function\
as its argument.  Emacs has more than twenty characters predefined for\
use with @code\{interactive\}.  In almost every case, one of these\
options will enable you to pass the right information interactively to\
a function.  (@xref\{Interactive Codes, , Code Characters for\
@code\{interactive\}, elisp, The GNU Emacs Lisp Reference Manual\}.)\
\
@need 1250\
Consider the function @code\{zap-to-char\}.  Its interactive expression\
is\
\
@smallexample\
(interactive "p\\ncZap to char: ")\
@end smallexample\
\
The first part of the argument to @code\{interactive\} is @samp\{p\}, with\
which you are already familiar.  This argument tells Emacs to\
interpret a `prefix', as a number to be passed to the function.  You\
can specify a prefix either by typing @kbd\{C-u\} followed by a number\
or by typing @key\{META\} followed by a number.  The prefix is the\
number of specified characters.  Thus, if your prefix is three and the\
specified character is @samp\{x\}, then you will delete all the text up\
to and including the third next @samp\{x\}.  If you do not set a prefix,\
then you delete all the text up to and including the specified\
character, but no more.\
\
The @samp\{c\} tells the function the name of the character to which to delete.\
\
More formally, a function with two or more arguments can have\
information passed to each argument by adding parts to the string that\
follows @code\{interactive\}.  When you do this, the information is\
passed to each argument in the same order it is specified in the\
@code\{interactive\} list.  In the string, each part is separated from\
the next part by a @samp\{\\n\}, which is a newline.  For example, you\
can follow @samp\{p\} with a @samp\{\\n\} and an @samp\{cZap to char:@: \}.\
This causes Emacs to pass the value of the prefix argument (if there\
is one) and the character.\
\
In this case, the function definition looks like the following, where\
@code\{arg\} and @code\{char\} are the symbols to which @code\{interactive\}\
binds the prefix argument and the specified character:\
\
@smallexample\
@group\
(defun @var\{name-of-function\} (arg char)\
  "@var\{documentation\}@dots\{\}"\
  (interactive "p\\ncZap to char: ")\
  @var\{body-of-function\}@dots\{\})\
@end group\
@end smallexample\
\
@noindent\
(The space after the colon in the prompt makes it look better when you\
are prompted.  @xref\{copy-to-buffer, , The Definition of\
@code\{copy-to-buffer\}\}, for an example.)\
\
When a function does not take arguments, @code\{interactive\} does not\
require any.  Such a function contains the simple expression\
@code\{(interactive)\}.  The @code\{mark-whole-buffer\} function is like\
this.\
\
Alternatively, if the special letter-codes are not right for your\
application, you can pass your own arguments to @code\{interactive\} as\
a list.\
\
@xref\{append-to-buffer, , The Definition of @code\{append-to-buffer\}\},\
for an example.  @xref\{Using Interactive, , Using @code\{Interactive\},\
elisp, The GNU Emacs Lisp Reference Manual\}, for a more complete\
explanation about this technique.}