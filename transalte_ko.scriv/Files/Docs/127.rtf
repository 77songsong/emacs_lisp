{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node debug-on-quit, edebug, debug-on-entry, Debugging\
@section @code\{debug-on-quit\} and @code\{(debug)\}\
\
In addition to setting @code\{debug-on-error\} or calling @code\{debug-on-entry\},\
there are two other ways to start @code\{debug\}.\
\
@findex debug-on-quit\
You can start @code\{debug\} whenever you type @kbd\{C-g\}\
(@code\{keyboard-quit\}) by setting the variable @code\{debug-on-quit\} to\
@code\{t\}.  This is useful for debugging infinite loops.\
\
@need 1500\
@cindex @code\{(debug)\} in code\
Or, you can insert a line that says @code\{(debug)\} into your code\
where you want the debugger to start, like this:\
\
@smallexample\
@group\
(defun triangle-bugged (number)\
  "Return sum of numbers 1 through NUMBER inclusive."\
  (let ((total 0))\
    (while (> number 0)\
      (setq total (+ total number))\
      (debug)                         ; @r\{Start debugger.\}\
      (setq number (1= number)))      ; @r\{Error here.\}\
    total))\
@end group\
@end smallexample\
\
The @code\{debug\} function is described in detail in @ref\{Debugger, ,\
The Lisp Debugger, elisp, The GNU Emacs Lisp Reference Manual\}.}