{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node Full Graph, Free Software and Free Manuals, Kill Ring, Top\
@appendix A Graph with Labelled Axes\
\
Printed axes help you understand a graph.  They convey scale.  In an\
earlier chapter (@pxref\{Readying a Graph, ,  Readying a Graph\}), we\
wrote the code to print the body of a graph.  Here we write the code\
for printing and labelling vertical and horizontal axes, along with the\
body itself.\
\
@menu\
* Labelled Example::\
* print-graph Varlist::         @code\{let\} expression in @code\{print-graph\}.\
* print-Y-axis::                Print a label for the vertical axis.\
* print-X-axis::                Print a horizontal label.\
* Print Whole Graph::           The function to print a complete graph.\
@end menu\
\
@node Labelled Example, print-graph Varlist, Full Graph, Full Graph\
@ifnottex\
@unnumberedsec Labelled Example Graph\
@end ifnottex\
\
Since insertions fill a buffer to the right and below point, the new\
graph printing function should first print the Y or vertical axis,\
then the body of the graph, and finally the X or horizontal axis.\
This sequence lays out for us the contents of the function:\
\
@enumerate\
@item\
Set up code.\
\
@item\
Print Y axis.\
\
@item\
Print body of graph.\
\
@item\
Print X axis.\
@end enumerate\
\
@need 800\
Here is an example of how a finished graph should look:\
\
@smallexample\
@group\
    10 -\
                  *\
                  *  *\
                  *  **\
                  *  ***\
     5 -      *   *******\
            * *** *******\
            *************\
          ***************\
     1 - ****************\
         |   |    |    |\
         1   5   10   15\
@end group\
@end smallexample\
\
@noindent\
In this graph, both the vertical and the horizontal axes are labelled\
with numbers.  However, in some graphs, the horizontal axis is time\
and would be better labelled with months, like this:\
\
@smallexample\
@group\
     5 -      *\
            * ** *\
            *******\
          ********** **\
     1 - **************\
         |    ^      |\
         Jan  June   Jan\
@end group\
@end smallexample\
\
Indeed, with a little thought, we can easily come up with a variety of\
vertical and horizontal labelling schemes.  Our task could become\
complicated.  But complications breed confusion.  Rather than permit\
this, it is better choose a simple labelling scheme for our first\
effort, and to modify or replace it later.\
\
@need 1200\
These considerations suggest the following outline for the\
@code\{print-graph\} function:\
\
@smallexample\
@group\
(defun print-graph (numbers-list)\
  "@var\{documentation\}@dots\{\}"\
  (let ((height  @dots\{\}\
        @dots\{\}))\
@end group\
@group\
    (print-Y-axis height @dots\{\} )\
    (graph-body-print numbers-list)\
    (print-X-axis @dots\{\} )))\
@end group\
@end smallexample\
\
We can work on each part of the @code\{print-graph\} function definition\
in turn.\
\
@node print-graph Varlist, print-Y-axis, Labelled Example, Full Graph\
@comment  node-name,  next,  previous,  up\
@appendixsec The @code\{print-graph\} Varlist\
@cindex @code\{print-graph\} varlist\
\
In writing the @code\{print-graph\} function, the first task is to write\
the varlist in the @code\{let\} expression.  (We will leave aside for the\
moment any thoughts about making the function interactive or about the\
contents of its documentation string.)\
\
The varlist should set several values.  Clearly, the top of the label\
for the vertical axis must be at least the height of the graph, which\
means that we must obtain this information here.  Note that the\
@code\{print-graph-body\} function also requires this information.  There\
is no reason to calculate the height of the graph in two different\
places, so we should change @code\{print-graph-body\} from the way we\
defined it earlier to take advantage of the calculation.\
\
Similarly, both the function for printing the X axis labels and the\
@code\{print-graph-body\} function need to learn the value of the width of\
each symbol.  We can perform the calculation here and change the\
definition for @code\{print-graph-body\} from the way we defined it in the\
previous chapter.\
\
The length of the label for the horizontal axis must be at least as long\
as the graph.  However, this information is used only in the function\
that prints the horizontal axis, so it does not need to be calculated here.\
\
These thoughts lead us directly to the following form for the varlist\
in the @code\{let\} for @code\{print-graph\}:\
\
@smallexample\
@group\
(let ((height (apply 'max numbers-list)) ; @r\{First version.\}\
      (symbol-width (length graph-blank)))\
@end group\
@end smallexample\
\
@noindent\
As we shall see, this expression is not quite right.\
\
@need 2000\
@node print-Y-axis, print-X-axis, print-graph Varlist, Full Graph\
@comment  node-name,  next,  previous,  up\
@appendixsec The @code\{print-Y-axis\} Function\
@cindex Axis, print vertical\
@cindex Y axis printing\
@cindex Vertical axis printing\
@cindex Print vertical axis\
\
The job of the @code\{print-Y-axis\} function is to print a label for\
the vertical axis that looks like this:\
\
@smallexample\
@group\
    10 -\
\
\
\
\
     5 -\
\
\
\
     1 -\
@end group\
@end smallexample\
\
@noindent\
The function should be passed the height of the graph, and then should\
construct and insert the appropriate numbers and marks.\
\
@menu\
* print-Y-axis in Detail::\
* Height of label::             What height for the Y axis?\
* Compute a Remainder::         How to compute the remainder of a division.\
* Y Axis Element::              Construct a line for the Y axis.\
* Y-axis-column::               Generate a list of Y axis labels.\
* print-Y-axis Penultimate::    A not quite final version.\
@end menu\
\
@node print-Y-axis in Detail, Height of label, print-Y-axis, print-Y-axis\
@ifnottex\
@unnumberedsubsec The @code\{print-Y-axis\} Function in Detail\
@end ifnottex\
\
It is easy enough to see in the figure what the Y axis label should\
look like; but to say in words, and then to write a function\
definition to do the job is another matter.  It is not quite true to\
say that we want a number and a tic every five lines: there are only\
three lines between the @samp\{1\} and the @samp\{5\} (lines 2, 3, and 4),\
but four lines between the @samp\{5\} and the @samp\{10\} (lines 6, 7, 8,\
and 9).  It is better to say that we want a number and a tic mark on\
the base line (number 1) and then that we want a number and a tic on\
the fifth line from the bottom and on every line that is a multiple of\
five.\
\
@node Height of label, Compute a Remainder, print-Y-axis in Detail, print-Y-axis\
@ifnottex\
@unnumberedsubsec What height should the label be?\
@end ifnottex\
\
The next issue is what height the label should be?  Suppose the maximum\
height of tallest column of the graph is seven.  Should the highest\
label on the Y axis be @samp\{5 -\}, and should the graph stick up above\
the label?  Or should the highest label be @samp\{7 -\}, and mark the peak\
of the graph?  Or should the highest label be @code\{10 -\}, which is a\
multiple of five, and be higher than the topmost value of the graph?\
\
The latter form is preferred.  Most graphs are drawn within rectangles\
whose sides are an integral number of steps long---5, 10, 15, and so\
on for a step distance of five.  But as soon as we decide to use a\
step height for the vertical axis, we discover that the simple\
expression in the varlist for computing the height is wrong.  The\
expression is @code\{(apply 'max numbers-list)\}.  This returns the\
precise height, not the maximum height plus whatever is necessary to\
round up to the nearest multiple of five.  A more complex expression\
is required.\
\
As usual in cases like this, a complex problem becomes simpler if it is\
divided into several smaller problems.\
\
First, consider the case when the highest value of the graph is an\
integral multiple of five---when it is 5, 10, 15, or some higher\
multiple of five.  We can use this value as the Y axis height.\
\
A fairly simply way to determine whether a number is a multiple of\
five is to divide it by five and see if the division results in a\
remainder.  If there is no remainder, the number is a multiple of\
five.  Thus, seven divided by five has a remainder of two, and seven\
is not an integral multiple of five.  Put in slightly different\
language, more reminiscent of the classroom, five goes into seven\
once, with a remainder of two.  However, five goes into ten twice,\
with no remainder: ten is an integral multiple of five.\
\
@node Compute a Remainder, Y Axis Element, Height of label, print-Y-axis\
@appendixsubsec Side Trip: Compute a Remainder\
\
@findex % @r\{(remainder function)\}\
@cindex Remainder function, @code\{%\}\
In Lisp, the function for computing a remainder is @code\{%\}.  The\
function returns the remainder of its first argument divided by its\
second argument.  As it happens, @code\{%\} is a function in Emacs Lisp\
that you cannot discover using @code\{apropos\}: you find nothing if you\
type @kbd\{M-x apropos @key\{RET\} remainder @key\{RET\}\}.  The only way to\
learn of the existence of @code\{%\} is to read about it in a book such\
as this or in the Emacs Lisp sources.\
\
You can try the @code\{%\} function by evaluating the following two\
expressions:\
\
@smallexample\
@group\
(% 7 5)\
\
(% 10 5)\
@end group\
@end smallexample\
\
@noindent\
The first expression returns 2 and the second expression returns 0.\
\
To test whether the returned value is zero or some other number, we\
can use the @code\{zerop\} function.  This function returns @code\{t\} if\
its argument, which must be a number, is zero.\
\
@smallexample\
@group\
(zerop (% 7 5))\
     @result\{\} nil\
\
(zerop (% 10 5))\
     @result\{\} t\
@end group\
@end smallexample\
\
Thus, the following expression will return @code\{t\} if the height\
of the graph is evenly divisible by five:\
\
@smallexample\
(zerop (% height 5))\
@end smallexample\
\
@noindent\
(The value of @code\{height\}, of course, can be found from @code\{(apply\
'max numbers-list)\}.)\
\
On the other hand, if the value of @code\{height\} is not a multiple of\
five, we want to reset the value to the next higher multiple of five.\
This is straightforward arithmetic using functions with which we are\
already familiar.  First, we divide the value of @code\{height\} by five\
to determine how many times five goes into the number.  Thus, five\
goes into twelve twice.  If we add one to this quotient and multiply by\
five, we will obtain the value of the next multiple of five that is\
larger than the height.  Five goes into twelve twice.  Add one to two,\
and multiply by five; the result is fifteen, which is the next multiple\
of five that is higher than twelve.  The Lisp expression for this is:\
\
@smallexample\
(* (1+ (/ height 5)) 5)\
@end smallexample\
\
@noindent\
For example, if you evaluate the following, the result is 15:\
\
@smallexample\
(* (1+ (/ 12 5)) 5)\
@end smallexample\
\
All through this discussion, we have been using `five' as the value\
for spacing labels on the Y axis; but we may want to use some other\
value.  For generality, we should replace `five' with a variable to\
which we can assign a value.  The best name I can think of for this\
variable is @code\{Y-axis-label-spacing\}.\
\
@need 1250\
Using this term, and an @code\{if\} expression, we produce the\
following:\
\
@smallexample\
@group\
(if (zerop (% height Y-axis-label-spacing))\
    height\
  ;; @r\{else\}\
  (* (1+ (/ height Y-axis-label-spacing))\
     Y-axis-label-spacing))\
@end group\
@end smallexample\
\
@noindent\
This expression returns the value of @code\{height\} itself if the height\
is an even multiple of the value of the @code\{Y-axis-label-spacing\} or\
else it computes and returns a value of @code\{height\} that is equal to\
the next higher multiple of the value of the @code\{Y-axis-label-spacing\}.\
\
We can now include this expression in the @code\{let\} expression of the\
@code\{print-graph\} function (after first setting the value of\
@code\{Y-axis-label-spacing\}):\
@vindex Y-axis-label-spacing\
\
@smallexample\
@group\
(defvar Y-axis-label-spacing 5\
  "Number of lines from one Y axis label to next.")\
@end group\
\
@group\
@dots\{\}\
(let* ((height (apply 'max numbers-list))\
       (height-of-top-line\
        (if (zerop (% height Y-axis-label-spacing))\
            height\
@end group\
@group\
          ;; @r\{else\}\
          (* (1+ (/ height Y-axis-label-spacing))\
             Y-axis-label-spacing)))\
       (symbol-width (length graph-blank))))\
@dots\{\}\
@end group\
@end smallexample\
\
@noindent\
(Note use of the  @code\{let*\} function: the initial value of height is\
computed once by the @code\{(apply 'max numbers-list)\} expression and\
then the resulting value of  @code\{height\} is used to compute its\
final value.  @xref\{fwd-para let, , The @code\{let*\} expression\}, for\
more about @code\{let*\}.)\
\
@node Y Axis Element, Y-axis-column, Compute a Remainder, print-Y-axis\
@appendixsubsec Construct a Y Axis Element\
\
When we print the vertical axis, we want to insert strings such as\
@w\{@samp\{5 -\}\} and @w\{@samp\{10 - \}\} every five lines.\
Moreover, we want the numbers and dashes to line up, so shorter\
numbers must be padded with leading spaces.  If some of the strings\
use two digit numbers, the strings with single digit numbers must\
include a leading blank space before the number.\
\
@findex number-to-string\
To figure out the length of the number, the @code\{length\} function is\
used.  But the @code\{length\} function works only with a string, not with\
a number.  So the number has to be converted from being a number to\
being a string.  This is done with the @code\{number-to-string\} function.\
For example,\
\
@smallexample\
@group\
(length (number-to-string 35))\
     @result\{\} 2\
\
(length (number-to-string 100))\
     @result\{\} 3\
@end group\
@end smallexample\
\
@noindent\
(@code\{number-to-string\} is also called @code\{int-to-string\}; you will\
see this alternative name in various sources.)\
\
In addition, in each label, each number is followed by a string such\
as @w\{@samp\{ - \}\}, which we will call the @code\{Y-axis-tic\} marker.\
This variable is defined with @code\{defvar\}:\
\
@vindex Y-axis-tic\
@smallexample\
@group\
(defvar Y-axis-tic " - "\
   "String that follows number in a Y axis label.")\
@end group\
@end smallexample\
\
The length of the Y label is the sum of the length of the Y axis tic\
mark and the length of the number of the top of the graph.\
\
@smallexample\
(length (concat (number-to-string height) Y-axis-tic)))\
@end smallexample\
\
This value will be calculated by the @code\{print-graph\} function in\
its varlist as @code\{full-Y-label-width\} and passed on.  (Note that we\
did not think to include this in the varlist when we first proposed it.)\
\
To make a complete vertical axis label, a tic mark is concatenated\
with a number; and the two together may be preceded by one or more\
spaces depending on how long the number is.  The label consists of\
three parts: the (optional) leading spaces, the number, and the tic\
mark.  The function is passed the value of the number for the specific\
row, and the value of the width of the top line, which is calculated\
(just once) by @code\{print-graph\}.\
\
@smallexample\
@group\
(defun Y-axis-element (number full-Y-label-width)\
  "Construct a NUMBERed label element.\
A numbered element looks like this `  5 - ',\
and is padded as needed so all line up with\
the element for the largest number."\
@end group\
@group\
  (let* ((leading-spaces\
         (- full-Y-label-width\
            (length\
             (concat (number-to-string number)\
                     Y-axis-tic)))))\
@end group\
@group\
    (concat\
     (make-string leading-spaces ? )\
     (number-to-string number)\
     Y-axis-tic)))\
@end group\
@end smallexample\
\
The @code\{Y-axis-element\} function concatenates together the leading\
spaces, if any; the number, as a string; and the tic mark.\
\
To figure out how many leading spaces the label will need, the\
function subtracts the actual length of the label---the length of the\
number plus the length of the tic mark---from the desired label width.\
\
@findex make-string\
Blank spaces are inserted using the @code\{make-string\} function.  This\
function takes two arguments: the first tells it how long the string\
will be and the second is a symbol for the character to insert, in a\
special format.  The format is a question mark followed by a blank\
space, like this, @samp\{? \}.  @xref\{Character Type, , Character Type,\
elisp, The GNU Emacs Lisp Reference Manual\}, for a description of the\
syntax for characters.  (Of course, you might want to replace the\
blank space by some other character @dots\{\}  You know what to do.)\
\
The @code\{number-to-string\} function is used in the concatenation\
expression, to convert the number to a string that is concatenated\
with the leading spaces and the tic mark.\
\
@node Y-axis-column, print-Y-axis Penultimate, Y Axis Element, print-Y-axis\
@appendixsubsec Create a Y Axis Column\
\
The preceding functions provide all the tools needed to construct a\
function that generates a list of numbered and blank strings to insert\
as the label for the vertical axis:\
\
@findex Y-axis-column\
@smallexample\
@group\
(defun Y-axis-column (height width-of-label)\
  "Construct list of Y axis labels and blank strings.\
For HEIGHT of line above base and WIDTH-OF-LABEL."\
  (let (Y-axis)\
@group\
@end group\
    (while (> height 1)\
      (if (zerop (% height Y-axis-label-spacing))\
          ;; @r\{Insert label.\}\
          (setq Y-axis\
                (cons\
                 (Y-axis-element height width-of-label)\
                 Y-axis))\
@group\
@end group\
        ;; @r\{Else, insert blanks.\}\
        (setq Y-axis\
              (cons\
               (make-string width-of-label ? )\
               Y-axis)))\
      (setq height (1- height)))\
    ;; @r\{Insert base line.\}\
    (setq Y-axis\
          (cons (Y-axis-element 1 width-of-label) Y-axis))\
    (nreverse Y-axis)))\
@end group\
@end smallexample\
\
In this function, we start with the value of @code\{height\} and\
repetitively subtract one from its value.  After each subtraction, we\
test to see whether the value is an integral multiple of the\
@code\{Y-axis-label-spacing\}.  If it is, we construct a numbered label\
using the @code\{Y-axis-element\} function; if not, we construct a\
blank label using the @code\{make-string\} function.  The base line\
consists of the number one followed by a tic mark.\
\
@need 2000\
@node print-Y-axis Penultimate,  , Y-axis-column, print-Y-axis\
@appendixsubsec The Not Quite Final Version of @code\{print-Y-axis\}\
\
The list constructed by the @code\{Y-axis-column\} function is passed to\
the @code\{print-Y-axis\} function, which inserts the list as a column.\
\
@findex print-Y-axis\
@smallexample\
@group\
(defun print-Y-axis (height full-Y-label-width)\
  "Insert Y axis using HEIGHT and FULL-Y-LABEL-WIDTH.\
Height must be the maximum height of the graph.\
Full width is the width of the highest label element."\
;; Value of height and full-Y-label-width\
;; are passed by `print-graph'.\
@end group\
@group\
  (let ((start (point)))\
    (insert-rectangle\
     (Y-axis-column height full-Y-label-width))\
    ;; @r\{Place point ready for inserting graph.\}\
    (goto-char start)\
    ;; @r\{Move point forward by value of\} full-Y-label-width\
    (forward-char full-Y-label-width)))\
@end group\
@end smallexample\
\
The @code\{print-Y-axis\} uses the @code\{insert-rectangle\} function to\
insert the Y axis labels created by the @code\{Y-axis-column\} function.\
In addition, it places point at the correct position for printing the body of\
the graph.\
\
You can test @code\{print-Y-axis\}:\
\
@enumerate\
@item\
Install\
\
@smallexample\
@group\
Y-axis-label-spacing\
Y-axis-tic\
Y-axis-element\
Y-axis-column\
print-Y-axis\
@end group\
@end smallexample\
\
@item\
Copy the following expression:\
\
@smallexample\
(print-Y-axis 12 5)\
@end smallexample\
\
@item\
Switch to the @file\{*scratch*\} buffer and place the cursor where you\
want the axis labels to start.\
\
@item\
Type @kbd\{M-:\} (@code\{eval-expression\}).\
\
@item\
Yank the @code\{graph-body-print\} expression into the minibuffer\
with @kbd\{C-y\} (@code\{yank)\}.\
\
@item\
Press @key\{RET\} to evaluate the expression.\
@end enumerate\
\
Emacs will print labels vertically, the top one being @w\{@samp\{10 -@w\{\
\}\}\}.  (The @code\{print-graph\} function will pass the value of\
@code\{height-of-top-line\}, which in this case will end up as 15,\
thereby getting rid of what might appear as a bug.)\
\
@need 2000\
@node print-X-axis, Print Whole Graph, print-Y-axis, Full Graph\
@appendixsec The @code\{print-X-axis\} Function\
@cindex Axis, print horizontal\
@cindex X axis printing\
@cindex Print horizontal axis\
@cindex Horizontal axis printing\
\
X axis labels are much like Y axis labels, except that the ticks are on a\
line above the numbers.  Labels should look like this:\
\
@smallexample\
@group\
    |   |    |    |\
    1   5   10   15\
@end group\
@end smallexample\
\
The first tic is under the first column of the graph and is preceded by\
several blank spaces.  These spaces provide room in rows above for the Y\
axis labels.  The second, third, fourth, and subsequent ticks are all\
spaced equally, according to the value of @code\{X-axis-label-spacing\}.\
\
The second row of the X axis consists of numbers, preceded by several\
blank spaces and also separated according to the value of the variable\
@code\{X-axis-label-spacing\}.\
\
The value of the variable @code\{X-axis-label-spacing\} should itself be\
measured in units of @code\{symbol-width\}, since you may want to change\
the width of the symbols that you are using to print the body of the\
graph without changing the ways the graph is labelled.\
\
@menu\
* Similarities differences::    Much like @code\{print-Y-axis\}, but not exactly.\
* X Axis Tic Marks::            Create tic marks for the horizontal axis.\
@end menu\
\
@node Similarities differences, X Axis Tic Marks, print-X-axis, print-X-axis\
@ifnottex\
@unnumberedsubsec Similarities and differences\
@end ifnottex\
\
The @code\{print-X-axis\} function is constructed in more or less the\
same fashion as the @code\{print-Y-axis\} function except that it has\
two lines: the line of tic marks and the numbers.  We will write a\
separate function to print each line and then combine them within the\
@code\{print-X-axis\} function.\
\
This is a three step process:\
\
@enumerate\
@item\
Write a function to print the X axis tic marks, @code\{print-X-axis-tic-line\}.\
\
@item\
Write a function to print the X numbers, @code\{print-X-axis-numbered-line\}.\
\
@item\
Write a function to print both lines, the @code\{print-X-axis\} function,\
using @code\{print-X-axis-tic-line\} and\
@code\{print-X-axis-numbered-line\}.\
@end enumerate\
\
@node X Axis Tic Marks,  , Similarities differences, print-X-axis\
@appendixsubsec X Axis Tic Marks\
\
The first function should print the X axis tic marks.  We must specify\
the tic marks themselves and their spacing:\
\
@smallexample\
@group\
(defvar X-axis-label-spacing\
  (if (boundp 'graph-blank)\
      (* 5 (length graph-blank)) 5)\
  "Number of units from one X axis label to next.")\
@end group\
@end smallexample\
\
@noindent\
(Note that the value of @code\{graph-blank\} is set by another\
@code\{defvar\}.  The @code\{boundp\} predicate checks whether it has\
already been set; @code\{boundp\} returns @code\{nil\} if it has not.  If\
@code\{graph-blank\} were unbound and we did not use this conditional\
construction, in a recent GNU Emacs, we would enter the debugger and\
see an error message saying @samp\{@w\{Debugger entered--Lisp error:\}\
@w\{(void-variable graph-blank)\}\}.)\
\
@need 1200\
Here is the @code\{defvar\} for @code\{X-axis-tic-symbol\}:\
\
@smallexample\
@group\
(defvar X-axis-tic-symbol "|"\
  "String to insert to point to a column in X axis.")\
@end group\
@end smallexample\
\
@need 1250\
The goal is to make a line that looks like this:\
\
@smallexample\
       |   |    |    |\
@end smallexample\
\
The first tic is indented so that it is under the first column, which is\
indented to provide space for the Y axis labels.\
\
A tic element consists of the blank spaces that stretch from one tic to\
the next plus a tic symbol.  The number of blanks is determined by the\
width of the tic symbol and the @code\{X-axis-label-spacing\}.\
\
@need 1250\
The code looks like this:\
\
@smallexample\
@group\
;;; X-axis-tic-element\
@dots\{\}\
(concat\
 (make-string\
  ;; @r\{Make a string of blanks.\}\
  (-  (* symbol-width X-axis-label-spacing)\
      (length X-axis-tic-symbol))\
  ? )\
 ;; @r\{Concatenate blanks with tic symbol.\}\
 X-axis-tic-symbol)\
@dots\{\}\
@end group\
@end smallexample\
\
Next, we determine how many blanks are needed to indent the first tic\
mark to the first column of the graph.  This uses the value of\
@code\{full-Y-label-width\} passed it by the @code\{print-graph\} function.\
\
@need 1250\
The code to make @code\{X-axis-leading-spaces\}\
looks like this:\
\
@smallexample\
@group\
;; X-axis-leading-spaces\
@dots\{\}\
(make-string full-Y-label-width ? )\
@dots\{\}\
@end group\
@end smallexample\
\
We also need to determine the length of the horizontal axis, which is\
the length of the numbers list, and the number of ticks in the horizontal\
axis:\
\
@smallexample\
@group\
;; X-length\
@dots\{\}\
(length numbers-list)\
@end group\
\
@group\
;; tic-width\
@dots\{\}\
(* symbol-width X-axis-label-spacing)\
@end group\
\
@group\
;; number-of-X-ticks\
(if (zerop (% (X-length tic-width)))\
    (/ (X-length tic-width))\
  (1+ (/ (X-length tic-width))))\
@end group\
@end smallexample\
\
@need 1250\
All this leads us directly to the function for printing the X axis tic line:\
\
@findex print-X-axis-tic-line\
@smallexample\
@group\
(defun print-X-axis-tic-line\
  (number-of-X-tics X-axis-leading-spaces X-axis-tic-element)\
  "Print ticks for X axis."\
    (insert X-axis-leading-spaces)\
    (insert X-axis-tic-symbol)  ; @r\{Under first column.\}\
@end group\
@group\
    ;; @r\{Insert second tic in the right spot.\}\
    (insert (concat\
             (make-string\
              (-  (* symbol-width X-axis-label-spacing)\
                  ;; @r\{Insert white space up to second tic symbol.\}\
                  (* 2 (length X-axis-tic-symbol)))\
              ? )\
             X-axis-tic-symbol))\
@end group\
@group\
    ;; @r\{Insert remaining ticks.\}\
    (while (> number-of-X-tics 1)\
      (insert X-axis-tic-element)\
      (setq number-of-X-tics (1- number-of-X-tics))))\
@end group\
@end smallexample\
\
The line of numbers is equally straightforward:\
\
@need 1250\
First, we create a numbered element with blank spaces before each number:\
\
@findex X-axis-element\
@smallexample\
@group\
(defun X-axis-element (number)\
  "Construct a numbered X axis element."\
  (let ((leading-spaces\
         (-  (* symbol-width X-axis-label-spacing)\
             (length (number-to-string number)))))\
    (concat (make-string leading-spaces ? )\
            (number-to-string number))))\
@end group\
@end smallexample\
\
Next, we create the function to print the numbered line, starting with\
the number ``1'' under the first column:\
\
@findex print-X-axis-numbered-line\
@smallexample\
@group\
(defun print-X-axis-numbered-line\
  (number-of-X-tics X-axis-leading-spaces)\
  "Print line of X-axis numbers"\
  (let ((number X-axis-label-spacing))\
    (insert X-axis-leading-spaces)\
    (insert "1")\
@end group\
@group\
    (insert (concat\
             (make-string\
              ;; @r\{Insert white space up to next number.\}\
              (-  (* symbol-width X-axis-label-spacing) 2)\
              ? )\
             (number-to-string number)))\
@end group\
@group\
    ;; @r\{Insert remaining numbers.\}\
    (setq number (+ number X-axis-label-spacing))\
    (while (> number-of-X-tics 1)\
      (insert (X-axis-element number))\
      (setq number (+ number X-axis-label-spacing))\
      (setq number-of-X-tics (1- number-of-X-tics)))))\
@end group\
@end smallexample\
\
Finally, we need to write the @code\{print-X-axis\} that uses\
@code\{print-X-axis-tic-line\} and\
@code\{print-X-axis-numbered-line\}.\
\
The function must determine the local values of the variables used by both\
@code\{print-X-axis-tic-line\} and @code\{print-X-axis-numbered-line\}, and\
then it must call them.  Also, it must print the carriage return that\
separates the two lines.\
\
The function consists of a varlist that specifies five local variables,\
and calls to each of the two line printing functions:\
\
@findex print-X-axis\
@smallexample\
@group\
(defun print-X-axis (numbers-list)\
  "Print X axis labels to length of NUMBERS-LIST."\
  (let* ((leading-spaces\
          (make-string full-Y-label-width ? ))\
@end group\
@group\
       ;; symbol-width @r\{is provided by\} graph-body-print\
       (tic-width (* symbol-width X-axis-label-spacing))\
       (X-length (length numbers-list))\
@end group\
@group\
       (X-tic\
        (concat\
         (make-string\
@end group\
@group\
          ;; @r\{Make a string of blanks.\}\
          (-  (* symbol-width X-axis-label-spacing)\
              (length X-axis-tic-symbol))\
          ? )\
@end group\
@group\
         ;; @r\{Concatenate blanks with tic symbol.\}\
         X-axis-tic-symbol))\
@end group\
@group\
       (tic-number\
        (if (zerop (% X-length tic-width))\
            (/ X-length tic-width)\
          (1+ (/ X-length tic-width)))))\
@end group\
@group\
    (print-X-axis-tic-line tic-number leading-spaces X-tic)\
    (insert "\\n")\
    (print-X-axis-numbered-line tic-number leading-spaces)))\
@end group\
@end smallexample\
\
@need 1250\
You can test @code\{print-X-axis\}:\
\
@enumerate\
@item\
Install @code\{X-axis-tic-symbol\}, @code\{X-axis-label-spacing\},\
@code\{print-X-axis-tic-line\}, as well as @code\{X-axis-element\},\
@code\{print-X-axis-numbered-line\}, and @code\{print-X-axis\}.\
\
@item\
Copy the following expression:\
\
@smallexample\
@group\
(progn\
 (let ((full-Y-label-width 5)\
       (symbol-width 1))\
   (print-X-axis\
    '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))))\
@end group\
@end smallexample\
\
@item\
Switch to the @file\{*scratch*\} buffer and place the cursor where you\
want the axis labels to start.\
\
@item\
Type @kbd\{M-:\} (@code\{eval-expression\}).\
\
@item\
Yank the test expression into the minibuffer\
with @kbd\{C-y\} (@code\{yank)\}.\
\
@item\
Press @key\{RET\} to evaluate the expression.\
@end enumerate\
\
@need 1250\
Emacs will print the horizontal axis like this:\
@sp 1\
\
@smallexample\
@group\
     |   |    |    |    |\
     1   5   10   15   20\
@end group\
@end smallexample\
\
@node Print Whole Graph,  , print-X-axis, Full Graph\
@appendixsec Printing the Whole Graph\
@cindex Printing the whole graph\
@cindex Whole graph printing\
@cindex Graph, printing all\
\
Now we are nearly ready to print the whole graph.\
\
The function to print the graph with the proper labels follows the\
outline we created earlier (@pxref\{Full Graph, , A Graph with Labelled\
Axes\}), but with additions.\
\
@need 1250\
Here is the outline:\
\
@smallexample\
@group\
(defun print-graph (numbers-list)\
  "@var\{documentation\}@dots\{\}"\
  (let ((height  @dots\{\}\
        @dots\{\}))\
@end group\
@group\
    (print-Y-axis height @dots\{\} )\
    (graph-body-print numbers-list)\
    (print-X-axis @dots\{\} )))\
@end group\
@end smallexample\
\
@menu\
* The final version::           A few changes.\
* Test print-graph::            Run a short test.\
* Graphing words in defuns::    Executing the final code.\
* lambda::                      How to write an anonymous function.\
* mapcar::                      Apply a function to elements of a list.\
* Another Bug::                 Yet another bug @dots\{\} most insidious.\
* Final printed graph::         The graph itself!\
@end menu\
\
@node The final version, Test print-graph, Print Whole Graph, Print Whole Graph\
@ifnottex\
@unnumberedsubsec Changes for the Final Version\
@end ifnottex\
\
The final version is different from what we planned in two ways:\
first, it contains additional values calculated once in the varlist;\
second, it carries an option to specify the labels' increment per row.\
This latter feature turns out to be essential; otherwise, a graph may\
have more rows than fit on a display or on a sheet of paper.\
\
@need 1500\
This new feature requires a change to the @code\{Y-axis-column\}\
function, to add @code\{vertical-step\} to it.  The function looks like\
this:\
\
@findex Y-axis-column @r\{Final version.\}\
@smallexample\
@group\
;;; @r\{Final version.\}\
(defun Y-axis-column\
  (height width-of-label &optional vertical-step)\
  "Construct list of labels for Y axis.\
HEIGHT is maximum height of graph.\
WIDTH-OF-LABEL is maximum width of label.\
VERTICAL-STEP, an option, is a positive integer\
that specifies how much a Y axis label increments\
for each line.  For example, a step of 5 means\
that each line is five units of the graph."\
@end group\
@group\
  (let (Y-axis\
        (number-per-line (or vertical-step 1)))\
    (while (> height 1)\
      (if (zerop (% height Y-axis-label-spacing))\
@end group\
@group\
          ;; @r\{Insert label.\}\
          (setq Y-axis\
                (cons\
                 (Y-axis-element\
                  (* height number-per-line)\
                  width-of-label)\
                 Y-axis))\
@end group\
@group\
        ;; @r\{Else, insert blanks.\}\
        (setq Y-axis\
              (cons\
               (make-string width-of-label ? )\
               Y-axis)))\
      (setq height (1- height)))\
@end group\
@group\
    ;; @r\{Insert base line.\}\
    (setq Y-axis (cons (Y-axis-element\
                        (or vertical-step 1)\
                        width-of-label)\
                       Y-axis))\
    (nreverse Y-axis)))\
@end group\
@end smallexample\
\
The values for the maximum height of graph and the width of a symbol\
are computed by @code\{print-graph\} in its @code\{let\} expression; so\
@code\{graph-body-print\} must be changed to accept them.\
\
@findex graph-body-print @r\{Final version.\}\
@smallexample\
@group\
;;; @r\{Final version.\}\
(defun graph-body-print (numbers-list height symbol-width)\
  "Print a bar graph of the NUMBERS-LIST.\
The numbers-list consists of the Y-axis values.\
HEIGHT is maximum height of graph.\
SYMBOL-WIDTH is number of each column."\
@end group\
@group\
  (let (from-position)\
    (while numbers-list\
      (setq from-position (point))\
      (insert-rectangle\
       (column-of-graph height (car numbers-list)))\
      (goto-char from-position)\
      (forward-char symbol-width)\
@end group\
@group\
      ;; @r\{Draw graph column by column.\}\
      (sit-for 0)\
      (setq numbers-list (cdr numbers-list)))\
    ;; @r\{Place point for X axis labels.\}\
    (forward-line height)\
    (insert "\\n")))\
@end group\
@end smallexample\
\
@need 1250\
Finally, the code for the @code\{print-graph\} function:\
\
@findex print-graph @r\{Final version.\}\
@smallexample\
@group\
;;; @r\{Final version.\}\
(defun print-graph\
  (numbers-list &optional vertical-step)\
  "Print labelled bar graph of the NUMBERS-LIST.\
The numbers-list consists of the Y-axis values.\
@end group\
\
@group\
Optionally, VERTICAL-STEP, a positive integer,\
specifies how much a Y axis label increments for\
each line.  For example, a step of 5 means that\
each row is five units."\
@end group\
@group\
  (let* ((symbol-width (length graph-blank))\
         ;; @code\{height\} @r\{is both the largest number\}\
         ;; @r\{and the number with the most digits.\}\
         (height (apply 'max numbers-list))\
@end group\
@group\
         (height-of-top-line\
          (if (zerop (% height Y-axis-label-spacing))\
              height\
            ;; @r\{else\}\
            (* (1+ (/ height Y-axis-label-spacing))\
               Y-axis-label-spacing)))\
@end group\
@group\
         (vertical-step (or vertical-step 1))\
         (full-Y-label-width\
          (length\
@end group\
@group\
           (concat\
            (number-to-string\
             (* height-of-top-line vertical-step))\
            Y-axis-tic))))\
@end group\
\
@group\
    (print-Y-axis\
     height-of-top-line full-Y-label-width vertical-step)\
@end group\
@group\
    (graph-body-print\
     numbers-list height-of-top-line symbol-width)\
    (print-X-axis numbers-list)))\
@end group\
@end smallexample\
\
@node Test print-graph, Graphing words in defuns, The final version, Print Whole Graph\
@appendixsubsec Testing @code\{print-graph\}\
\
@need 1250\
We can test the @code\{print-graph\} function with a short list of numbers:\
\
@enumerate\
@item\
Install the final versions of @code\{Y-axis-column\},\
@code\{graph-body-print\}, and @code\{print-graph\} (in addition to the\
rest of the code.)\
\
@item\
Copy the following expression:\
\
@smallexample\
(print-graph '(3 2 5 6 7 5 3 4 6 4 3 2 1))\
@end smallexample\
\
@item\
Switch to the @file\{*scratch*\} buffer and place the cursor where you\
want the axis labels to start.\
\
@item\
Type @kbd\{M-:\} (@code\{eval-expression\}).\
\
@item\
Yank the test expression into the minibuffer\
with @kbd\{C-y\} (@code\{yank)\}.\
\
@item\
Press @key\{RET\} to evaluate the expression.\
@end enumerate\
\
@need 1250\
Emacs will print a graph that looks like this:\
\
@smallexample\
@group\
10 -\
\
\
         *\
        **   *\
 5 -   ****  *\
       **** ***\
     * *********\
     ************\
 1 - *************\
\
     |   |    |    |\
     1   5   10   15\
@end group\
@end smallexample\
\
@need 1200\
On the other hand, if you pass @code\{print-graph\} a\
@code\{vertical-step\} value of 2, by evaluating this expression:\
\
@smallexample\
(print-graph '(3 2 5 6 7 5 3 4 6 4 3 2 1) 2)\
@end smallexample\
\
@need 1250\
@noindent\
The graph looks like this:\
\
@smallexample\
@group\
20 -\
\
\
         *\
        **   *\
10 -   ****  *\
       **** ***\
     * *********\
     ************\
 2 - *************\
\
     |   |    |    |\
     1   5   10   15\
@end group\
@end smallexample\
\
@noindent\
(A question: is the `2' on the bottom of the vertical axis a bug or a\
feature?  If you think it is a bug, and should be a `1' instead, (or\
even a `0'), you can modify the sources.)\
\
@node Graphing words in defuns, lambda, Test print-graph, Print Whole Graph\
@appendixsubsec Graphing Numbers of Words and Symbols\
\
Now for the graph for which all this code was written: a graph that\
shows how many function definitions contain fewer than 10 words and\
symbols, how many contain between 10 and 19 words and symbols, how\
many contain between 20 and 29 words and symbols, and so on.\
\
This is a multi-step process.  First make sure you have loaded all the\
requisite code.\
\
@need 1500\
It is a good idea to reset the value of @code\{top-of-ranges\} in case\
you have set it to some different value.  You can evaluate the\
following:\
\
@smallexample\
@group\
(setq top-of-ranges\
 '(10  20  30  40  50\
   60  70  80  90 100\
  110 120 130 140 150\
  160 170 180 190 200\
  210 220 230 240 250\
  260 270 280 290 300)\
@end group\
@end smallexample\
\
@noindent\
Next create a list of the number of words and symbols in each range.\
\
@need 1500\
@noindent\
Evaluate the following:\
\
@smallexample\
@group\
(setq list-for-graph\
       (defuns-per-range\
         (sort\
          (recursive-lengths-list-many-files\
           (directory-files "/usr/local/emacs/lisp"\
                            t ".+el$"))\
          '<)\
         top-of-ranges))\
@end group\
@end smallexample\
\
@noindent\
On my old machine, this took about an hour.  It looked though 303 Lisp\
files in my copy of Emacs version 19.23.  After all that computing,\
the @code\{list-for-graph\} had this value:\
\
@smallexample\
@group\
(537 1027 955 785 594 483 349 292 224 199 166 120 116 99\
90 80 67 48 52 45 41 33 28 26 25 20 12 28 11 13 220)\
@end group\
@end smallexample\
\
@noindent\
This means that my copy of Emacs had 537 function definitions with\
fewer than 10 words or symbols in them, 1,027 function definitions\
with 10 to 19 words or symbols in them, 955 function definitions with\
20 to 29 words or symbols in them, and so on.\
\
Clearly, just by looking at this list we can see that most function\
definitions contain ten to thirty words and symbols.\
\
Now for printing.  We do @emph\{not\} want to print a graph that is\
1,030 lines high @dots\{\}  Instead, we should print a graph that is\
fewer than twenty-five lines high.  A graph that height can be\
displayed on almost any monitor, and easily printed on a sheet of paper.\
\
This means that each value in @code\{list-for-graph\} must be reduced to\
one-fiftieth its present value.\
\
Here is a short function to do just that, using two functions we have\
not yet seen, @code\{mapcar\} and @code\{lambda\}.\
\
@smallexample\
@group\
(defun one-fiftieth (full-range)\
  "Return list, each number one-fiftieth of previous."\
 (mapcar '(lambda (arg) (/ arg 50)) full-range))\
@end group\
@end smallexample\
\
@node lambda, mapcar, Graphing words in defuns, Print Whole Graph\
@appendixsubsec A @code\{lambda\} Expression: Useful Anonymity\
@cindex Anonymous function\
@findex lambda\
\
@code\{lambda\} is the symbol for an anonymous function, a function\
without a name.  Every time you use an anonymous function, you need to\
include its whole body.\
\
@need 1250\
@noindent\
Thus,\
\
@smallexample\
(lambda (arg) (/ arg 50))\
@end smallexample\
\
@noindent\
is a function definition that says `return the value resulting from\
dividing whatever is passed to me as @code\{arg\} by 50'.\
\
@need 1200\
Earlier, for example, we had a function @code\{multiply-by-seven\}; it\
multiplied its argument by 7.  This function is similar, except it\
divides its argument by 50; and, it has no name.  The anonymous\
equivalent of @code\{multiply-by-seven\} is:\
\
@smallexample\
(lambda (number) (* 7 number))\
@end smallexample\
\
@noindent\
(@xref\{defun, ,  \'c6\'af\'ba\'b0\'c7\'d1 \'c7\'fc\'bd\'c4 @code\{defun\}\}.)\
\
@need 1250\
@noindent\
If we want to multiply 3 by 7, we can write:\
\
@c !!! Clear print-postscript-figures if the computer formatting this\
@c     document is too small and cannot handle all the diagrams and figures.\
@c clear print-postscript-figures\
@c set print-postscript-figures\
@c lambda example diagram #1\
@ifnottex\
@smallexample\
@group\
(multiply-by-seven 3)\
 \\_______________/ ^\
         |         |\
      function  argument\
@end group\
@end smallexample\
@end ifnottex\
@ifset print-postscript-figures\
@sp 1\
@tex\
@center @image\{lambda-1\}\
%%%% old method of including an image\
% \\input /usr/local/lib/tex/inputs/psfig.tex\
% \\centerline\{\\psfig\{figure=/usr/local/lib/emacs/man/lambda-1.eps\}\}\
% \\catcode`\\@=0 %\
@end tex\
@sp 1\
@end ifset\
@ifclear print-postscript-figures\
@iftex\
@smallexample\
@group\
(multiply-by-seven 3)\
 \\_______________/ ^\
         |         |\
      function  argument\
@end group\
@end smallexample\
@end iftex\
@end ifclear\
\
@noindent\
This expression returns 21.\
\
@need 1250\
@noindent\
Similarly, we can write:\
\
@c lambda example diagram #2\
@ifnottex\
@smallexample\
@group\
((lambda (number) (* 7 number)) 3)\
 \\____________________________/ ^\
               |                |\
      anonymous function     argument\
@end group\
@end smallexample\
@end ifnottex\
@ifset print-postscript-figures\
@sp 1\
@tex\
@center @image\{lambda-2\}\
%%%% old method of including an image\
% \\input /usr/local/lib/tex/inputs/psfig.tex\
% \\centerline\{\\psfig\{figure=/usr/local/lib/emacs/man/lambda-2.eps\}\}\
% \\catcode`\\@=0 %\
@end tex\
@sp 1\
@end ifset\
@ifclear print-postscript-figures\
@iftex\
@smallexample\
@group\
((lambda (number) (* 7 number)) 3)\
 \\____________________________/ ^\
               |                |\
      anonymous function     argument\
@end group\
@end smallexample\
@end iftex\
@end ifclear\
\
@need 1250\
@noindent\
If we want to divide 100 by 50, we can write:\
\
@c lambda example diagram #3\
@ifnottex\
@smallexample\
@group\
((lambda (arg) (/ arg 50)) 100)\
 \\______________________/  \\_/\
             |              |\
    anonymous function   argument\
@end group\
@end smallexample\
@end ifnottex\
@ifset print-postscript-figures\
@sp 1\
@tex\
@center @image\{lambda-3\}\
%%%% old method of including an image\
% \\input /usr/local/lib/tex/inputs/psfig.tex\
% \\centerline\{\\psfig\{figure=/usr/local/lib/emacs/man/lambda-3.eps\}\}\
% \\catcode`\\@=0 %\
@end tex\
@sp 1\
@end ifset\
@ifclear print-postscript-figures\
@iftex\
@smallexample\
@group\
((lambda (arg) (/ arg 50)) 100)\
 \\______________________/  \\_/\
             |              |\
    anonymous function   argument\
@end group\
@end smallexample\
@end iftex\
@end ifclear\
\
@noindent\
This expression returns 2.  The 100 is passed to the function, which\
divides that number by 50.\
\
@xref\{Lambda Expressions, , Lambda Expressions, elisp, The GNU Emacs\
Lisp Reference Manual\}, for more about @code\{lambda\}.  Lisp and lambda\
expressions derive from the Lambda Calculus.\
\
@node mapcar, Another Bug, lambda, Print Whole Graph\
@appendixsubsec The @code\{mapcar\} Function\
@findex mapcar\
\
@code\{mapcar\} is a function that calls its first argument with each\
element of its second argument, in turn.  The second argument must be\
a sequence.\
\
The @samp\{map\} part of the name comes from the mathematical phrase,\
`mapping over a domain', meaning to apply a function to each of the\
elements in a domain.  The mathematical phrase is based on the\
metaphor of a surveyor walking, one step at a time, over an area he is\
mapping.  And @samp\{car\}, of course, comes from the Lisp notion of the\
first of a list.\
\
@need 1250\
@noindent\
For example,\
\
@smallexample\
@group\
(mapcar '1+ '(2 4 6))\
     @result\{\} (3 5 7)\
@end group\
@end smallexample\
\
@noindent\
The function @code\{1+\} which adds one to its argument, is executed on\
@emph\{each\} element of the list, and a new list is returned.\
\
Contrast this with @code\{apply\}, which applies its first argument to\
all the remaining.\
(@xref\{Readying a Graph, , Readying a Graph\}, for a explanation of\
@code\{apply\}.)\
\
@need 1250\
In the definition of @code\{one-fiftieth\}, the first argument is the\
anonymous function:\
\
@smallexample\
(lambda (arg) (/ arg 50))\
@end smallexample\
\
@noindent\
and the second argument is @code\{full-range\}, which will be bound to\
@code\{list-for-graph\}.\
\
@need 1250\
The whole expression looks like this:\
\
@smallexample\
(mapcar '(lambda (arg) (/ arg 50)) full-range))\
@end smallexample\
\
@xref\{Mapping Functions, , Mapping Functions, elisp, The GNU Emacs\
Lisp Reference Manual\}, for more about @code\{mapcar\}.\
\
Using the @code\{one-fiftieth\} function, we can generate a list in\
which each element is one-fiftieth the size of the corresponding\
element in @code\{list-for-graph\}.\
\
@smallexample\
@group\
(setq fiftieth-list-for-graph\
      (one-fiftieth list-for-graph))\
@end group\
@end smallexample\
\
@need 1250\
The resulting list looks like this:\
\
@smallexample\
@group\
(10 20 19 15 11 9 6 5 4 3 3 2 2\
1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 4)\
@end group\
@end smallexample\
\
@noindent\
This, we are almost ready to print!  (We also notice the loss of\
information: many of the higher ranges are 0, meaning that fewer than\
50 defuns had that many words or symbols---but not necessarily meaning\
that none had that many words or symbols.)\
\
@node Another Bug, Final printed graph, mapcar, Print Whole Graph\
@appendixsubsec Another Bug @dots\{\} Most Insidious\
@cindex Bug, most insidious type\
@cindex Insidious type of bug\
\
I said `almost ready to print'!  Of course, there is a bug in the\
@code\{print-graph\} function @dots\{\}  It has a @code\{vertical-step\}\
option, but not a @code\{horizontal-step\} option.  The\
@code\{top-of-range\} scale goes from 10 to 300 by tens.  But the\
@code\{print-graph\} function will print only by ones.\
\
This is a classic example of what some consider the most insidious\
type of bug, the bug of omission.  This is not the kind of bug you can\
find by studying the code, for it is not in the code; it is an omitted\
feature.  Your best actions are to try your program early and often;\
and try to arrange, as much as you can, to write code that is easy to\
understand and easy to change.  Try to be aware, whenever you can,\
that whatever you have written, @emph\{will\} be rewritten, if not soon,\
eventually.  A hard maxim to follow.\
\
It is the @code\{print-X-axis-numbered-line\} function that needs the\
work; and then the @code\{print-X-axis\} and the @code\{print-graph\}\
functions need to be adapted.  Not much needs to be done; there is one\
nicety: the numbers ought to line up under the tic marks.  This takes\
a little thought.\
\
@need 1250\
Here is the corrected @code\{print-X-axis-numbered-line\}:\
\
@smallexample\
@group\
(defun print-X-axis-numbered-line\
  (number-of-X-tics X-axis-leading-spaces\
   &optional horizontal-step)\
  "Print line of X-axis numbers"\
  (let ((number X-axis-label-spacing)\
        (horizontal-step (or horizontal-step 1)))\
@end group\
@group\
    (insert X-axis-leading-spaces)\
    ;; @r\{Delete extra leading spaces.\}\
    (delete-char\
     (- (1-\
         (length (number-to-string horizontal-step)))))\
    (insert (concat\
             (make-string\
@end group\
@group\
              ;; @r\{Insert white space.\}\
              (-  (* symbol-width\
                     X-axis-label-spacing)\
                  (1-\
                   (length\
                    (number-to-string horizontal-step)))\
                  2)\
              ? )\
             (number-to-string\
              (* number horizontal-step))))\
@end group\
@group\
    ;; @r\{Insert remaining numbers.\}\
    (setq number (+ number X-axis-label-spacing))\
    (while (> number-of-X-tics 1)\
      (insert (X-axis-element\
               (* number horizontal-step)))\
      (setq number (+ number X-axis-label-spacing))\
      (setq number-of-X-tics (1- number-of-X-tics)))))\
@end group\
@end smallexample\
\
@need 1500\
If you are reading this in Info, you can see the new versions of\
@code\{print-X-axis\} @code\{print-graph\} and evaluate them.  If you are\
reading this in a printed book, you can see the changed lines here\
(the full text is too much to print).\
\
@iftex\
@smallexample\
@group\
(defun print-X-axis (numbers-list horizontal-step)\
  @dots\{\}\
    (print-X-axis-numbered-line\
     tic-number leading-spaces horizontal-step))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun print-graph\
  (numbers-list\
   &optional vertical-step horizontal-step)\
  @dots\{\}\
    (print-X-axis numbers-list horizontal-step))\
@end group\
@end smallexample\
@end iftex\
\
@ifnottex\
@smallexample\
@group\
(defun print-X-axis (numbers-list horizontal-step)\
  "Print X axis labels to length of NUMBERS-LIST.\
Optionally, HORIZONTAL-STEP, a positive integer,\
specifies how much an X  axis label increments for\
each column."\
@end group\
@group\
;; Value of symbol-width and full-Y-label-width\
;; are passed by `print-graph'.\
  (let* ((leading-spaces\
          (make-string full-Y-label-width ? ))\
       ;; symbol-width @r\{is provided by\} graph-body-print\
       (tic-width (* symbol-width X-axis-label-spacing))\
       (X-length (length numbers-list))\
@end group\
@group\
       (X-tic\
        (concat\
         (make-string\
          ;; @r\{Make a string of blanks.\}\
          (-  (* symbol-width X-axis-label-spacing)\
              (length X-axis-tic-symbol))\
          ? )\
@end group\
@group\
         ;; @r\{Concatenate blanks with tic symbol.\}\
         X-axis-tic-symbol))\
       (tic-number\
        (if (zerop (% X-length tic-width))\
            (/ X-length tic-width)\
          (1+ (/ X-length tic-width)))))\
@end group\
\
@group\
    (print-X-axis-tic-line\
     tic-number leading-spaces X-tic)\
    (insert "\\n")\
    (print-X-axis-numbered-line\
     tic-number leading-spaces horizontal-step)))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun print-graph\
  (numbers-list &optional vertical-step horizontal-step)\
  "Print labelled bar graph of the NUMBERS-LIST.\
The numbers-list consists of the Y-axis values.\
@end group\
\
@group\
Optionally, VERTICAL-STEP, a positive integer,\
specifies how much a Y axis label increments for\
each line.  For example, a step of 5 means that\
each row is five units.\
@end group\
\
@group\
Optionally, HORIZONTAL-STEP, a positive integer,\
specifies how much an X  axis label increments for\
each column."\
  (let* ((symbol-width (length graph-blank))\
         ;; @code\{height\} @r\{is both the largest number\}\
         ;; @r\{and the number with the most digits.\}\
         (height (apply 'max numbers-list))\
@end group\
@group\
         (height-of-top-line\
          (if (zerop (% height Y-axis-label-spacing))\
              height\
            ;; @r\{else\}\
            (* (1+ (/ height Y-axis-label-spacing))\
               Y-axis-label-spacing)))\
@end group\
@group\
         (vertical-step (or vertical-step 1))\
         (full-Y-label-width\
          (length\
           (concat\
            (number-to-string\
             (* height-of-top-line vertical-step))\
            Y-axis-tic))))\
@end group\
@group\
    (print-Y-axis\
     height-of-top-line full-Y-label-width vertical-step)\
    (graph-body-print\
        numbers-list height-of-top-line symbol-width)\
    (print-X-axis numbers-list horizontal-step)))\
@end group\
@end smallexample\
@end ifnottex\
\
@c qqq\
@ignore\
Graphing Definitions Re-listed\
\
@need 1250\
Here are all the graphing definitions in their final form:\
\
@smallexample\
@group\
(defvar top-of-ranges\
 '(10  20  30  40  50\
   60  70  80  90 100\
  110 120 130 140 150\
  160 170 180 190 200\
  210 220 230 240 250)\
 "List specifying ranges for `defuns-per-range'.")\
@end group\
\
@group\
(defvar graph-symbol "*"\
  "String used as symbol in graph, usually an asterisk.")\
@end group\
\
@group\
(defvar graph-blank " "\
  "String used as blank in graph, usually a blank space.\
graph-blank must be the same number of columns wide\
as graph-symbol.")\
@end group\
\
@group\
(defvar Y-axis-tic " - "\
   "String that follows number in a Y axis label.")\
@end group\
\
@group\
(defvar Y-axis-label-spacing 5\
  "Number of lines from one Y axis label to next.")\
@end group\
\
@group\
(defvar X-axis-tic-symbol "|"\
  "String to insert to point to a column in X axis.")\
@end group\
\
@group\
(defvar X-axis-label-spacing\
  (if (boundp 'graph-blank)\
      (* 5 (length graph-blank)) 5)\
  "Number of units from one X axis label to next.")\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun count-words-in-defun ()\
  "Return the number of words and symbols in a defun."\
  (beginning-of-defun)\
  (let ((count 0)\
        (end (save-excursion (end-of-defun) (point))))\
@end group\
\
@group\
    (while\
        (and (< (point) end)\
             (re-search-forward\
              "\\\\(\\\\w\\\\|\\\\s_\\\\)+[^ \\t\\n]*[ \\t\\n]*"\
              end t))\
      (setq count (1+ count)))\
    count))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun lengths-list-file (filename)\
  "Return list of definitions' lengths within FILE.\
The returned list is a list of numbers.\
Each number is the number of words or\
symbols in one function definition."\
@end group\
\
@group\
  (message "Working on `%s' ... " filename)\
  (save-excursion\
    (let ((buffer (find-file-noselect filename))\
          (lengths-list))\
      (set-buffer buffer)\
      (setq buffer-read-only t)\
      (widen)\
      (goto-char (point-min))\
@end group\
\
@group\
      (while (re-search-forward "^(defun" nil t)\
        (setq lengths-list\
              (cons (count-words-in-defun) lengths-list)))\
      (kill-buffer buffer)\
      lengths-list)))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun lengths-list-many-files (list-of-files)\
  "Return list of lengths of defuns in LIST-OF-FILES."\
  (let (lengths-list)\
;;; @r\{true-or-false-test\}\
    (while list-of-files\
      (setq lengths-list\
            (append\
             lengths-list\
@end group\
@group\
;;; @r\{Generate a lengths' list.\}\
             (lengths-list-file\
              (expand-file-name (car list-of-files)))))\
;;; @r\{Make files' list shorter.\}\
      (setq list-of-files (cdr list-of-files)))\
;;; @r\{Return final value of lengths' list.\}\
    lengths-list))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun defuns-per-range (sorted-lengths top-of-ranges)\
  "SORTED-LENGTHS defuns in each TOP-OF-RANGES range."\
  (let ((top-of-range (car top-of-ranges))\
        (number-within-range 0)\
        defuns-per-range-list)\
@end group\
\
@group\
    ;; @r\{Outer loop.\}\
    (while top-of-ranges\
\
      ;; @r\{Inner loop.\}\
      (while (and\
              ;; @r\{Need number for numeric test.\}\
              (car sorted-lengths)\
              (< (car sorted-lengths) top-of-range))\
\
        ;; @r\{Count number of definitions within current range.\}\
        (setq number-within-range (1+ number-within-range))\
        (setq sorted-lengths (cdr sorted-lengths)))\
@end group\
\
@group\
      ;; @r\{Exit inner loop but remain within outer loop.\}\
\
      (setq defuns-per-range-list\
            (cons number-within-range defuns-per-range-list))\
      (setq number-within-range 0)      ; @r\{Reset count to zero.\}\
\
      ;; @r\{Move to next range.\}\
      (setq top-of-ranges (cdr top-of-ranges))\
      ;; @r\{Specify next top of range value.\}\
      (setq top-of-range (car top-of-ranges)))\
@end group\
\
@group\
    ;; @r\{Exit outer loop and count the number of defuns larger than\}\
    ;; @r\{  the largest top-of-range value.\}\
    (setq defuns-per-range-list\
          (cons\
           (length sorted-lengths)\
           defuns-per-range-list))\
\
    ;; @r\{Return a list of the number of definitions within each range,\}\
    ;; @r\{  smallest to largest.\}\
    (nreverse defuns-per-range-list)))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun column-of-graph (max-graph-height actual-height)\
  "Return list of MAX-GRAPH-HEIGHT strings;\
ACTUAL-HEIGHT are graph-symbols.\
The graph-symbols are contiguous entries at the end\
of the list.\
The list will be inserted as one column of a graph.\
The strings are either graph-blank or graph-symbol."\
@end group\
\
@group\
  (let ((insert-list nil)\
        (number-of-top-blanks\
         (- max-graph-height actual-height)))\
\
    ;; @r\{Fill in @code\{graph-symbols\}.\}\
    (while (> actual-height 0)\
      (setq insert-list (cons graph-symbol insert-list))\
      (setq actual-height (1- actual-height)))\
@end group\
\
@group\
    ;; @r\{Fill in @code\{graph-blanks\}.\}\
    (while (> number-of-top-blanks 0)\
      (setq insert-list (cons graph-blank insert-list))\
      (setq number-of-top-blanks\
            (1- number-of-top-blanks)))\
\
    ;; @r\{Return whole list.\}\
    insert-list))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun Y-axis-element (number full-Y-label-width)\
  "Construct a NUMBERed label element.\
A numbered element looks like this `  5 - ',\
and is padded as needed so all line up with\
the element for the largest number."\
@end group\
@group\
  (let* ((leading-spaces\
         (- full-Y-label-width\
            (length\
             (concat (number-to-string number)\
                     Y-axis-tic)))))\
@end group\
@group\
    (concat\
     (make-string leading-spaces ? )\
     (number-to-string number)\
     Y-axis-tic)))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun print-Y-axis\
  (height full-Y-label-width &optional vertical-step)\
  "Insert Y axis by HEIGHT and FULL-Y-LABEL-WIDTH.\
Height must be the  maximum height of the graph.\
Full width is the width of the highest label element.\
Optionally, print according to VERTICAL-STEP."\
@end group\
@group\
;; Value of height and full-Y-label-width\
;; are passed by `print-graph'.\
  (let ((start (point)))\
    (insert-rectangle\
     (Y-axis-column height full-Y-label-width vertical-step))\
@end group\
@group\
    ;; @r\{Place point ready for inserting graph.\}\
    (goto-char start)\
    ;; @r\{Move point forward by value of\} full-Y-label-width\
    (forward-char full-Y-label-width)))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun print-X-axis-tic-line\
  (number-of-X-tics X-axis-leading-spaces X-axis-tic-element)\
  "Print ticks for X axis."\
    (insert X-axis-leading-spaces)\
    (insert X-axis-tic-symbol)  ; @r\{Under first column.\}\
@end group\
@group\
    ;; @r\{Insert second tic in the right spot.\}\
    (insert (concat\
             (make-string\
              (-  (* symbol-width X-axis-label-spacing)\
                  ;; @r\{Insert white space up to second tic symbol.\}\
                  (* 2 (length X-axis-tic-symbol)))\
              ? )\
             X-axis-tic-symbol))\
@end group\
@group\
    ;; @r\{Insert remaining ticks.\}\
    (while (> number-of-X-tics 1)\
      (insert X-axis-tic-element)\
      (setq number-of-X-tics (1- number-of-X-tics))))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun X-axis-element (number)\
  "Construct a numbered X axis element."\
  (let ((leading-spaces\
         (-  (* symbol-width X-axis-label-spacing)\
             (length (number-to-string number)))))\
    (concat (make-string leading-spaces ? )\
            (number-to-string number))))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun graph-body-print (numbers-list height symbol-width)\
  "Print a bar graph of the NUMBERS-LIST.\
The numbers-list consists of the Y-axis values.\
HEIGHT is maximum height of graph.\
SYMBOL-WIDTH is number of each column."\
@end group\
@group\
  (let (from-position)\
    (while numbers-list\
      (setq from-position (point))\
      (insert-rectangle\
       (column-of-graph height (car numbers-list)))\
      (goto-char from-position)\
      (forward-char symbol-width)\
@end group\
@group\
      ;; @r\{Draw graph column by column.\}\
      (sit-for 0)\
      (setq numbers-list (cdr numbers-list)))\
    ;; @r\{Place point for X axis labels.\}\
    (forward-line height)\
    (insert "\\n")))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun Y-axis-column\
  (height width-of-label &optional vertical-step)\
  "Construct list of labels for Y axis.\
HEIGHT is maximum height of graph.\
WIDTH-OF-LABEL is maximum width of label.\
@end group\
@group\
VERTICAL-STEP, an option, is a positive integer\
that specifies how much a Y axis label increments\
for each line.  For example, a step of 5 means\
that each line is five units of the graph."\
  (let (Y-axis\
        (number-per-line (or vertical-step 1)))\
@end group\
@group\
    (while (> height 1)\
      (if (zerop (% height Y-axis-label-spacing))\
          ;; @r\{Insert label.\}\
          (setq Y-axis\
                (cons\
                 (Y-axis-element\
                  (* height number-per-line)\
                  width-of-label)\
                 Y-axis))\
@end group\
@group\
        ;; @r\{Else, insert blanks.\}\
        (setq Y-axis\
              (cons\
               (make-string width-of-label ? )\
               Y-axis)))\
      (setq height (1- height)))\
@end group\
@group\
    ;; @r\{Insert base line.\}\
    (setq Y-axis (cons (Y-axis-element\
                        (or vertical-step 1)\
                        width-of-label)\
                       Y-axis))\
    (nreverse Y-axis)))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun print-X-axis-numbered-line\
  (number-of-X-tics X-axis-leading-spaces\
   &optional horizontal-step)\
  "Print line of X-axis numbers"\
  (let ((number X-axis-label-spacing)\
        (horizontal-step (or horizontal-step 1)))\
@end group\
@group\
    (insert X-axis-leading-spaces)\
    ;; line up number\
    (delete-char (- (1- (length (number-to-string horizontal-step)))))\
    (insert (concat\
             (make-string\
              ;; @r\{Insert white space up to next number.\}\
              (-  (* symbol-width X-axis-label-spacing)\
                  (1- (length (number-to-string horizontal-step)))\
                  2)\
              ? )\
             (number-to-string (* number horizontal-step))))\
@end group\
@group\
    ;; @r\{Insert remaining numbers.\}\
    (setq number (+ number X-axis-label-spacing))\
    (while (> number-of-X-tics 1)\
      (insert (X-axis-element (* number horizontal-step)))\
      (setq number (+ number X-axis-label-spacing))\
      (setq number-of-X-tics (1- number-of-X-tics)))))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun print-X-axis (numbers-list horizontal-step)\
  "Print X axis labels to length of NUMBERS-LIST.\
Optionally, HORIZONTAL-STEP, a positive integer,\
specifies how much an X  axis label increments for\
each column."\
@end group\
@group\
;; Value of symbol-width and full-Y-label-width\
;; are passed by `print-graph'.\
  (let* ((leading-spaces\
          (make-string full-Y-label-width ? ))\
       ;; symbol-width @r\{is provided by\} graph-body-print\
       (tic-width (* symbol-width X-axis-label-spacing))\
       (X-length (length numbers-list))\
@end group\
@group\
       (X-tic\
        (concat\
         (make-string\
          ;; @r\{Make a string of blanks.\}\
          (-  (* symbol-width X-axis-label-spacing)\
              (length X-axis-tic-symbol))\
          ? )\
@end group\
@group\
         ;; @r\{Concatenate blanks with tic symbol.\}\
         X-axis-tic-symbol))\
       (tic-number\
        (if (zerop (% X-length tic-width))\
            (/ X-length tic-width)\
          (1+ (/ X-length tic-width)))))\
@end group\
\
@group\
    (print-X-axis-tic-line\
     tic-number leading-spaces X-tic)\
    (insert "\\n")\
    (print-X-axis-numbered-line\
     tic-number leading-spaces horizontal-step)))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun one-fiftieth (full-range)\
  "Return list, each number of which is 1/50th previous."\
 (mapcar '(lambda (arg) (/ arg 50)) full-range))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun print-graph\
  (numbers-list &optional vertical-step horizontal-step)\
  "Print labelled bar graph of the NUMBERS-LIST.\
The numbers-list consists of the Y-axis values.\
@end group\
\
@group\
Optionally, VERTICAL-STEP, a positive integer,\
specifies how much a Y axis label increments for\
each line.  For example, a step of 5 means that\
each row is five units.\
@end group\
\
@group\
Optionally, HORIZONTAL-STEP, a positive integer,\
specifies how much an X  axis label increments for\
each column."\
  (let* ((symbol-width (length graph-blank))\
         ;; @code\{height\} @r\{is both the largest number\}\
         ;; @r\{and the number with the most digits.\}\
         (height (apply 'max numbers-list))\
@end group\
@group\
         (height-of-top-line\
          (if (zerop (% height Y-axis-label-spacing))\
              height\
            ;; @r\{else\}\
            (* (1+ (/ height Y-axis-label-spacing))\
               Y-axis-label-spacing)))\
@end group\
@group\
         (vertical-step (or vertical-step 1))\
         (full-Y-label-width\
          (length\
           (concat\
            (number-to-string\
             (* height-of-top-line vertical-step))\
            Y-axis-tic))))\
@end group\
@group\
\
    (print-Y-axis\
     height-of-top-line full-Y-label-width vertical-step)\
    (graph-body-print\
        numbers-list height-of-top-line symbol-width)\
    (print-X-axis numbers-list horizontal-step)))\
@end group\
@end smallexample\
@c qqq\
@end ignore\
\
@page\
@node Final printed graph,  , Another Bug, Print Whole Graph\
@appendixsubsec The Printed Graph\
\
When made and installed, you can call the @code\{print-graph\} command\
like this:\
@sp 1\
\
@smallexample\
@group\
(print-graph fiftieth-list-for-graph 50 10)\
@end group\
@end smallexample\
@sp 1\
\
@noindent\
Here is the graph:\
@sp 2\
\
@smallexample\
@group\
1000 -  *\
        **\
        **\
        **\
        **\
 750 -  ***\
        ***\
        ***\
        ***\
        ****\
 500 - *****\
       ******\
       ******\
       ******\
       *******\
 250 - ********\
       *********                     *\
       ***********                   *\
       *************                 *\
  50 - ***************** *           *\
       |   |    |    |    |    |    |    |\
      10  50  100  150  200  250  300  350\
@end group\
@end smallexample\
\
@sp 2\
\
@noindent\
The largest group of functions contain 10 -- 19 words and symbols each.}