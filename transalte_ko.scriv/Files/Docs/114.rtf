{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node defcustom, Beginning a .emacs File, Site-wide Init, Emacs Initialization\
@section Specifying Variables using @code\{defcustom\}\
@findex defcustom\
\
You can specify variables using @code\{defcustom\} so that you and\
others can then use Emacs' @code\{customize\} feature to set their\
values.  (You cannot use @code\{customize\} to write function\
definitions; but you can write @code\{defuns\} in your @file\{.emacs\}\
file.  Indeed, you can write any Lisp expression in your @file\{.emacs\}\
file.)\
\
The @code\{customize\} feature depends on the @code\{defcustom\} special\
form.  Although you can use @code\{defvar\} or @code\{setq\} for variables\
that users set, the @code\{defcustom\} special form is designed for the\
job.\
\
You can use your knowledge of @code\{defvar\} for writing the\
first three arguments for @code\{defcustom\}.  The first argument to\
@code\{defcustom\} is the name of the variable.  The second argument is\
the variable's initial value, if any; and this value is set only if\
the value has not already been set.  The third argument is the\
documentation.\
\
The fourth and subsequent arguments to @code\{defcustom\} specify types\
and options; these are not featured in @code\{defvar\}.  (These\
arguments are optional.)\
\
Each of these arguments consists of a keyword followed by a value.\
Each keyword starts with the colon character @samp\{:\}.\
\
@need 1250\
For example, the customizable user option variable\
@code\{text-mode-hook\} looks like this:\
\
@smallexample\
@group\
(defcustom text-mode-hook nil\
  "Normal hook run when entering Text mode and many related modes."\
  :type 'hook\
  :options '(turn-on-auto-fill flyspell-mode)\
  :group 'data)\
@end group\
@end smallexample\
\
@noindent\
The name of the variable is @code\{text-mode-hook\}; it has no default\
value; and its documentation string tells you what it does.\
\
The @code\{:type\} keyword tells Emacs the kind of data to which\
@code\{text-mode-hook\} should be set and how to display the value in a\
Customization buffer.\
\
The @code\{:options\} keyword specifies a suggested list of values for\
the variable.  Usually, @code\{:options\} applies to a hook.\
The list is only a suggestion; it is not exclusive; a person who sets\
the variable may set it to other values; the list shown following the\
@code\{:options\} keyword is intended to offer convenient choices to a\
user.\
\
Finally, the @code\{:group\} keyword tells the Emacs Customization\
command in which group the variable is located.  This tells where to\
find it.\
\
The @code\{defcustom\} function recognizes more than a dozen keywords.\
For more information, see @ref\{Customization, , Writing Customization\
Definitions, elisp, The GNU Emacs Lisp Reference Manual\}.\
\
Consider @code\{text-mode-hook\} as an example.\
\
There are two ways to customize this variable.  You can use the\
customization command or write the appropriate expressions yourself.\
\
@need 800\
Using the customization command,  you can type:\
\
@smallexample\
M-x customize\
@end smallexample\
\
@noindent\
and find that the group for editing files of data is called `data'.\
Enter that group.  Text Mode Hook is the first member.  You can click\
on its various options, such as @code\{turn-on-auto-fill\}, to set the\
values.  After you click on the button to\
\
@smallexample\
Save for Future Sessions\
@end smallexample\
\
@noindent\
Emacs will write an expression into your @file\{.emacs\} file.\
It will look like this:\
\
@smallexample\
@group\
(custom-set-variables\
  ;; custom-set-variables was added by Custom.\
  ;; If you edit it by hand, you could mess it up, so be careful.\
  ;; Your init file should contain only one such instance.\
  ;; If there is more than one, they won't work right.\
 '(text-mode-hook (quote (turn-on-auto-fill text-mode-hook-identify))))\
@end group\
@end smallexample\
\
@noindent\
(The @code\{text-mode-hook-identify\} function tells\
@code\{toggle-text-mode-auto-fill\} which buffers are in Text mode.\
It comes on automatically.)\
\
The @code\{custom-set-variables\} function works somewhat differently\
than a @code\{setq\}.  While I have never learned the differences, I\
modify the @code\{custom-set-variables\} expressions in my @file\{.emacs\}\
file by hand:  I make the changes in what appears to me to be a\
reasonable manner and have not had any problems.  Others prefer to use\
the Customization command and let Emacs do the work for them.\
\
Another @code\{custom-set-@dots\{\}\} function is @code\{custom-set-faces\}.\
This function sets the various font faces.  Over time, I have set a\
considerable number of faces.  Some of the time, I re-set them using\
@code\{customize\}; other times, I simply edit the\
@code\{custom-set-faces\} expression in my @file\{.emacs\} file itself.\
\
The second way to customize your @code\{text-mode-hook\} is to set it\
yourself in your @file\{.emacs\} file using code that has nothing to do\
with the @code\{custom-set-@dots\{\}\} functions.\
\
@need 800\
When you do this, and later use @code\{customize\}, you will see a\
message that says\
\
@smallexample\
CHANGED outside Customize; operating on it here may be unreliable.\
@end smallexample\
\
@need 800\
This message is only a warning.  If you click on the button to\
\
@smallexample\
Save for Future Sessions\
@end smallexample\
\
@noindent\
Emacs will write a @code\{custom-set-@dots\{\}\} expression near the end\
of your @file\{.emacs\} file that will be evaluated after your\
hand-written expression.  It will, therefore, overrule your\
hand-written expression.  No harm will be done.  When you do this,\
however, be careful to remember which expression is active; if you\
forget, you may confuse yourself.\
\
So long as you remember where the values are set, you will have no\
trouble.  In any event, the values are always set in your\
initialization file, which is usually called @file\{.emacs\}.\
\
I myself use @code\{customize\} for hardly anything.  Mostly, I write\
expressions myself.\
\
@findex defsubst\
@findex defconst\
Incidentally, to be more complete concerning defines:  @code\{defsubst\}\
defines an inline function.  The syntax is just like that of\
@code\{defun\}.  @code\{defconst\} defines a symbol as a constant.  The\
intent is that neither programs nor users should ever change a value\
set by @code\{defconst\}.  (You can change it; the value set is a\
variable; but please do not.)}