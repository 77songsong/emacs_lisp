{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node edebug, Debugging Exercises, debug-on-quit, Debugging\
@section The @code\{edebug\} Source Level Debugger\
@cindex Source level debugger\
@findex edebug\
\
Edebug is a source level debugger.  Edebug normally displays the\
source of the code you are debugging, with an arrow at the left that\
shows which line you are currently executing.\
\
You can walk through the execution of a function, line by line, or run\
quickly until reaching a @dfn\{breakpoint\} where execution stops.\
\
Edebug is described in @ref\{edebug, , Edebug, elisp, The GNU Emacs\
Lisp Reference Manual\}.\
\
@need 1250\
Here is a bugged function definition for @code\{triangle-recursively\}.\
@xref\{Recursive triangle function, , Recursion in place of a counter\},\
for a review of it.\
\
@smallexample\
@group\
(defun triangle-recursively-bugged (number)\
  "Return sum of numbers 1 through NUMBER inclusive.\
Uses recursion."\
  (if (= number 1)\
      1\
    (+ number\
       (triangle-recursively-bugged\
        (1= number)))))               ; @r\{Error here.\}\
@end group\
@end smallexample\
\
@noindent\
Normally, you would install this definition by positioning your cursor\
after the function's closing parenthesis and typing @kbd\{C-x C-e\}\
(@code\{eval-last-sexp\}) or else by positioning your cursor within the\
definition and typing @kbd\{C-M-x\} (@code\{eval-defun\}).  (By default,\
the @code\{eval-defun\} command works only in Emacs Lisp mode or in Lisp\
Interaction mode.)\
\
@need 1500\
However, to prepare this function definition for Edebug, you must\
first @dfn\{instrument\} the code using a different command.  You can do\
this by positioning your cursor within or just after the definition\
and typing\
\
@smallexample\
M-x edebug-defun RET\
@end smallexample\
\
@noindent\
This will cause Emacs to load Edebug automatically if it is not\
already loaded, and properly instrument the function.\
\
After instrumenting the function, place your cursor after the\
following expression and type @kbd\{C-x C-e\} (@code\{eval-last-sexp\}):\
\
@smallexample\
(triangle-recursively-bugged 3)\
@end smallexample\
\
@noindent\
You will be jumped back to the source for\
@code\{triangle-recursively-bugged\} and the cursor positioned at the\
beginning of the @code\{if\} line of the function.  Also, you will see\
an arrowhead at the left hand side of that line.  The arrowhead marks\
the line where the function is executing.  (In the following examples,\
we show the arrowhead with @samp\{=>\}; in a windowing system, you may\
see the arrowhead as a solid triangle in the window `fringe'.)\
\
@smallexample\
=>@point\{\}(if (= number 1)\
@end smallexample\
\
@noindent\
@iftex\
In the example, the location of point is displayed with a star,\
@samp\{@point\{\}\} (in Info, it is displayed as @samp\{-!-\}).\
@end iftex\
@ifnottex\
In the example, the location of point is displayed as @samp\{@point\{\}\}\
(in a printed book, it is displayed with a five pointed star).\
@end ifnottex\
\
If you now press @key\{SPC\}, point will move to the next expression to\
be executed; the line will look like this:\
\
@smallexample\
=>(if @point\{\}(= number 1)\
@end smallexample\
\
@noindent\
As you continue to press @key\{SPC\}, point will move from expression to\
expression.  At the same time, whenever an expression returns a value,\
that value will be displayed in the echo area.  For example, after you\
move point past @code\{number\}, you will see the following:\
\
@smallexample\
Result: 3 (#o3, #x3, ?\\C-c)\
@end smallexample\
\
@noindent\
This means the value of @code\{number\} is 3, which is octal three,\
hexadecimal three, and @sc\{ascii\} `control-c' (the third letter of the\
alphabet, in case you need to know this information).\
\
You can continue moving through the code until you reach the line with\
the error.  Before evaluation, that line looks like this:\
\
@smallexample\
=>        @point\{\}(1= number)))))               ; @r\{Error here.\}\
@end smallexample\
\
@need 1250\
@noindent\
When you press @key\{SPC\} once again, you will produce an error message\
that says:\
\
@smallexample\
Symbol's function definition is void:@: 1=\
@end smallexample\
\
@noindent\
This is the bug.\
\
Press @kbd\{q\} to quit Edebug.\
\
To remove instrumentation from a function definition, simply\
re-evaluate it with a command that does not instrument it.\
For example, you could place your cursor after the definition's\
closing parenthesis and type @kbd\{C-x C-e\}.\
\
Edebug does a great deal more than walk with you through a function.\
You can set it so it races through on its own, stopping only at an\
error or at specified stopping points; you can cause it to display the\
changing values of various expressions; you can find out how many\
times a function is called, and more.\
\
Edebug is described in @ref\{edebug, , Edebug, elisp, The GNU Emacs\
Lisp Reference Manual\}.}