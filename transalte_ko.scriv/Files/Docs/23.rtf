{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node Conclusion, the-the, Debugging, Top\
@chapter Conclusion\
\
We have now reached the end of this Introduction.  You have now\
learned enough about programming in Emacs Lisp to set values, to write\
simple @file\{.emacs\} files for yourself and your friends, and write\
simple customizations and extensions to Emacs.\
\
This is a place to stop.  Or, if you wish, you can now go onward, and\
teach yourself.\
\
You have learned some of the basic nuts and bolts of programming.  But\
only some.  There are a great many more brackets and hinges that are\
easy to use that we have not touched.\
\
A path you can follow right now lies among the sources to GNU Emacs\
and in\
@ifnotinfo\
@cite\{The GNU Emacs Lisp Reference Manual\}.\
@end ifnotinfo\
@ifinfo\
@ref\{Top, , The GNU Emacs Lisp Reference Manual, elisp, The GNU\
Emacs Lisp Reference Manual\}.\
@end ifinfo\
\
The Emacs Lisp sources are an adventure.  When you read the sources and\
come across a function or expression that is unfamiliar, you need to\
figure out or find out what it does.\
\
Go to the Reference Manual.  It is a thorough, complete, and fairly\
easy-to-read description of Emacs Lisp.  It is written not only for\
experts, but for people who know what you know.  (The @cite\{Reference\
Manual\} comes with the standard GNU Emacs distribution.  Like this\
introduction, it comes as a Texinfo source file, so you can read it\
on-line and as a typeset, printed book.)\
\
Go to the other on-line help that is part of GNU Emacs: the on-line\
documentation for all functions and variables, and @code\{find-tag\},\
the program that takes you to sources.\
\
Here is an example of how I explore the sources.  Because of its name,\
@file\{simple.el\} is the file I looked at first, a long time ago.  As\
it happens some of the functions in @file\{simple.el\} are complicated,\
or at least look complicated at first sight.  The @code\{open-line\}\
function, for example, looks complicated.\
\
You may want to walk through this function slowly, as we did with the\
@code\{forward-sentence\} function.  (@xref\{forward-sentence, The\
@code\{forward-sentence\} function\}.)  Or you may want to skip that\
function and look at another, such as @code\{split-line\}.  You don't\
need to read all the functions.  According to\
@code\{count-words-in-defun\}, the @code\{split-line\} function contains\
102 words and symbols.\
\
Even though it is short, @code\{split-line\} contains  expressions\
we have not studied: @code\{skip-chars-forward\}, @code\{indent-to\},\
@code\{current-column\} and @code\{insert-and-inherit\}.\
\
Consider the @code\{skip-chars-forward\} function.  (It is part of the\
function definition for @code\{back-to-indentation\}, which is shown in\
@ref\{Review, , Review\}.)\
\
In GNU Emacs, you can find out more about @code\{skip-chars-forward\} by\
typing @kbd\{C-h f\} (@code\{describe-function\}) and the name of the\
function.  This gives you the function documentation.\
\
You may be able to guess what is done by a well named function such as\
@code\{indent-to\}; or you can look it up, too.  Incidentally, the\
@code\{describe-function\} function itself is in @file\{help.el\}; it is\
one of those long, but decipherable functions.  You can look up\
@code\{describe-function\} using the @kbd\{C-h f\} command!\
\
In this instance, since the code is Lisp, the @file\{*Help*\} buffer\
contains the name of the library containing the function's source.\
You can put point over the name of the library and press the RET key,\
which in this situation is bound to @code\{help-follow\}, and be taken\
directly to the source, in the same way as @kbd\{M-.\}\
(@code\{find-tag\}).\
\
The definition for @code\{describe-function\} illustrates how to\
customize the @code\{interactive\} expression without using the standard\
character codes; and it shows how to create a temporary buffer.\
\
(The @code\{indent-to\} function is written in C rather than Emacs Lisp;\
it is a `built-in' function.  @code\{help-follow\} takes you to its\
source as does @code\{find-tag\}, when properly set up.)\
\
You can look at a function's source using @code\{find-tag\}, which is\
bound to @kbd\{M-.\}  Finally, you can find out what the Reference\
Manual has to say by visiting the manual in Info, and typing @kbd\{i\}\
(@code\{Info-index\}) and the name of the function, or by looking up the\
function in the index to a printed copy of the manual.\
\
Similarly, you can find out what is meant by\
@code\{insert-and-inherit\}.\
\
Other interesting source files include @file\{paragraphs.el\},\
@file\{loaddefs.el\}, and @file\{loadup.el\}.  The @file\{paragraphs.el\}\
file includes short, easily understood functions as well as longer\
ones.  The @file\{loaddefs.el\} file contains the many standard\
autoloads and many keymaps.  I have never looked at it all; only at\
parts.  @file\{loadup.el\} is the file that loads the standard parts of\
Emacs; it tells you a great deal about how Emacs is built.\
(@xref\{Building Emacs, , Building Emacs, elisp, The GNU Emacs Lisp\
Reference Manual\}, for more about building.)\
\
As I said, you have learned some nuts and bolts; however, and very\
importantly, we have hardly touched major aspects of programming; I\
have said nothing about how to sort information, except to use the\
predefined @code\{sort\} function; I have said nothing about how to store\
information, except to use variables and lists; I have said nothing\
about how to write programs that write programs.  These are topics for\
another, and different kind of book, a different kind of learning.\
\
What you have done is learn enough for much practical work with GNU\
Emacs.  What you have done is get started.  This is the end of a\
beginning.\
\
@c ================ Appendix ================\
\
@node the-the, Kill Ring, Conclusion, Top\
@appendix The @code\{the-the\} Function\
@findex the-the\
@cindex Duplicated words function\
@cindex Words, duplicated\
\
Sometimes when you you write text, you duplicate words---as with ``you\
you'' near the beginning of this sentence.  I find that most\
frequently, I duplicate ``the''; hence, I call the function for\
detecting duplicated words, @code\{the-the\}.\
\
@need 1250\
As a first step, you could use the following regular expression to\
search for duplicates:\
\
@smallexample\
\\\\(\\\\w+[ \\t\\n]+\\\\)\\\\1\
@end smallexample\
\
@noindent\
This regexp matches one or more word-constituent characters followed\
by one or more spaces, tabs, or newlines.  However, it does not detect\
duplicated words on different lines, since the ending of the first\
word, the end of the line, is different from the ending of the second\
word, a space.  (For more information about regular expressions, see\
@ref\{Regexp Search, , Regular Expression Searches\}, as well as\
@ref\{Regexps, , Syntax of Regular Expressions, emacs, The GNU Emacs\
Manual\}, and @ref\{Regular Expressions, , Regular Expressions, elisp,\
The GNU Emacs Lisp Reference Manual\}.)\
\
You might try searching just for duplicated word-constituent\
characters but that does not work since the pattern detects doubles\
such as the two occurrences of `th' in `with the'.\
\
Another possible regexp searches for word-constituent characters\
followed by non-word-constituent characters, reduplicated.  Here,\
@w\{@samp\{\\\\w+\}\} matches one or more word-constituent characters and\
@w\{@samp\{\\\\W*\}\} matches zero or more non-word-constituent characters.\
\
@smallexample\
\\\\(\\\\(\\\\w+\\\\)\\\\W*\\\\)\\\\1\
@end smallexample\
\
@noindent\
Again, not useful.\
\
Here is the pattern that I use.  It is not perfect, but good enough.\
@w\{@samp\{\\\\b\}\} matches the empty string, provided it is at the beginning\
or end of a word; @w\{@samp\{[^@@ \\n\\t]+\}\} matches one or more occurrences of\
any characters that are @emph\{not\} an @@-sign, space, newline, or tab.\
\
@smallexample\
\\\\b\\\\([^@@ \\n\\t]+\\\\)[ \\n\\t]+\\\\1\\\\b\
@end smallexample\
\
One can write more complicated expressions, but I found that this\
expression is good enough, so I use it.\
\
Here is the @code\{the-the\} function, as I include it in my\
@file\{.emacs\} file, along with a handy global key binding:\
\
@smallexample\
@group\
(defun the-the ()\
  "Search forward for for a duplicated word."\
  (interactive)\
  (message "Searching for for duplicated words ...")\
  (push-mark)\
@end group\
@group\
  ;; This regexp is not perfect\
  ;; but is fairly good over all:\
  (if (re-search-forward\
       "\\\\b\\\\([^@@ \\n\\t]+\\\\)[ \\n\\t]+\\\\1\\\\b" nil 'move)\
      (message "Found duplicated word.")\
    (message "End of buffer")))\
@end group\
\
@group\
;; Bind `the-the' to  C-c \\\
(global-set-key "\\C-c\\\\" 'the-the)\
@end group\
@end smallexample\
\
@sp 1\
Here is test text:\
\
@smallexample\
@group\
one two two three four five\
five six seven\
@end group\
@end smallexample\
\
You can substitute the other regular expressions shown above in the\
function definition and try each of them on this list.}