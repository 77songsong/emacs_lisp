{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node Conclusion, the-the, Debugging, Top\
@chapter Conclusion\
\
We have now reached the end of this Introduction.  You have now\
learned enough about programming in Emacs Lisp to set values, to write\
simple @file\{.emacs\} files for yourself and your friends, and write\
simple customizations and extensions to Emacs.\
\
This is a place to stop.  Or, if you wish, you can now go onward, and\
teach yourself.\
\
You have learned some of the basic nuts and bolts of programming.  But\
only some.  There are a great many more brackets and hinges that are\
easy to use that we have not touched.\
\
A path you can follow right now lies among the sources to GNU Emacs\
and in\
@ifnotinfo\
@cite\{The GNU Emacs Lisp Reference Manual\}.\
@end ifnotinfo\
@ifinfo\
@ref\{Top, , The GNU Emacs Lisp Reference Manual, elisp, The GNU\
Emacs Lisp Reference Manual\}.\
@end ifinfo\
\
The Emacs Lisp sources are an adventure.  When you read the sources and\
come across a function or expression that is unfamiliar, you need to\
figure out or find out what it does.\
\
Go to the Reference Manual.  It is a thorough, complete, and fairly\
easy-to-read description of Emacs Lisp.  It is written not only for\
experts, but for people who know what you know.  (The @cite\{Reference\
Manual\} comes with the standard GNU Emacs distribution.  Like this\
introduction, it comes as a Texinfo source file, so you can read it\
on-line and as a typeset, printed book.)\
\
Go to the other on-line help that is part of GNU Emacs: the on-line\
documentation for all functions and variables, and @code\{find-tag\},\
the program that takes you to sources.\
\
Here is an example of how I explore the sources.  Because of its name,\
@file\{simple.el\} is the file I looked at first, a long time ago.  As\
it happens some of the functions in @file\{simple.el\} are complicated,\
or at least look complicated at first sight.  The @code\{open-line\}\
function, for example, looks complicated.\
\
You may want to walk through this function slowly, as we did with the\
@code\{forward-sentence\} function.  (@xref\{forward-sentence, The\
@code\{forward-sentence\} function\}.)  Or you may want to skip that\
function and look at another, such as @code\{split-line\}.  You don't\
need to read all the functions.  According to\
@code\{count-words-in-defun\}, the @code\{split-line\} function contains\
102 words and symbols.\
\
Even though it is short, @code\{split-line\} contains  expressions\
we have not studied: @code\{skip-chars-forward\}, @code\{indent-to\},\
@code\{current-column\} and @code\{insert-and-inherit\}.\
\
Consider the @code\{skip-chars-forward\} function.  (It is part of the\
function definition for @code\{back-to-indentation\}, which is shown in\
@ref\{Review, , Review\}.)\
\
In GNU Emacs, you can find out more about @code\{skip-chars-forward\} by\
typing @kbd\{C-h f\} (@code\{describe-function\}) and the name of the\
function.  This gives you the function documentation.\
\
You may be able to guess what is done by a well named function such as\
@code\{indent-to\}; or you can look it up, too.  Incidentally, the\
@code\{describe-function\} function itself is in @file\{help.el\}; it is\
one of those long, but decipherable functions.  You can look up\
@code\{describe-function\} using the @kbd\{C-h f\} command!\
\
In this instance, since the code is Lisp, the @file\{*Help*\} buffer\
contains the name of the library containing the function's source.\
You can put point over the name of the library and press the RET key,\
which in this situation is bound to @code\{help-follow\}, and be taken\
directly to the source, in the same way as @kbd\{M-.\}\
(@code\{find-tag\}).\
\
The definition for @code\{describe-function\} illustrates how to\
customize the @code\{interactive\} expression without using the standard\
character codes; and it shows how to create a temporary buffer.\
\
(The @code\{indent-to\} function is written in C rather than Emacs Lisp;\
it is a `built-in' function.  @code\{help-follow\} takes you to its\
source as does @code\{find-tag\}, when properly set up.)\
\
You can look at a function's source using @code\{find-tag\}, which is\
bound to @kbd\{M-.\}  Finally, you can find out what the Reference\
Manual has to say by visiting the manual in Info, and typing @kbd\{i\}\
(@code\{Info-index\}) and the name of the function, or by looking up the\
function in the index to a printed copy of the manual.\
\
Similarly, you can find out what is meant by\
@code\{insert-and-inherit\}.\
\
Other interesting source files include @file\{paragraphs.el\},\
@file\{loaddefs.el\}, and @file\{loadup.el\}.  The @file\{paragraphs.el\}\
file includes short, easily understood functions as well as longer\
ones.  The @file\{loaddefs.el\} file contains the many standard\
autoloads and many keymaps.  I have never looked at it all; only at\
parts.  @file\{loadup.el\} is the file that loads the standard parts of\
Emacs; it tells you a great deal about how Emacs is built.\
(@xref\{Building Emacs, , Building Emacs, elisp, The GNU Emacs Lisp\
Reference Manual\}, for more about building.)\
\
As I said, you have learned some nuts and bolts; however, and very\
importantly, we have hardly touched major aspects of programming; I\
have said nothing about how to sort information, except to use the\
predefined @code\{sort\} function; I have said nothing about how to store\
information, except to use variables and lists; I have said nothing\
about how to write programs that write programs.  These are topics for\
another, and different kind of book, a different kind of learning.\
\
What you have done is learn enough for much practical work with GNU\
Emacs.  What you have done is get started.  This is the end of a\
beginning.\
\
@c ================ Appendix ================\
\
@node the-the, Kill Ring, Conclusion, Top\
@appendix The @code\{the-the\} Function\
@findex the-the\
@cindex Duplicated words function\
@cindex Words, duplicated\
\
Sometimes when you you write text, you duplicate words---as with ``you\
you'' near the beginning of this sentence.  I find that most\
frequently, I duplicate ``the''; hence, I call the function for\
detecting duplicated words, @code\{the-the\}.\
\
@need 1250\
As a first step, you could use the following regular expression to\
search for duplicates:\
\
@smallexample\
\\\\(\\\\w+[ \\t\\n]+\\\\)\\\\1\
@end smallexample\
\
@noindent\
This regexp matches one or more word-constituent characters followed\
by one or more spaces, tabs, or newlines.  However, it does not detect\
duplicated words on different lines, since the ending of the first\
word, the end of the line, is different from the ending of the second\
word, a space.  (For more information about regular expressions, see\
@ref\{Regexp Search, , Regular Expression Searches\}, as well as\
@ref\{Regexps, , Syntax of Regular Expressions, emacs, The GNU Emacs\
Manual\}, and @ref\{Regular Expressions, , Regular Expressions, elisp,\
The GNU Emacs Lisp Reference Manual\}.)\
\
You might try searching just for duplicated word-constituent\
characters but that does not work since the pattern detects doubles\
such as the two occurrences of `th' in `with the'.\
\
Another possible regexp searches for word-constituent characters\
followed by non-word-constituent characters, reduplicated.  Here,\
@w\{@samp\{\\\\w+\}\} matches one or more word-constituent characters and\
@w\{@samp\{\\\\W*\}\} matches zero or more non-word-constituent characters.\
\
@smallexample\
\\\\(\\\\(\\\\w+\\\\)\\\\W*\\\\)\\\\1\
@end smallexample\
\
@noindent\
Again, not useful.\
\
Here is the pattern that I use.  It is not perfect, but good enough.\
@w\{@samp\{\\\\b\}\} matches the empty string, provided it is at the beginning\
or end of a word; @w\{@samp\{[^@@ \\n\\t]+\}\} matches one or more occurrences of\
any characters that are @emph\{not\} an @@-sign, space, newline, or tab.\
\
@smallexample\
\\\\b\\\\([^@@ \\n\\t]+\\\\)[ \\n\\t]+\\\\1\\\\b\
@end smallexample\
\
One can write more complicated expressions, but I found that this\
expression is good enough, so I use it.\
\
Here is the @code\{the-the\} function, as I include it in my\
@file\{.emacs\} file, along with a handy global key binding:\
\
@smallexample\
@group\
(defun the-the ()\
  "Search forward for for a duplicated word."\
  (interactive)\
  (message "Searching for for duplicated words ...")\
  (push-mark)\
@end group\
@group\
  ;; This regexp is not perfect\
  ;; but is fairly good over all:\
  (if (re-search-forward\
       "\\\\b\\\\([^@@ \\n\\t]+\\\\)[ \\n\\t]+\\\\1\\\\b" nil 'move)\
      (message "Found duplicated word.")\
    (message "End of buffer")))\
@end group\
\
@group\
;; Bind `the-the' to  C-c \\\
(global-set-key "\\C-c\\\\" 'the-the)\
@end group\
@end smallexample\
\
@sp 1\
Here is test text:\
\
@smallexample\
@group\
one two two three four five\
five six seven\
@end group\
@end smallexample\
\
You can substitute the other regular expressions shown above in the\
function definition and try each of them on this list.\
\
@node Kill Ring, Full Graph, the-the, Top\
@appendix Handling the Kill Ring\
@cindex Kill ring handling\
@cindex Handling the kill ring\
@cindex Ring, making a list like a\
\
The kill ring is a list that is transformed into a ring by the\
workings of the @code\{current-kill\} function.  The @code\{yank\} and\
@code\{yank-pop\} commands use the @code\{current-kill\} function.\
\
This appendix describes the @code\{current-kill\} function as well as\
both the @code\{yank\} and the @code\{yank-pop\} commands, but first,\
consider the workings of the kill ring.\
\
@menu\
* What the Kill Ring Does::\
* current-kill::\
* yank::                        Paste a copy of a clipped element.\
* yank-pop::                    Insert element pointed to.\
* ring file::\
@end menu\
\
@node What the Kill Ring Does, current-kill, Kill Ring, Kill Ring\
@ifnottex\
@unnumberedsec What the Kill Ring Does\
@end ifnottex\
\
@need 1250\
The kill ring has a default maximum length of sixty items; this number\
is too large for an explanation.  Instead, set it to four.  Please\
evaluate the following:\
\
@smallexample\
@group\
(setq old-kill-ring-max kill-ring-max)\
(setq kill-ring-max 4)\
@end group\
@end smallexample\
\
@noindent\
Then, please copy each line of the following indented example into the\
kill ring.  You may kill each line with @kbd\{C-k\} or mark it and copy\
it with @kbd\{M-w\}.\
\
@noindent\
(In a read-only buffer, such as the @file\{*info*\} buffer, the kill\
command, @kbd\{C-k\} (@code\{kill-line\}), will not remove the text,\
merely copy it to the kill ring.  However, your machine may beep at\
you.  Alternatively, for silence, you may copy the region of each line\
with the @kbd\{M-w\} (@code\{kill-ring-save\}) command.  You must mark\
each line for this command to succeed, but it does not matter at which\
end you put point or mark.)\
\
@need 1250\
@noindent\
Please invoke the calls in order, so that five elements attempt to\
fill the kill ring:\
\
@smallexample\
@group\
first some text\
second piece of text\
third line\
fourth line of text\
fifth bit of text\
@end group\
@end smallexample\
\
@need 1250\
@noindent\
Then find the value of @code\{kill-ring\} by evaluating\
\
@smallexample\
kill-ring\
@end smallexample\
\
@need 800\
@noindent\
It is:\
\
@smallexample\
@group\
("fifth bit of text" "fourth line of text"\
"third line" "second piece of text")\
@end group\
@end smallexample\
\
@noindent\
The first element, @samp\{first some text\}, was dropped.\
\
@need 1250\
To return to the old value for the length of the kill ring, evaluate:\
\
@smallexample\
(setq kill-ring-max old-kill-ring-max)\
@end smallexample\
\
@node current-kill, yank, What the Kill Ring Does, Kill Ring\
@comment  node-name,  next,  previous,  up\
@appendixsec The @code\{current-kill\} Function\
@findex current-kill\
\
The @code\{current-kill\} function changes the element in the kill ring\
to which @code\{kill-ring-yank-pointer\} points.  (Also, the\
@code\{kill-new\} function sets @code\{kill-ring-yank-pointer\} to point\
to the latest element of the kill ring.  The @code\{kill-new\}\
function is used directly or indirectly by @code\{kill-append\},\
@code\{copy-region-as-kill\}, @code\{kill-ring-save\}, @code\{kill-line\},\
and @code\{kill-region\}.)\
\
@menu\
* Code for current-kill::\
* Understanding current-kill::\
@end menu\
\
@node Code for current-kill, Understanding current-kill, current-kill, current-kill\
@ifnottex\
@unnumberedsubsec The code for @code\{current-kill\}\
@end ifnottex\
\
\
@need 1500\
The @code\{current-kill\} function is used by @code\{yank\} and by\
@code\{yank-pop\}.  Here is the code for @code\{current-kill\}:\
\
@smallexample\
@group\
(defun current-kill (n &optional do-not-move)\
  "Rotate the yanking point by N places, and then return that kill.\
If N is zero, `interprogram-paste-function' is set, and calling it\
returns a string, then that string is added to the front of the\
kill ring and returned as the latest kill.\
@end group\
@group\
If optional arg DO-NOT-MOVE is non-nil, then don't actually move the\
yanking point; just return the Nth kill forward."\
  (let ((interprogram-paste (and (= n 0)\
                                 interprogram-paste-function\
                                 (funcall interprogram-paste-function))))\
@end group\
@group\
    (if interprogram-paste\
        (progn\
          ;; Disable the interprogram cut function when we add the new\
          ;; text to the kill ring, so Emacs doesn't try to own the\
          ;; selection, with identical text.\
          (let ((interprogram-cut-function nil))\
            (kill-new interprogram-paste))\
          interprogram-paste)\
@end group\
@group\
      (or kill-ring (error "Kill ring is empty"))\
      (let ((ARGth-kill-element\
             (nthcdr (mod (- n (length kill-ring-yank-pointer))\
                          (length kill-ring))\
                     kill-ring)))\
        (or do-not-move\
            (setq kill-ring-yank-pointer ARGth-kill-element))\
        (car ARGth-kill-element)))))\
@end group\
@end smallexample\
\
Remember also that the @code\{kill-new\} function sets\
@code\{kill-ring-yank-pointer\} to the latest element of the kill\
ring, which means that all the functions that call it set the value\
indirectly: @code\{kill-append\}, @code\{copy-region-as-kill\},\
@code\{kill-ring-save\}, @code\{kill-line\}, and @code\{kill-region\}.\
\
@need 1500\
Here is the line in @code\{kill-new\}, which is explained in\
@ref\{kill-new function, , The @code\{kill-new\} function\}.\
\
@smallexample\
(setq kill-ring-yank-pointer kill-ring)\
@end smallexample\
\
@node Understanding current-kill,  , Code for current-kill, current-kill\
@ifnottex\
@unnumberedsubsec @code\{current-kill\} in Outline\
@end ifnottex\
\
The @code\{current-kill\} function looks complex, but as usual, it can\
be understood by taking it apart piece by piece.  First look at it in\
skeletal form:\
\
@smallexample\
@group\
(defun current-kill (n &optional do-not-move)\
  "Rotate the yanking point by N places, and then return that kill."\
  (let @var\{varlist\}\
    @var\{body\}@dots\{\})\
@end group\
@end smallexample\
\
This function takes two arguments, one of which is optional.  It has a\
documentation string.  It is @emph\{not\} interactive.\
\
@menu\
* Body of current-kill::\
* Digression concerning error::  How to mislead humans, but not computers.\
* Determining the Element::\
@end menu\
\
@node Body of current-kill, Digression concerning error, Understanding current-kill, Understanding current-kill\
@ifnottex\
@unnumberedsubsubsec The Body of @code\{current-kill\}\
@end ifnottex\
\
The body of the function definition is a @code\{let\} expression, which\
itself has a body as well as a @var\{varlist\}.\
\
The @code\{let\} expression declares a variable that will be only usable\
within the bounds of this function.  This variable is called\
@code\{interprogram-paste\} and is for copying to another program.  It\
is not for copying within this instance of GNU Emacs.  Most window\
systems provide a facility for interprogram pasting.  Sadly, that\
facility usually provides only for the last element.  Most windowing\
systems have not adopted a ring of many possibilities, even though\
Emacs has provided it for decades.\
\
The @code\{if\} expression has two parts, one if there exists\
@code\{interprogram-paste\} and one if not.\
\
@need 2000\
Let us consider the `if not' or else-part of the @code\{current-kill\}\
function.  (The then-part uses the @code\{kill-new\} function, which\
we have already described.  @xref\{kill-new function, , The\
@code\{kill-new\} function\}.)\
\
@smallexample\
@group\
(or kill-ring (error "Kill ring is empty"))\
(let ((ARGth-kill-element\
       (nthcdr (mod (- n (length kill-ring-yank-pointer))\
                    (length kill-ring))\
               kill-ring)))\
  (or do-not-move\
      (setq kill-ring-yank-pointer ARGth-kill-element))\
  (car ARGth-kill-element))\
@end group\
@end smallexample\
\
@noindent\
The code first checks whether the kill ring has content; otherwise it\
signals an error.\
\
@need 1000\
Note that the @code\{or\} expression is very similar to testing length\
with an @code\{if\}:\
\
@findex zerop\
@findex error\
@smallexample\
@group\
(if (zerop (length kill-ring))          ; @r\{if-part\}\
    (error "Kill ring is empty"))       ; @r\{then-part\}\
  ;; No else-part\
@end group\
@end smallexample\
\
@noindent\
If there is not anything in the kill ring, its length must be zero and\
an error message sent to the user: @samp\{Kill ring is empty\}.  The\
@code\{current-kill\} function uses an @code\{or\} expression which is\
simpler.  But an @code\{if\} expression reminds us what goes on.\
\
This @code\{if\} expression uses the function @code\{zerop\} which returns\
true if the value it is testing is zero.  When @code\{zerop\} tests\
true, the then-part of the @code\{if\} is evaluated.  The then-part is a\
list starting with the function @code\{error\}, which is a function that\
is similar to the @code\{message\} function\
(@pxref\{message, , The @code\{message\} Function\}) in that\
it prints a one-line message in the echo area.  However, in addition\
to printing a message, @code\{error\} also stops evaluation of the\
function within which it is embedded.  This means that the rest of the\
function will not be evaluated if the length of the kill ring is zero.\
\
Then the @code\{current-kill\} function selects the element to return.\
The selection depends on the number of places that @code\{current-kill\}\
rotates and on where @code\{kill-ring-yank-pointer\} points.\
\
Next, either the optional @code\{do-not-move\} argument is true or the\
current value of @code\{kill-ring-yank-pointer\} is set to point to the\
list.  Finally, another expression returns the first element of the\
list even if the @code\{do-not-move\} argument is true.\
\
@node Digression concerning error, Determining the Element, Body of current-kill, Understanding current-kill\
@ifnottex\
@unnumberedsubsubsec Digression about the word `error'\
@end ifnottex\
\
In my opinion, it is slightly misleading, at least to humans, to use\
the term `error' as the name of the @code\{error\} function.  A better\
term would be `cancel'.  Strictly speaking, of course, you cannot\
point to, much less rotate a pointer to a list that has no length, so\
from the point of view of the computer, the word `error' is correct.\
But a human expects to attempt this sort of thing, if only to find out\
whether the kill ring is full or empty.  This is an act of\
exploration.\
\
From the human point of view, the act of exploration and discovery is\
not necessarily an error, and therefore should not be labelled as one,\
even in the bowels of a computer.  As it is, the code in Emacs implies\
that a human who is acting virtuously, by exploring his or her\
environment, is making an error.  This is bad.  Even though the computer\
takes the same steps as it does when there is an `error', a term such as\
`cancel' would have a clearer connotation.\
\
@node Determining the Element,  , Digression concerning error, Understanding current-kill\
@ifnottex\
@unnumberedsubsubsec Determining the Element\
@end ifnottex\
\
Among other actions, the else-part of the @code\{if\} expression sets\
the value of @code\{kill-ring-yank-pointer\} to\
@code\{ARGth-kill-element\} when the kill ring has something in it and\
the value of @code\{do-not-move\} is @code\{nil\}.\
\
@need 800\
The code looks like this:\
\
@smallexample\
@group\
(nthcdr (mod (- n (length kill-ring-yank-pointer))\
             (length kill-ring))\
        kill-ring)))\
@end group\
@end smallexample\
\
This needs some examination.  Unless it is not supposed to move the\
pointer, the @code\{current-kill\} function changes where\
@code\{kill-ring-yank-pointer\} points.\
That is what the\
@w\{@code\{(setq kill-ring-yank-pointer ARGth-kill-element))\}\}\
expression does.  Also, clearly, @code\{ARGth-kill-element\} is being\
set to be equal to some @sc\{cdr\} of the kill ring, using the\
@code\{nthcdr\} function that is described in an earlier section.\
(@xref\{copy-region-as-kill\}.)  How does it do this?\
\
As we have seen before (@pxref\{nthcdr\}), the @code\{nthcdr\} function\
works by repeatedly taking the @sc\{cdr\} of a list---it takes the\
@sc\{cdr\} of the @sc\{cdr\} of the @sc\{cdr\} @dots\{\}\
\
@need 800\
The two following expressions produce the same result:\
\
@smallexample\
@group\
(setq kill-ring-yank-pointer (cdr kill-ring))\
\
(setq kill-ring-yank-pointer (nthcdr 1 kill-ring))\
@end group\
@end smallexample\
\
However, the @code\{nthcdr\} expression is more complicated.  It uses\
the @code\{mod\} function to determine which @sc\{cdr\} to select.\
\
(You will remember to look at inner functions first; indeed, we will\
have to go inside the @code\{mod\}.)\
\
The @code\{mod\} function returns the value of its first argument modulo\
the second; that is to say, it returns the remainder after dividing\
the first argument by the second.  The value returned has the same\
sign as the second argument.\
\
@need 800\
Thus,\
\
@smallexample\
@group\
(mod 12 4)\
  @result\{\} 0  ;; @r\{because there is no remainder\}\
(mod 13 4)\
  @result\{\} 1\
@end group\
@end smallexample\
\
@need 1250\
In this case, the first argument is often smaller than the second.\
That is fine.\
\
@smallexample\
@group\
(mod 0 4)\
  @result\{\} 0\
(mod 1 4)\
  @result\{\} 1\
@end group\
@end smallexample\
\
We can guess what the @code\{-\} function does.  It is like @code\{+\} but\
subtracts instead of adds; the @code\{-\} function subtracts its second\
argument from its first.  Also, we already know what the @code\{length\}\
function does (@pxref\{length\}).  It returns the length of a list.\
\
And @code\{n\} is the name of the required argument to the\
@code\{current-kill\} function.\
\
@need 1250\
So when the first argument to @code\{nthcdr\} is zero, the @code\{nthcdr\}\
expression returns the whole list, as you can see by evaluating the\
following:\
\
@smallexample\
@group\
;; kill-ring-yank-pointer @r\{and\} kill-ring @r\{have a length of four\}\
;; @r\{and\} (mod (- 0 4) 4) @result\{\} 0\
(nthcdr (mod (- 0 4) 4)\
        '("fourth line of text"\
          "third line"\
          "second piece of text"\
          "first some text"))\
@end group\
@end smallexample\
\
@need 1250\
When the first argument to the @code\{current-kill\} function is one,\
the @code\{nthcdr\} expression returns the list without its first\
element.\
\
@smallexample\
@group\
(nthcdr (mod (- 1 4) 4)\
        '("fourth line of text"\
          "third line"\
          "second piece of text"\
          "first some text"))\
@end group\
@end smallexample\
\
@cindex @samp\{global variable\} defined\
@cindex @samp\{variable, global\}, defined\
Incidentally, both @code\{kill-ring\} and @code\{kill-ring-yank-pointer\}\
are @dfn\{global variables\}.  That means that any expression in Emacs\
Lisp can access them.  They are not like the local variables set by\
@code\{let\} or like the symbols in an argument list.\
Local variables can only be accessed\
within the @code\{let\} that defines them or the function that specifies\
them in an argument list (and within expressions called by them).\
\
@ignore\
@c texi2dvi fails when the name of the section is within ifnottex ...\
(@xref\{Prevent confusion, , @code\{let\} Prevents Confusion\}, and\
@ref\{defun, , The @code\{defun\} Special Form\}.)\
@end ignore\
\
@node yank, yank-pop, current-kill, Kill Ring\
@comment  node-name,  next,  previous,  up\
@appendixsec @code\{yank\}\
@findex yank\
\
After learning about @code\{current-kill\}, the code for the\
@code\{yank\} function is almost easy.\
\
The @code\{yank\} function does not use the\
@code\{kill-ring-yank-pointer\} variable directly.  It calls\
@code\{insert-for-yank\} which calls @code\{current-kill\} which sets the\
@code\{kill-ring-yank-pointer\} variable.\
\
@need 1250\
The code looks like this:\
\
@c in GNU Emacs 22\
@smallexample\
@group\
(defun yank (&optional arg)\
  "Reinsert (\\"paste\\") the last stretch of killed text.\
More precisely, reinsert the stretch of killed text most recently\
killed OR yanked.  Put point at end, and set mark at beginning.\
With just \\\\[universal-argument] as argument, same but put point at\
beginning (and mark at end).  With argument N, reinsert the Nth most\
recently killed stretch of killed text.\
\
When this command inserts killed text into the buffer, it honors\
`yank-excluded-properties' and `yank-handler' as described in the\
doc string for `insert-for-yank-1', which see.\
\
See also the command \\\\[yank-pop]."\
@end group\
@group\
  (interactive "*P")\
  (setq yank-window-start (window-start))\
  ;; If we don't get all the way thru, make last-command indicate that\
  ;; for the following command.\
  (setq this-command t)\
  (push-mark (point))\
@end group\
@group\
  (insert-for-yank (current-kill (cond\
                                  ((listp arg) 0)\
                                  ((eq arg '-) -2)\
                                  (t (1- arg)))))\
  (if (consp arg)\
      ;; This is like exchange-point-and-mark,\
      ;;     but doesn't activate the mark.\
      ;; It is cleaner to avoid activation, even though the command\
      ;; loop would deactivate the mark because we inserted text.\
      (goto-char (prog1 (mark t)\
                   (set-marker (mark-marker) (point) (current-buffer)))))\
@end group\
@group\
  ;; If we do get all the way thru, make this-command indicate that.\
  (if (eq this-command t)\
      (setq this-command 'yank))\
  nil)\
@end group\
@end smallexample\
\
The key expression is @code\{insert-for-yank\}, which inserts the string\
returned by @code\{current-kill\}, but removes some text properties from\
it.\
\
However, before getting to that expression, the function sets the value\
of @code\{yank-window-start\} to the position returned by the\
@code\{(window-start)\} expression, the position at which the display\
currently starts.  The @code\{yank\} function also sets\
@code\{this-command\} and pushes the mark.\
\
After it yanks the appropriate element, if the optional argument is a\
@sc\{cons\} rather than a number or nothing, it puts point at beginning\
of the yanked text and mark at its end.\
\
(The @code\{prog1\} function is like @code\{progn\} but returns the value\
of its first argument rather than the value of its last argument.  Its\
first argument is forced to return the buffer's mark as an integer.\
You can see the documentation for these functions by placing point\
over them in this buffer and then typing @kbd\{C-h f\}\
(@code\{describe-function\}) followed by a @kbd\{RET\}; the default is the\
function.)\
\
The last part of the function tells what to do when it succeeds.\
\
@node yank-pop, ring file, yank, Kill Ring\
@comment  node-name,  next,  previous,  up\
@appendixsec @code\{yank-pop\}\
@findex yank-pop\
\
After understanding @code\{yank\} and @code\{current-kill\}, you know how\
to approach the @code\{yank-pop\} function.  Leaving out the\
documentation to save space, it looks like this:\
\
@c GNU Emacs 22\
@smallexample\
@group\
(defun yank-pop (&optional arg)\
  "@dots\{\}"\
  (interactive "*p")\
  (if (not (eq last-command 'yank))\
      (error "Previous command was not a yank"))\
@end group\
@group\
  (setq this-command 'yank)\
  (unless arg (setq arg 1))\
  (let ((inhibit-read-only t)\
        (before (< (point) (mark t))))\
@end group\
@group\
    (if before\
        (funcall (or yank-undo-function 'delete-region) (point) (mark t))\
      (funcall (or yank-undo-function 'delete-region) (mark t) (point)))\
    (setq yank-undo-function nil)\
@end group\
@group\
    (set-marker (mark-marker) (point) (current-buffer))\
    (insert-for-yank (current-kill arg))\
    ;; Set the window start back where it was in the yank command,\
    ;; if possible.\
    (set-window-start (selected-window) yank-window-start t)\
@end group\
@group\
    (if before\
        ;; This is like exchange-point-and-mark,\
        ;;     but doesn't activate the mark.\
        ;; It is cleaner to avoid activation, even though the command\
        ;; loop would deactivate the mark because we inserted text.\
        (goto-char (prog1 (mark t)\
                     (set-marker (mark-marker)\
                                 (point)\
                                 (current-buffer))))))\
  nil)\
@end group\
@end smallexample\
\
The function is interactive with a small @samp\{p\} so the prefix\
argument is processed and passed to the function.  The command can\
only be used after a previous yank; otherwise an error message is\
sent.  This check uses the variable @code\{last-command\} which is set\
by @code\{yank\} and is discussed elsewhere.\
(@xref\{copy-region-as-kill\}.)\
\
The @code\{let\} clause sets the variable @code\{before\} to true or false\
depending whether point is before or after mark and then the region\
between point and mark is deleted.  This is the region that was just\
inserted by the previous yank and it is this text that will be\
replaced.\
\
@code\{funcall\} calls its first argument as a function, passing\
remaining arguments to it.  The first argument is whatever the\
@code\{or\} expression returns.  The two remaining arguments are the\
positions of point and mark set by the preceding @code\{yank\} command.\
\
There is more, but that is the hardest part.\
\
@node ring file,  , yank-pop, Kill Ring\
@comment  node-name,  next,  previous,  up\
@appendixsec The @file\{ring.el\} File\
@cindex @file\{ring.el\} file\
\
Interestingly, GNU Emacs posses a file called @file\{ring.el\} that\
provides many of the features we just discussed.  But functions such\
as @code\{kill-ring-yank-pointer\} do not use this library, possibly\
because they were written earlier.\
\
@node Full Graph, Free Software and Free Manuals, Kill Ring, Top\
@appendix A Graph with Labelled Axes\
\
Printed axes help you understand a graph.  They convey scale.  In an\
earlier chapter (@pxref\{Readying a Graph, ,  Readying a Graph\}), we\
wrote the code to print the body of a graph.  Here we write the code\
for printing and labelling vertical and horizontal axes, along with the\
body itself.\
\
@menu\
* Labelled Example::\
* print-graph Varlist::         @code\{let\} expression in @code\{print-graph\}.\
* print-Y-axis::                Print a label for the vertical axis.\
* print-X-axis::                Print a horizontal label.\
* Print Whole Graph::           The function to print a complete graph.\
@end menu\
\
@node Labelled Example, print-graph Varlist, Full Graph, Full Graph\
@ifnottex\
@unnumberedsec Labelled Example Graph\
@end ifnottex\
\
Since insertions fill a buffer to the right and below point, the new\
graph printing function should first print the Y or vertical axis,\
then the body of the graph, and finally the X or horizontal axis.\
This sequence lays out for us the contents of the function:\
\
@enumerate\
@item\
Set up code.\
\
@item\
Print Y axis.\
\
@item\
Print body of graph.\
\
@item\
Print X axis.\
@end enumerate\
\
@need 800\
Here is an example of how a finished graph should look:\
\
@smallexample\
@group\
    10 -\
                  *\
                  *  *\
                  *  **\
                  *  ***\
     5 -      *   *******\
            * *** *******\
            *************\
          ***************\
     1 - ****************\
         |   |    |    |\
         1   5   10   15\
@end group\
@end smallexample\
\
@noindent\
In this graph, both the vertical and the horizontal axes are labelled\
with numbers.  However, in some graphs, the horizontal axis is time\
and would be better labelled with months, like this:\
\
@smallexample\
@group\
     5 -      *\
            * ** *\
            *******\
          ********** **\
     1 - **************\
         |    ^      |\
         Jan  June   Jan\
@end group\
@end smallexample\
\
Indeed, with a little thought, we can easily come up with a variety of\
vertical and horizontal labelling schemes.  Our task could become\
complicated.  But complications breed confusion.  Rather than permit\
this, it is better choose a simple labelling scheme for our first\
effort, and to modify or replace it later.\
\
@need 1200\
These considerations suggest the following outline for the\
@code\{print-graph\} function:\
\
@smallexample\
@group\
(defun print-graph (numbers-list)\
  "@var\{documentation\}@dots\{\}"\
  (let ((height  @dots\{\}\
        @dots\{\}))\
@end group\
@group\
    (print-Y-axis height @dots\{\} )\
    (graph-body-print numbers-list)\
    (print-X-axis @dots\{\} )))\
@end group\
@end smallexample\
\
We can work on each part of the @code\{print-graph\} function definition\
in turn.\
\
@node print-graph Varlist, print-Y-axis, Labelled Example, Full Graph\
@comment  node-name,  next,  previous,  up\
@appendixsec The @code\{print-graph\} Varlist\
@cindex @code\{print-graph\} varlist\
\
In writing the @code\{print-graph\} function, the first task is to write\
the varlist in the @code\{let\} expression.  (We will leave aside for the\
moment any thoughts about making the function interactive or about the\
contents of its documentation string.)\
\
The varlist should set several values.  Clearly, the top of the label\
for the vertical axis must be at least the height of the graph, which\
means that we must obtain this information here.  Note that the\
@code\{print-graph-body\} function also requires this information.  There\
is no reason to calculate the height of the graph in two different\
places, so we should change @code\{print-graph-body\} from the way we\
defined it earlier to take advantage of the calculation.\
\
Similarly, both the function for printing the X axis labels and the\
@code\{print-graph-body\} function need to learn the value of the width of\
each symbol.  We can perform the calculation here and change the\
definition for @code\{print-graph-body\} from the way we defined it in the\
previous chapter.\
\
The length of the label for the horizontal axis must be at least as long\
as the graph.  However, this information is used only in the function\
that prints the horizontal axis, so it does not need to be calculated here.\
\
These thoughts lead us directly to the following form for the varlist\
in the @code\{let\} for @code\{print-graph\}:\
\
@smallexample\
@group\
(let ((height (apply 'max numbers-list)) ; @r\{First version.\}\
      (symbol-width (length graph-blank)))\
@end group\
@end smallexample\
\
@noindent\
As we shall see, this expression is not quite right.\
\
@need 2000\
@node print-Y-axis, print-X-axis, print-graph Varlist, Full Graph\
@comment  node-name,  next,  previous,  up\
@appendixsec The @code\{print-Y-axis\} Function\
@cindex Axis, print vertical\
@cindex Y axis printing\
@cindex Vertical axis printing\
@cindex Print vertical axis\
\
The job of the @code\{print-Y-axis\} function is to print a label for\
the vertical axis that looks like this:\
\
@smallexample\
@group\
    10 -\
\
\
\
\
     5 -\
\
\
\
     1 -\
@end group\
@end smallexample\
\
@noindent\
The function should be passed the height of the graph, and then should\
construct and insert the appropriate numbers and marks.\
\
@menu\
* print-Y-axis in Detail::\
* Height of label::             What height for the Y axis?\
* Compute a Remainder::         How to compute the remainder of a division.\
* Y Axis Element::              Construct a line for the Y axis.\
* Y-axis-column::               Generate a list of Y axis labels.\
* print-Y-axis Penultimate::    A not quite final version.\
@end menu\
\
@node print-Y-axis in Detail, Height of label, print-Y-axis, print-Y-axis\
@ifnottex\
@unnumberedsubsec The @code\{print-Y-axis\} Function in Detail\
@end ifnottex\
\
It is easy enough to see in the figure what the Y axis label should\
look like; but to say in words, and then to write a function\
definition to do the job is another matter.  It is not quite true to\
say that we want a number and a tic every five lines: there are only\
three lines between the @samp\{1\} and the @samp\{5\} (lines 2, 3, and 4),\
but four lines between the @samp\{5\} and the @samp\{10\} (lines 6, 7, 8,\
and 9).  It is better to say that we want a number and a tic mark on\
the base line (number 1) and then that we want a number and a tic on\
the fifth line from the bottom and on every line that is a multiple of\
five.\
\
@node Height of label, Compute a Remainder, print-Y-axis in Detail, print-Y-axis\
@ifnottex\
@unnumberedsubsec What height should the label be?\
@end ifnottex\
\
The next issue is what height the label should be?  Suppose the maximum\
height of tallest column of the graph is seven.  Should the highest\
label on the Y axis be @samp\{5 -\}, and should the graph stick up above\
the label?  Or should the highest label be @samp\{7 -\}, and mark the peak\
of the graph?  Or should the highest label be @code\{10 -\}, which is a\
multiple of five, and be higher than the topmost value of the graph?\
\
The latter form is preferred.  Most graphs are drawn within rectangles\
whose sides are an integral number of steps long---5, 10, 15, and so\
on for a step distance of five.  But as soon as we decide to use a\
step height for the vertical axis, we discover that the simple\
expression in the varlist for computing the height is wrong.  The\
expression is @code\{(apply 'max numbers-list)\}.  This returns the\
precise height, not the maximum height plus whatever is necessary to\
round up to the nearest multiple of five.  A more complex expression\
is required.\
\
As usual in cases like this, a complex problem becomes simpler if it is\
divided into several smaller problems.\
\
First, consider the case when the highest value of the graph is an\
integral multiple of five---when it is 5, 10, 15, or some higher\
multiple of five.  We can use this value as the Y axis height.\
\
A fairly simply way to determine whether a number is a multiple of\
five is to divide it by five and see if the division results in a\
remainder.  If there is no remainder, the number is a multiple of\
five.  Thus, seven divided by five has a remainder of two, and seven\
is not an integral multiple of five.  Put in slightly different\
language, more reminiscent of the classroom, five goes into seven\
once, with a remainder of two.  However, five goes into ten twice,\
with no remainder: ten is an integral multiple of five.\
\
@node Compute a Remainder, Y Axis Element, Height of label, print-Y-axis\
@appendixsubsec Side Trip: Compute a Remainder\
\
@findex % @r\{(remainder function)\}\
@cindex Remainder function, @code\{%\}\
In Lisp, the function for computing a remainder is @code\{%\}.  The\
function returns the remainder of its first argument divided by its\
second argument.  As it happens, @code\{%\} is a function in Emacs Lisp\
that you cannot discover using @code\{apropos\}: you find nothing if you\
type @kbd\{M-x apropos @key\{RET\} remainder @key\{RET\}\}.  The only way to\
learn of the existence of @code\{%\} is to read about it in a book such\
as this or in the Emacs Lisp sources.\
\
You can try the @code\{%\} function by evaluating the following two\
expressions:\
\
@smallexample\
@group\
(% 7 5)\
\
(% 10 5)\
@end group\
@end smallexample\
\
@noindent\
The first expression returns 2 and the second expression returns 0.\
\
To test whether the returned value is zero or some other number, we\
can use the @code\{zerop\} function.  This function returns @code\{t\} if\
its argument, which must be a number, is zero.\
\
@smallexample\
@group\
(zerop (% 7 5))\
     @result\{\} nil\
\
(zerop (% 10 5))\
     @result\{\} t\
@end group\
@end smallexample\
\
Thus, the following expression will return @code\{t\} if the height\
of the graph is evenly divisible by five:\
\
@smallexample\
(zerop (% height 5))\
@end smallexample\
\
@noindent\
(The value of @code\{height\}, of course, can be found from @code\{(apply\
'max numbers-list)\}.)\
\
On the other hand, if the value of @code\{height\} is not a multiple of\
five, we want to reset the value to the next higher multiple of five.\
This is straightforward arithmetic using functions with which we are\
already familiar.  First, we divide the value of @code\{height\} by five\
to determine how many times five goes into the number.  Thus, five\
goes into twelve twice.  If we add one to this quotient and multiply by\
five, we will obtain the value of the next multiple of five that is\
larger than the height.  Five goes into twelve twice.  Add one to two,\
and multiply by five; the result is fifteen, which is the next multiple\
of five that is higher than twelve.  The Lisp expression for this is:\
\
@smallexample\
(* (1+ (/ height 5)) 5)\
@end smallexample\
\
@noindent\
For example, if you evaluate the following, the result is 15:\
\
@smallexample\
(* (1+ (/ 12 5)) 5)\
@end smallexample\
\
All through this discussion, we have been using `five' as the value\
for spacing labels on the Y axis; but we may want to use some other\
value.  For generality, we should replace `five' with a variable to\
which we can assign a value.  The best name I can think of for this\
variable is @code\{Y-axis-label-spacing\}.\
\
@need 1250\
Using this term, and an @code\{if\} expression, we produce the\
following:\
\
@smallexample\
@group\
(if (zerop (% height Y-axis-label-spacing))\
    height\
  ;; @r\{else\}\
  (* (1+ (/ height Y-axis-label-spacing))\
     Y-axis-label-spacing))\
@end group\
@end smallexample\
\
@noindent\
This expression returns the value of @code\{height\} itself if the height\
is an even multiple of the value of the @code\{Y-axis-label-spacing\} or\
else it computes and returns a value of @code\{height\} that is equal to\
the next higher multiple of the value of the @code\{Y-axis-label-spacing\}.\
\
We can now include this expression in the @code\{let\} expression of the\
@code\{print-graph\} function (after first setting the value of\
@code\{Y-axis-label-spacing\}):\
@vindex Y-axis-label-spacing\
\
@smallexample\
@group\
(defvar Y-axis-label-spacing 5\
  "Number of lines from one Y axis label to next.")\
@end group\
\
@group\
@dots\{\}\
(let* ((height (apply 'max numbers-list))\
       (height-of-top-line\
        (if (zerop (% height Y-axis-label-spacing))\
            height\
@end group\
@group\
          ;; @r\{else\}\
          (* (1+ (/ height Y-axis-label-spacing))\
             Y-axis-label-spacing)))\
       (symbol-width (length graph-blank))))\
@dots\{\}\
@end group\
@end smallexample\
\
@noindent\
(Note use of the  @code\{let*\} function: the initial value of height is\
computed once by the @code\{(apply 'max numbers-list)\} expression and\
then the resulting value of  @code\{height\} is used to compute its\
final value.  @xref\{fwd-para let, , The @code\{let*\} expression\}, for\
more about @code\{let*\}.)\
\
@node Y Axis Element, Y-axis-column, Compute a Remainder, print-Y-axis\
@appendixsubsec Construct a Y Axis Element\
\
When we print the vertical axis, we want to insert strings such as\
@w\{@samp\{5 -\}\} and @w\{@samp\{10 - \}\} every five lines.\
Moreover, we want the numbers and dashes to line up, so shorter\
numbers must be padded with leading spaces.  If some of the strings\
use two digit numbers, the strings with single digit numbers must\
include a leading blank space before the number.\
\
@findex number-to-string\
To figure out the length of the number, the @code\{length\} function is\
used.  But the @code\{length\} function works only with a string, not with\
a number.  So the number has to be converted from being a number to\
being a string.  This is done with the @code\{number-to-string\} function.\
For example,\
\
@smallexample\
@group\
(length (number-to-string 35))\
     @result\{\} 2\
\
(length (number-to-string 100))\
     @result\{\} 3\
@end group\
@end smallexample\
\
@noindent\
(@code\{number-to-string\} is also called @code\{int-to-string\}; you will\
see this alternative name in various sources.)\
\
In addition, in each label, each number is followed by a string such\
as @w\{@samp\{ - \}\}, which we will call the @code\{Y-axis-tic\} marker.\
This variable is defined with @code\{defvar\}:\
\
@vindex Y-axis-tic\
@smallexample\
@group\
(defvar Y-axis-tic " - "\
   "String that follows number in a Y axis label.")\
@end group\
@end smallexample\
\
The length of the Y label is the sum of the length of the Y axis tic\
mark and the length of the number of the top of the graph.\
\
@smallexample\
(length (concat (number-to-string height) Y-axis-tic)))\
@end smallexample\
\
This value will be calculated by the @code\{print-graph\} function in\
its varlist as @code\{full-Y-label-width\} and passed on.  (Note that we\
did not think to include this in the varlist when we first proposed it.)\
\
To make a complete vertical axis label, a tic mark is concatenated\
with a number; and the two together may be preceded by one or more\
spaces depending on how long the number is.  The label consists of\
three parts: the (optional) leading spaces, the number, and the tic\
mark.  The function is passed the value of the number for the specific\
row, and the value of the width of the top line, which is calculated\
(just once) by @code\{print-graph\}.\
\
@smallexample\
@group\
(defun Y-axis-element (number full-Y-label-width)\
  "Construct a NUMBERed label element.\
A numbered element looks like this `  5 - ',\
and is padded as needed so all line up with\
the element for the largest number."\
@end group\
@group\
  (let* ((leading-spaces\
         (- full-Y-label-width\
            (length\
             (concat (number-to-string number)\
                     Y-axis-tic)))))\
@end group\
@group\
    (concat\
     (make-string leading-spaces ? )\
     (number-to-string number)\
     Y-axis-tic)))\
@end group\
@end smallexample\
\
The @code\{Y-axis-element\} function concatenates together the leading\
spaces, if any; the number, as a string; and the tic mark.\
\
To figure out how many leading spaces the label will need, the\
function subtracts the actual length of the label---the length of the\
number plus the length of the tic mark---from the desired label width.\
\
@findex make-string\
Blank spaces are inserted using the @code\{make-string\} function.  This\
function takes two arguments: the first tells it how long the string\
will be and the second is a symbol for the character to insert, in a\
special format.  The format is a question mark followed by a blank\
space, like this, @samp\{? \}.  @xref\{Character Type, , Character Type,\
elisp, The GNU Emacs Lisp Reference Manual\}, for a description of the\
syntax for characters.  (Of course, you might want to replace the\
blank space by some other character @dots\{\}  You know what to do.)\
\
The @code\{number-to-string\} function is used in the concatenation\
expression, to convert the number to a string that is concatenated\
with the leading spaces and the tic mark.\
\
@node Y-axis-column, print-Y-axis Penultimate, Y Axis Element, print-Y-axis\
@appendixsubsec Create a Y Axis Column\
\
The preceding functions provide all the tools needed to construct a\
function that generates a list of numbered and blank strings to insert\
as the label for the vertical axis:\
\
@findex Y-axis-column\
@smallexample\
@group\
(defun Y-axis-column (height width-of-label)\
  "Construct list of Y axis labels and blank strings.\
For HEIGHT of line above base and WIDTH-OF-LABEL."\
  (let (Y-axis)\
@group\
@end group\
    (while (> height 1)\
      (if (zerop (% height Y-axis-label-spacing))\
          ;; @r\{Insert label.\}\
          (setq Y-axis\
                (cons\
                 (Y-axis-element height width-of-label)\
                 Y-axis))\
@group\
@end group\
        ;; @r\{Else, insert blanks.\}\
        (setq Y-axis\
              (cons\
               (make-string width-of-label ? )\
               Y-axis)))\
      (setq height (1- height)))\
    ;; @r\{Insert base line.\}\
    (setq Y-axis\
          (cons (Y-axis-element 1 width-of-label) Y-axis))\
    (nreverse Y-axis)))\
@end group\
@end smallexample\
\
In this function, we start with the value of @code\{height\} and\
repetitively subtract one from its value.  After each subtraction, we\
test to see whether the value is an integral multiple of the\
@code\{Y-axis-label-spacing\}.  If it is, we construct a numbered label\
using the @code\{Y-axis-element\} function; if not, we construct a\
blank label using the @code\{make-string\} function.  The base line\
consists of the number one followed by a tic mark.\
\
@need 2000\
@node print-Y-axis Penultimate,  , Y-axis-column, print-Y-axis\
@appendixsubsec The Not Quite Final Version of @code\{print-Y-axis\}\
\
The list constructed by the @code\{Y-axis-column\} function is passed to\
the @code\{print-Y-axis\} function, which inserts the list as a column.\
\
@findex print-Y-axis\
@smallexample\
@group\
(defun print-Y-axis (height full-Y-label-width)\
  "Insert Y axis using HEIGHT and FULL-Y-LABEL-WIDTH.\
Height must be the maximum height of the graph.\
Full width is the width of the highest label element."\
;; Value of height and full-Y-label-width\
;; are passed by `print-graph'.\
@end group\
@group\
  (let ((start (point)))\
    (insert-rectangle\
     (Y-axis-column height full-Y-label-width))\
    ;; @r\{Place point ready for inserting graph.\}\
    (goto-char start)\
    ;; @r\{Move point forward by value of\} full-Y-label-width\
    (forward-char full-Y-label-width)))\
@end group\
@end smallexample\
\
The @code\{print-Y-axis\} uses the @code\{insert-rectangle\} function to\
insert the Y axis labels created by the @code\{Y-axis-column\} function.\
In addition, it places point at the correct position for printing the body of\
the graph.\
\
You can test @code\{print-Y-axis\}:\
\
@enumerate\
@item\
Install\
\
@smallexample\
@group\
Y-axis-label-spacing\
Y-axis-tic\
Y-axis-element\
Y-axis-column\
print-Y-axis\
@end group\
@end smallexample\
\
@item\
Copy the following expression:\
\
@smallexample\
(print-Y-axis 12 5)\
@end smallexample\
\
@item\
Switch to the @file\{*scratch*\} buffer and place the cursor where you\
want the axis labels to start.\
\
@item\
Type @kbd\{M-:\} (@code\{eval-expression\}).\
\
@item\
Yank the @code\{graph-body-print\} expression into the minibuffer\
with @kbd\{C-y\} (@code\{yank)\}.\
\
@item\
Press @key\{RET\} to evaluate the expression.\
@end enumerate\
\
Emacs will print labels vertically, the top one being @w\{@samp\{10 -@w\{\
\}\}\}.  (The @code\{print-graph\} function will pass the value of\
@code\{height-of-top-line\}, which in this case will end up as 15,\
thereby getting rid of what might appear as a bug.)\
\
@need 2000\
@node print-X-axis, Print Whole Graph, print-Y-axis, Full Graph\
@appendixsec The @code\{print-X-axis\} Function\
@cindex Axis, print horizontal\
@cindex X axis printing\
@cindex Print horizontal axis\
@cindex Horizontal axis printing\
\
X axis labels are much like Y axis labels, except that the ticks are on a\
line above the numbers.  Labels should look like this:\
\
@smallexample\
@group\
    |   |    |    |\
    1   5   10   15\
@end group\
@end smallexample\
\
The first tic is under the first column of the graph and is preceded by\
several blank spaces.  These spaces provide room in rows above for the Y\
axis labels.  The second, third, fourth, and subsequent ticks are all\
spaced equally, according to the value of @code\{X-axis-label-spacing\}.\
\
The second row of the X axis consists of numbers, preceded by several\
blank spaces and also separated according to the value of the variable\
@code\{X-axis-label-spacing\}.\
\
The value of the variable @code\{X-axis-label-spacing\} should itself be\
measured in units of @code\{symbol-width\}, since you may want to change\
the width of the symbols that you are using to print the body of the\
graph without changing the ways the graph is labelled.\
\
@menu\
* Similarities differences::    Much like @code\{print-Y-axis\}, but not exactly.\
* X Axis Tic Marks::            Create tic marks for the horizontal axis.\
@end menu\
\
@node Similarities differences, X Axis Tic Marks, print-X-axis, print-X-axis\
@ifnottex\
@unnumberedsubsec Similarities and differences\
@end ifnottex\
\
The @code\{print-X-axis\} function is constructed in more or less the\
same fashion as the @code\{print-Y-axis\} function except that it has\
two lines: the line of tic marks and the numbers.  We will write a\
separate function to print each line and then combine them within the\
@code\{print-X-axis\} function.\
\
This is a three step process:\
\
@enumerate\
@item\
Write a function to print the X axis tic marks, @code\{print-X-axis-tic-line\}.\
\
@item\
Write a function to print the X numbers, @code\{print-X-axis-numbered-line\}.\
\
@item\
Write a function to print both lines, the @code\{print-X-axis\} function,\
using @code\{print-X-axis-tic-line\} and\
@code\{print-X-axis-numbered-line\}.\
@end enumerate\
\
@node X Axis Tic Marks,  , Similarities differences, print-X-axis\
@appendixsubsec X Axis Tic Marks\
\
The first function should print the X axis tic marks.  We must specify\
the tic marks themselves and their spacing:\
\
@smallexample\
@group\
(defvar X-axis-label-spacing\
  (if (boundp 'graph-blank)\
      (* 5 (length graph-blank)) 5)\
  "Number of units from one X axis label to next.")\
@end group\
@end smallexample\
\
@noindent\
(Note that the value of @code\{graph-blank\} is set by another\
@code\{defvar\}.  The @code\{boundp\} predicate checks whether it has\
already been set; @code\{boundp\} returns @code\{nil\} if it has not.  If\
@code\{graph-blank\} were unbound and we did not use this conditional\
construction, in a recent GNU Emacs, we would enter the debugger and\
see an error message saying @samp\{@w\{Debugger entered--Lisp error:\}\
@w\{(void-variable graph-blank)\}\}.)\
\
@need 1200\
Here is the @code\{defvar\} for @code\{X-axis-tic-symbol\}:\
\
@smallexample\
@group\
(defvar X-axis-tic-symbol "|"\
  "String to insert to point to a column in X axis.")\
@end group\
@end smallexample\
\
@need 1250\
The goal is to make a line that looks like this:\
\
@smallexample\
       |   |    |    |\
@end smallexample\
\
The first tic is indented so that it is under the first column, which is\
indented to provide space for the Y axis labels.\
\
A tic element consists of the blank spaces that stretch from one tic to\
the next plus a tic symbol.  The number of blanks is determined by the\
width of the tic symbol and the @code\{X-axis-label-spacing\}.\
\
@need 1250\
The code looks like this:\
\
@smallexample\
@group\
;;; X-axis-tic-element\
@dots\{\}\
(concat\
 (make-string\
  ;; @r\{Make a string of blanks.\}\
  (-  (* symbol-width X-axis-label-spacing)\
      (length X-axis-tic-symbol))\
  ? )\
 ;; @r\{Concatenate blanks with tic symbol.\}\
 X-axis-tic-symbol)\
@dots\{\}\
@end group\
@end smallexample\
\
Next, we determine how many blanks are needed to indent the first tic\
mark to the first column of the graph.  This uses the value of\
@code\{full-Y-label-width\} passed it by the @code\{print-graph\} function.\
\
@need 1250\
The code to make @code\{X-axis-leading-spaces\}\
looks like this:\
\
@smallexample\
@group\
;; X-axis-leading-spaces\
@dots\{\}\
(make-string full-Y-label-width ? )\
@dots\{\}\
@end group\
@end smallexample\
\
We also need to determine the length of the horizontal axis, which is\
the length of the numbers list, and the number of ticks in the horizontal\
axis:\
\
@smallexample\
@group\
;; X-length\
@dots\{\}\
(length numbers-list)\
@end group\
\
@group\
;; tic-width\
@dots\{\}\
(* symbol-width X-axis-label-spacing)\
@end group\
\
@group\
;; number-of-X-ticks\
(if (zerop (% (X-length tic-width)))\
    (/ (X-length tic-width))\
  (1+ (/ (X-length tic-width))))\
@end group\
@end smallexample\
\
@need 1250\
All this leads us directly to the function for printing the X axis tic line:\
\
@findex print-X-axis-tic-line\
@smallexample\
@group\
(defun print-X-axis-tic-line\
  (number-of-X-tics X-axis-leading-spaces X-axis-tic-element)\
  "Print ticks for X axis."\
    (insert X-axis-leading-spaces)\
    (insert X-axis-tic-symbol)  ; @r\{Under first column.\}\
@end group\
@group\
    ;; @r\{Insert second tic in the right spot.\}\
    (insert (concat\
             (make-string\
              (-  (* symbol-width X-axis-label-spacing)\
                  ;; @r\{Insert white space up to second tic symbol.\}\
                  (* 2 (length X-axis-tic-symbol)))\
              ? )\
             X-axis-tic-symbol))\
@end group\
@group\
    ;; @r\{Insert remaining ticks.\}\
    (while (> number-of-X-tics 1)\
      (insert X-axis-tic-element)\
      (setq number-of-X-tics (1- number-of-X-tics))))\
@end group\
@end smallexample\
\
The line of numbers is equally straightforward:\
\
@need 1250\
First, we create a numbered element with blank spaces before each number:\
\
@findex X-axis-element\
@smallexample\
@group\
(defun X-axis-element (number)\
  "Construct a numbered X axis element."\
  (let ((leading-spaces\
         (-  (* symbol-width X-axis-label-spacing)\
             (length (number-to-string number)))))\
    (concat (make-string leading-spaces ? )\
            (number-to-string number))))\
@end group\
@end smallexample\
\
Next, we create the function to print the numbered line, starting with\
the number ``1'' under the first column:\
\
@findex print-X-axis-numbered-line\
@smallexample\
@group\
(defun print-X-axis-numbered-line\
  (number-of-X-tics X-axis-leading-spaces)\
  "Print line of X-axis numbers"\
  (let ((number X-axis-label-spacing))\
    (insert X-axis-leading-spaces)\
    (insert "1")\
@end group\
@group\
    (insert (concat\
             (make-string\
              ;; @r\{Insert white space up to next number.\}\
              (-  (* symbol-width X-axis-label-spacing) 2)\
              ? )\
             (number-to-string number)))\
@end group\
@group\
    ;; @r\{Insert remaining numbers.\}\
    (setq number (+ number X-axis-label-spacing))\
    (while (> number-of-X-tics 1)\
      (insert (X-axis-element number))\
      (setq number (+ number X-axis-label-spacing))\
      (setq number-of-X-tics (1- number-of-X-tics)))))\
@end group\
@end smallexample\
\
Finally, we need to write the @code\{print-X-axis\} that uses\
@code\{print-X-axis-tic-line\} and\
@code\{print-X-axis-numbered-line\}.\
\
The function must determine the local values of the variables used by both\
@code\{print-X-axis-tic-line\} and @code\{print-X-axis-numbered-line\}, and\
then it must call them.  Also, it must print the carriage return that\
separates the two lines.\
\
The function consists of a varlist that specifies five local variables,\
and calls to each of the two line printing functions:\
\
@findex print-X-axis\
@smallexample\
@group\
(defun print-X-axis (numbers-list)\
  "Print X axis labels to length of NUMBERS-LIST."\
  (let* ((leading-spaces\
          (make-string full-Y-label-width ? ))\
@end group\
@group\
       ;; symbol-width @r\{is provided by\} graph-body-print\
       (tic-width (* symbol-width X-axis-label-spacing))\
       (X-length (length numbers-list))\
@end group\
@group\
       (X-tic\
        (concat\
         (make-string\
@end group\
@group\
          ;; @r\{Make a string of blanks.\}\
          (-  (* symbol-width X-axis-label-spacing)\
              (length X-axis-tic-symbol))\
          ? )\
@end group\
@group\
         ;; @r\{Concatenate blanks with tic symbol.\}\
         X-axis-tic-symbol))\
@end group\
@group\
       (tic-number\
        (if (zerop (% X-length tic-width))\
            (/ X-length tic-width)\
          (1+ (/ X-length tic-width)))))\
@end group\
@group\
    (print-X-axis-tic-line tic-number leading-spaces X-tic)\
    (insert "\\n")\
    (print-X-axis-numbered-line tic-number leading-spaces)))\
@end group\
@end smallexample\
\
@need 1250\
You can test @code\{print-X-axis\}:\
\
@enumerate\
@item\
Install @code\{X-axis-tic-symbol\}, @code\{X-axis-label-spacing\},\
@code\{print-X-axis-tic-line\}, as well as @code\{X-axis-element\},\
@code\{print-X-axis-numbered-line\}, and @code\{print-X-axis\}.\
\
@item\
Copy the following expression:\
\
@smallexample\
@group\
(progn\
 (let ((full-Y-label-width 5)\
       (symbol-width 1))\
   (print-X-axis\
    '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))))\
@end group\
@end smallexample\
\
@item\
Switch to the @file\{*scratch*\} buffer and place the cursor where you\
want the axis labels to start.\
\
@item\
Type @kbd\{M-:\} (@code\{eval-expression\}).\
\
@item\
Yank the test expression into the minibuffer\
with @kbd\{C-y\} (@code\{yank)\}.\
\
@item\
Press @key\{RET\} to evaluate the expression.\
@end enumerate\
\
@need 1250\
Emacs will print the horizontal axis like this:\
@sp 1\
\
@smallexample\
@group\
     |   |    |    |    |\
     1   5   10   15   20\
@end group\
@end smallexample\
\
@node Print Whole Graph,  , print-X-axis, Full Graph\
@appendixsec Printing the Whole Graph\
@cindex Printing the whole graph\
@cindex Whole graph printing\
@cindex Graph, printing all\
\
Now we are nearly ready to print the whole graph.\
\
The function to print the graph with the proper labels follows the\
outline we created earlier (@pxref\{Full Graph, , A Graph with Labelled\
Axes\}), but with additions.\
\
@need 1250\
Here is the outline:\
\
@smallexample\
@group\
(defun print-graph (numbers-list)\
  "@var\{documentation\}@dots\{\}"\
  (let ((height  @dots\{\}\
        @dots\{\}))\
@end group\
@group\
    (print-Y-axis height @dots\{\} )\
    (graph-body-print numbers-list)\
    (print-X-axis @dots\{\} )))\
@end group\
@end smallexample\
\
@menu\
* The final version::           A few changes.\
* Test print-graph::            Run a short test.\
* Graphing words in defuns::    Executing the final code.\
* lambda::                      How to write an anonymous function.\
* mapcar::                      Apply a function to elements of a list.\
* Another Bug::                 Yet another bug @dots\{\} most insidious.\
* Final printed graph::         The graph itself!\
@end menu\
\
@node The final version, Test print-graph, Print Whole Graph, Print Whole Graph\
@ifnottex\
@unnumberedsubsec Changes for the Final Version\
@end ifnottex\
\
The final version is different from what we planned in two ways:\
first, it contains additional values calculated once in the varlist;\
second, it carries an option to specify the labels' increment per row.\
This latter feature turns out to be essential; otherwise, a graph may\
have more rows than fit on a display or on a sheet of paper.\
\
@need 1500\
This new feature requires a change to the @code\{Y-axis-column\}\
function, to add @code\{vertical-step\} to it.  The function looks like\
this:\
\
@findex Y-axis-column @r\{Final version.\}\
@smallexample\
@group\
;;; @r\{Final version.\}\
(defun Y-axis-column\
  (height width-of-label &optional vertical-step)\
  "Construct list of labels for Y axis.\
HEIGHT is maximum height of graph.\
WIDTH-OF-LABEL is maximum width of label.\
VERTICAL-STEP, an option, is a positive integer\
that specifies how much a Y axis label increments\
for each line.  For example, a step of 5 means\
that each line is five units of the graph."\
@end group\
@group\
  (let (Y-axis\
        (number-per-line (or vertical-step 1)))\
    (while (> height 1)\
      (if (zerop (% height Y-axis-label-spacing))\
@end group\
@group\
          ;; @r\{Insert label.\}\
          (setq Y-axis\
                (cons\
                 (Y-axis-element\
                  (* height number-per-line)\
                  width-of-label)\
                 Y-axis))\
@end group\
@group\
        ;; @r\{Else, insert blanks.\}\
        (setq Y-axis\
              (cons\
               (make-string width-of-label ? )\
               Y-axis)))\
      (setq height (1- height)))\
@end group\
@group\
    ;; @r\{Insert base line.\}\
    (setq Y-axis (cons (Y-axis-element\
                        (or vertical-step 1)\
                        width-of-label)\
                       Y-axis))\
    (nreverse Y-axis)))\
@end group\
@end smallexample\
\
The values for the maximum height of graph and the width of a symbol\
are computed by @code\{print-graph\} in its @code\{let\} expression; so\
@code\{graph-body-print\} must be changed to accept them.\
\
@findex graph-body-print @r\{Final version.\}\
@smallexample\
@group\
;;; @r\{Final version.\}\
(defun graph-body-print (numbers-list height symbol-width)\
  "Print a bar graph of the NUMBERS-LIST.\
The numbers-list consists of the Y-axis values.\
HEIGHT is maximum height of graph.\
SYMBOL-WIDTH is number of each column."\
@end group\
@group\
  (let (from-position)\
    (while numbers-list\
      (setq from-position (point))\
      (insert-rectangle\
       (column-of-graph height (car numbers-list)))\
      (goto-char from-position)\
      (forward-char symbol-width)\
@end group\
@group\
      ;; @r\{Draw graph column by column.\}\
      (sit-for 0)\
      (setq numbers-list (cdr numbers-list)))\
    ;; @r\{Place point for X axis labels.\}\
    (forward-line height)\
    (insert "\\n")))\
@end group\
@end smallexample\
\
@need 1250\
Finally, the code for the @code\{print-graph\} function:\
\
@findex print-graph @r\{Final version.\}\
@smallexample\
@group\
;;; @r\{Final version.\}\
(defun print-graph\
  (numbers-list &optional vertical-step)\
  "Print labelled bar graph of the NUMBERS-LIST.\
The numbers-list consists of the Y-axis values.\
@end group\
\
@group\
Optionally, VERTICAL-STEP, a positive integer,\
specifies how much a Y axis label increments for\
each line.  For example, a step of 5 means that\
each row is five units."\
@end group\
@group\
  (let* ((symbol-width (length graph-blank))\
         ;; @code\{height\} @r\{is both the largest number\}\
         ;; @r\{and the number with the most digits.\}\
         (height (apply 'max numbers-list))\
@end group\
@group\
         (height-of-top-line\
          (if (zerop (% height Y-axis-label-spacing))\
              height\
            ;; @r\{else\}\
            (* (1+ (/ height Y-axis-label-spacing))\
               Y-axis-label-spacing)))\
@end group\
@group\
         (vertical-step (or vertical-step 1))\
         (full-Y-label-width\
          (length\
@end group\
@group\
           (concat\
            (number-to-string\
             (* height-of-top-line vertical-step))\
            Y-axis-tic))))\
@end group\
\
@group\
    (print-Y-axis\
     height-of-top-line full-Y-label-width vertical-step)\
@end group\
@group\
    (graph-body-print\
     numbers-list height-of-top-line symbol-width)\
    (print-X-axis numbers-list)))\
@end group\
@end smallexample\
\
@node Test print-graph, Graphing words in defuns, The final version, Print Whole Graph\
@appendixsubsec Testing @code\{print-graph\}\
\
@need 1250\
We can test the @code\{print-graph\} function with a short list of numbers:\
\
@enumerate\
@item\
Install the final versions of @code\{Y-axis-column\},\
@code\{graph-body-print\}, and @code\{print-graph\} (in addition to the\
rest of the code.)\
\
@item\
Copy the following expression:\
\
@smallexample\
(print-graph '(3 2 5 6 7 5 3 4 6 4 3 2 1))\
@end smallexample\
\
@item\
Switch to the @file\{*scratch*\} buffer and place the cursor where you\
want the axis labels to start.\
\
@item\
Type @kbd\{M-:\} (@code\{eval-expression\}).\
\
@item\
Yank the test expression into the minibuffer\
with @kbd\{C-y\} (@code\{yank)\}.\
\
@item\
Press @key\{RET\} to evaluate the expression.\
@end enumerate\
\
@need 1250\
Emacs will print a graph that looks like this:\
\
@smallexample\
@group\
10 -\
\
\
         *\
        **   *\
 5 -   ****  *\
       **** ***\
     * *********\
     ************\
 1 - *************\
\
     |   |    |    |\
     1   5   10   15\
@end group\
@end smallexample\
\
@need 1200\
On the other hand, if you pass @code\{print-graph\} a\
@code\{vertical-step\} value of 2, by evaluating this expression:\
\
@smallexample\
(print-graph '(3 2 5 6 7 5 3 4 6 4 3 2 1) 2)\
@end smallexample\
\
@need 1250\
@noindent\
The graph looks like this:\
\
@smallexample\
@group\
20 -\
\
\
         *\
        **   *\
10 -   ****  *\
       **** ***\
     * *********\
     ************\
 2 - *************\
\
     |   |    |    |\
     1   5   10   15\
@end group\
@end smallexample\
\
@noindent\
(A question: is the `2' on the bottom of the vertical axis a bug or a\
feature?  If you think it is a bug, and should be a `1' instead, (or\
even a `0'), you can modify the sources.)\
\
@node Graphing words in defuns, lambda, Test print-graph, Print Whole Graph\
@appendixsubsec Graphing Numbers of Words and Symbols\
\
Now for the graph for which all this code was written: a graph that\
shows how many function definitions contain fewer than 10 words and\
symbols, how many contain between 10 and 19 words and symbols, how\
many contain between 20 and 29 words and symbols, and so on.\
\
This is a multi-step process.  First make sure you have loaded all the\
requisite code.\
\
@need 1500\
It is a good idea to reset the value of @code\{top-of-ranges\} in case\
you have set it to some different value.  You can evaluate the\
following:\
\
@smallexample\
@group\
(setq top-of-ranges\
 '(10  20  30  40  50\
   60  70  80  90 100\
  110 120 130 140 150\
  160 170 180 190 200\
  210 220 230 240 250\
  260 270 280 290 300)\
@end group\
@end smallexample\
\
@noindent\
Next create a list of the number of words and symbols in each range.\
\
@need 1500\
@noindent\
Evaluate the following:\
\
@smallexample\
@group\
(setq list-for-graph\
       (defuns-per-range\
         (sort\
          (recursive-lengths-list-many-files\
           (directory-files "/usr/local/emacs/lisp"\
                            t ".+el$"))\
          '<)\
         top-of-ranges))\
@end group\
@end smallexample\
\
@noindent\
On my old machine, this took about an hour.  It looked though 303 Lisp\
files in my copy of Emacs version 19.23.  After all that computing,\
the @code\{list-for-graph\} had this value:\
\
@smallexample\
@group\
(537 1027 955 785 594 483 349 292 224 199 166 120 116 99\
90 80 67 48 52 45 41 33 28 26 25 20 12 28 11 13 220)\
@end group\
@end smallexample\
\
@noindent\
This means that my copy of Emacs had 537 function definitions with\
fewer than 10 words or symbols in them, 1,027 function definitions\
with 10 to 19 words or symbols in them, 955 function definitions with\
20 to 29 words or symbols in them, and so on.\
\
Clearly, just by looking at this list we can see that most function\
definitions contain ten to thirty words and symbols.\
\
Now for printing.  We do @emph\{not\} want to print a graph that is\
1,030 lines high @dots\{\}  Instead, we should print a graph that is\
fewer than twenty-five lines high.  A graph that height can be\
displayed on almost any monitor, and easily printed on a sheet of paper.\
\
This means that each value in @code\{list-for-graph\} must be reduced to\
one-fiftieth its present value.\
\
Here is a short function to do just that, using two functions we have\
not yet seen, @code\{mapcar\} and @code\{lambda\}.\
\
@smallexample\
@group\
(defun one-fiftieth (full-range)\
  "Return list, each number one-fiftieth of previous."\
 (mapcar '(lambda (arg) (/ arg 50)) full-range))\
@end group\
@end smallexample\
\
@node lambda, mapcar, Graphing words in defuns, Print Whole Graph\
@appendixsubsec A @code\{lambda\} Expression: Useful Anonymity\
@cindex Anonymous function\
@findex lambda\
\
@code\{lambda\} is the symbol for an anonymous function, a function\
without a name.  Every time you use an anonymous function, you need to\
include its whole body.\
\
@need 1250\
@noindent\
Thus,\
\
@smallexample\
(lambda (arg) (/ arg 50))\
@end smallexample\
\
@noindent\
is a function definition that says `return the value resulting from\
dividing whatever is passed to me as @code\{arg\} by 50'.\
\
@need 1200\
Earlier, for example, we had a function @code\{multiply-by-seven\}; it\
multiplied its argument by 7.  This function is similar, except it\
divides its argument by 50; and, it has no name.  The anonymous\
equivalent of @code\{multiply-by-seven\} is:\
\
@smallexample\
(lambda (number) (* 7 number))\
@end smallexample\
\
@noindent\
(@xref\{defun, ,  The @code\{defun\} Special Form\}.)\
\
@need 1250\
@noindent\
If we want to multiply 3 by 7, we can write:\
\
@c !!! Clear print-postscript-figures if the computer formatting this\
@c     document is too small and cannot handle all the diagrams and figures.\
@c clear print-postscript-figures\
@c set print-postscript-figures\
@c lambda example diagram #1\
@ifnottex\
@smallexample\
@group\
(multiply-by-seven 3)\
 \\_______________/ ^\
         |         |\
      function  argument\
@end group\
@end smallexample\
@end ifnottex\
@ifset print-postscript-figures\
@sp 1\
@tex\
@center @image\{lambda-1\}\
%%%% old method of including an image\
% \\input /usr/local/lib/tex/inputs/psfig.tex\
% \\centerline\{\\psfig\{figure=/usr/local/lib/emacs/man/lambda-1.eps\}\}\
% \\catcode`\\@=0 %\
@end tex\
@sp 1\
@end ifset\
@ifclear print-postscript-figures\
@iftex\
@smallexample\
@group\
(multiply-by-seven 3)\
 \\_______________/ ^\
         |         |\
      function  argument\
@end group\
@end smallexample\
@end iftex\
@end ifclear\
\
@noindent\
This expression returns 21.\
\
@need 1250\
@noindent\
Similarly, we can write:\
\
@c lambda example diagram #2\
@ifnottex\
@smallexample\
@group\
((lambda (number) (* 7 number)) 3)\
 \\____________________________/ ^\
               |                |\
      anonymous function     argument\
@end group\
@end smallexample\
@end ifnottex\
@ifset print-postscript-figures\
@sp 1\
@tex\
@center @image\{lambda-2\}\
%%%% old method of including an image\
% \\input /usr/local/lib/tex/inputs/psfig.tex\
% \\centerline\{\\psfig\{figure=/usr/local/lib/emacs/man/lambda-2.eps\}\}\
% \\catcode`\\@=0 %\
@end tex\
@sp 1\
@end ifset\
@ifclear print-postscript-figures\
@iftex\
@smallexample\
@group\
((lambda (number) (* 7 number)) 3)\
 \\____________________________/ ^\
               |                |\
      anonymous function     argument\
@end group\
@end smallexample\
@end iftex\
@end ifclear\
\
@need 1250\
@noindent\
If we want to divide 100 by 50, we can write:\
\
@c lambda example diagram #3\
@ifnottex\
@smallexample\
@group\
((lambda (arg) (/ arg 50)) 100)\
 \\______________________/  \\_/\
             |              |\
    anonymous function   argument\
@end group\
@end smallexample\
@end ifnottex\
@ifset print-postscript-figures\
@sp 1\
@tex\
@center @image\{lambda-3\}\
%%%% old method of including an image\
% \\input /usr/local/lib/tex/inputs/psfig.tex\
% \\centerline\{\\psfig\{figure=/usr/local/lib/emacs/man/lambda-3.eps\}\}\
% \\catcode`\\@=0 %\
@end tex\
@sp 1\
@end ifset\
@ifclear print-postscript-figures\
@iftex\
@smallexample\
@group\
((lambda (arg) (/ arg 50)) 100)\
 \\______________________/  \\_/\
             |              |\
    anonymous function   argument\
@end group\
@end smallexample\
@end iftex\
@end ifclear\
\
@noindent\
This expression returns 2.  The 100 is passed to the function, which\
divides that number by 50.\
\
@xref\{Lambda Expressions, , Lambda Expressions, elisp, The GNU Emacs\
Lisp Reference Manual\}, for more about @code\{lambda\}.  Lisp and lambda\
expressions derive from the Lambda Calculus.\
\
@node mapcar, Another Bug, lambda, Print Whole Graph\
@appendixsubsec The @code\{mapcar\} Function\
@findex mapcar\
\
@code\{mapcar\} is a function that calls its first argument with each\
element of its second argument, in turn.  The second argument must be\
a sequence.\
\
The @samp\{map\} part of the name comes from the mathematical phrase,\
`mapping over a domain', meaning to apply a function to each of the\
elements in a domain.  The mathematical phrase is based on the\
metaphor of a surveyor walking, one step at a time, over an area he is\
mapping.  And @samp\{car\}, of course, comes from the Lisp notion of the\
first of a list.\
\
@need 1250\
@noindent\
For example,\
\
@smallexample\
@group\
(mapcar '1+ '(2 4 6))\
     @result\{\} (3 5 7)\
@end group\
@end smallexample\
\
@noindent\
The function @code\{1+\} which adds one to its argument, is executed on\
@emph\{each\} element of the list, and a new list is returned.\
\
Contrast this with @code\{apply\}, which applies its first argument to\
all the remaining.\
(@xref\{Readying a Graph, , Readying a Graph\}, for a explanation of\
@code\{apply\}.)\
\
@need 1250\
In the definition of @code\{one-fiftieth\}, the first argument is the\
anonymous function:\
\
@smallexample\
(lambda (arg) (/ arg 50))\
@end smallexample\
\
@noindent\
and the second argument is @code\{full-range\}, which will be bound to\
@code\{list-for-graph\}.\
\
@need 1250\
The whole expression looks like this:\
\
@smallexample\
(mapcar '(lambda (arg) (/ arg 50)) full-range))\
@end smallexample\
\
@xref\{Mapping Functions, , Mapping Functions, elisp, The GNU Emacs\
Lisp Reference Manual\}, for more about @code\{mapcar\}.\
\
Using the @code\{one-fiftieth\} function, we can generate a list in\
which each element is one-fiftieth the size of the corresponding\
element in @code\{list-for-graph\}.\
\
@smallexample\
@group\
(setq fiftieth-list-for-graph\
      (one-fiftieth list-for-graph))\
@end group\
@end smallexample\
\
@need 1250\
The resulting list looks like this:\
\
@smallexample\
@group\
(10 20 19 15 11 9 6 5 4 3 3 2 2\
1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 4)\
@end group\
@end smallexample\
\
@noindent\
This, we are almost ready to print!  (We also notice the loss of\
information: many of the higher ranges are 0, meaning that fewer than\
50 defuns had that many words or symbols---but not necessarily meaning\
that none had that many words or symbols.)\
\
@node Another Bug, Final printed graph, mapcar, Print Whole Graph\
@appendixsubsec Another Bug @dots\{\} Most Insidious\
@cindex Bug, most insidious type\
@cindex Insidious type of bug\
\
I said `almost ready to print'!  Of course, there is a bug in the\
@code\{print-graph\} function @dots\{\}  It has a @code\{vertical-step\}\
option, but not a @code\{horizontal-step\} option.  The\
@code\{top-of-range\} scale goes from 10 to 300 by tens.  But the\
@code\{print-graph\} function will print only by ones.\
\
This is a classic example of what some consider the most insidious\
type of bug, the bug of omission.  This is not the kind of bug you can\
find by studying the code, for it is not in the code; it is an omitted\
feature.  Your best actions are to try your program early and often;\
and try to arrange, as much as you can, to write code that is easy to\
understand and easy to change.  Try to be aware, whenever you can,\
that whatever you have written, @emph\{will\} be rewritten, if not soon,\
eventually.  A hard maxim to follow.\
\
It is the @code\{print-X-axis-numbered-line\} function that needs the\
work; and then the @code\{print-X-axis\} and the @code\{print-graph\}\
functions need to be adapted.  Not much needs to be done; there is one\
nicety: the numbers ought to line up under the tic marks.  This takes\
a little thought.\
\
@need 1250\
Here is the corrected @code\{print-X-axis-numbered-line\}:\
\
@smallexample\
@group\
(defun print-X-axis-numbered-line\
  (number-of-X-tics X-axis-leading-spaces\
   &optional horizontal-step)\
  "Print line of X-axis numbers"\
  (let ((number X-axis-label-spacing)\
        (horizontal-step (or horizontal-step 1)))\
@end group\
@group\
    (insert X-axis-leading-spaces)\
    ;; @r\{Delete extra leading spaces.\}\
    (delete-char\
     (- (1-\
         (length (number-to-string horizontal-step)))))\
    (insert (concat\
             (make-string\
@end group\
@group\
              ;; @r\{Insert white space.\}\
              (-  (* symbol-width\
                     X-axis-label-spacing)\
                  (1-\
                   (length\
                    (number-to-string horizontal-step)))\
                  2)\
              ? )\
             (number-to-string\
              (* number horizontal-step))))\
@end group\
@group\
    ;; @r\{Insert remaining numbers.\}\
    (setq number (+ number X-axis-label-spacing))\
    (while (> number-of-X-tics 1)\
      (insert (X-axis-element\
               (* number horizontal-step)))\
      (setq number (+ number X-axis-label-spacing))\
      (setq number-of-X-tics (1- number-of-X-tics)))))\
@end group\
@end smallexample\
\
@need 1500\
If you are reading this in Info, you can see the new versions of\
@code\{print-X-axis\} @code\{print-graph\} and evaluate them.  If you are\
reading this in a printed book, you can see the changed lines here\
(the full text is too much to print).\
\
@iftex\
@smallexample\
@group\
(defun print-X-axis (numbers-list horizontal-step)\
  @dots\{\}\
    (print-X-axis-numbered-line\
     tic-number leading-spaces horizontal-step))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun print-graph\
  (numbers-list\
   &optional vertical-step horizontal-step)\
  @dots\{\}\
    (print-X-axis numbers-list horizontal-step))\
@end group\
@end smallexample\
@end iftex\
\
@ifnottex\
@smallexample\
@group\
(defun print-X-axis (numbers-list horizontal-step)\
  "Print X axis labels to length of NUMBERS-LIST.\
Optionally, HORIZONTAL-STEP, a positive integer,\
specifies how much an X  axis label increments for\
each column."\
@end group\
@group\
;; Value of symbol-width and full-Y-label-width\
;; are passed by `print-graph'.\
  (let* ((leading-spaces\
          (make-string full-Y-label-width ? ))\
       ;; symbol-width @r\{is provided by\} graph-body-print\
       (tic-width (* symbol-width X-axis-label-spacing))\
       (X-length (length numbers-list))\
@end group\
@group\
       (X-tic\
        (concat\
         (make-string\
          ;; @r\{Make a string of blanks.\}\
          (-  (* symbol-width X-axis-label-spacing)\
              (length X-axis-tic-symbol))\
          ? )\
@end group\
@group\
         ;; @r\{Concatenate blanks with tic symbol.\}\
         X-axis-tic-symbol))\
       (tic-number\
        (if (zerop (% X-length tic-width))\
            (/ X-length tic-width)\
          (1+ (/ X-length tic-width)))))\
@end group\
\
@group\
    (print-X-axis-tic-line\
     tic-number leading-spaces X-tic)\
    (insert "\\n")\
    (print-X-axis-numbered-line\
     tic-number leading-spaces horizontal-step)))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun print-graph\
  (numbers-list &optional vertical-step horizontal-step)\
  "Print labelled bar graph of the NUMBERS-LIST.\
The numbers-list consists of the Y-axis values.\
@end group\
\
@group\
Optionally, VERTICAL-STEP, a positive integer,\
specifies how much a Y axis label increments for\
each line.  For example, a step of 5 means that\
each row is five units.\
@end group\
\
@group\
Optionally, HORIZONTAL-STEP, a positive integer,\
specifies how much an X  axis label increments for\
each column."\
  (let* ((symbol-width (length graph-blank))\
         ;; @code\{height\} @r\{is both the largest number\}\
         ;; @r\{and the number with the most digits.\}\
         (height (apply 'max numbers-list))\
@end group\
@group\
         (height-of-top-line\
          (if (zerop (% height Y-axis-label-spacing))\
              height\
            ;; @r\{else\}\
            (* (1+ (/ height Y-axis-label-spacing))\
               Y-axis-label-spacing)))\
@end group\
@group\
         (vertical-step (or vertical-step 1))\
         (full-Y-label-width\
          (length\
           (concat\
            (number-to-string\
             (* height-of-top-line vertical-step))\
            Y-axis-tic))))\
@end group\
@group\
    (print-Y-axis\
     height-of-top-line full-Y-label-width vertical-step)\
    (graph-body-print\
        numbers-list height-of-top-line symbol-width)\
    (print-X-axis numbers-list horizontal-step)))\
@end group\
@end smallexample\
@end ifnottex\
\
@c qqq\
@ignore\
Graphing Definitions Re-listed\
\
@need 1250\
Here are all the graphing definitions in their final form:\
\
@smallexample\
@group\
(defvar top-of-ranges\
 '(10  20  30  40  50\
   60  70  80  90 100\
  110 120 130 140 150\
  160 170 180 190 200\
  210 220 230 240 250)\
 "List specifying ranges for `defuns-per-range'.")\
@end group\
\
@group\
(defvar graph-symbol "*"\
  "String used as symbol in graph, usually an asterisk.")\
@end group\
\
@group\
(defvar graph-blank " "\
  "String used as blank in graph, usually a blank space.\
graph-blank must be the same number of columns wide\
as graph-symbol.")\
@end group\
\
@group\
(defvar Y-axis-tic " - "\
   "String that follows number in a Y axis label.")\
@end group\
\
@group\
(defvar Y-axis-label-spacing 5\
  "Number of lines from one Y axis label to next.")\
@end group\
\
@group\
(defvar X-axis-tic-symbol "|"\
  "String to insert to point to a column in X axis.")\
@end group\
\
@group\
(defvar X-axis-label-spacing\
  (if (boundp 'graph-blank)\
      (* 5 (length graph-blank)) 5)\
  "Number of units from one X axis label to next.")\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun count-words-in-defun ()\
  "Return the number of words and symbols in a defun."\
  (beginning-of-defun)\
  (let ((count 0)\
        (end (save-excursion (end-of-defun) (point))))\
@end group\
\
@group\
    (while\
        (and (< (point) end)\
             (re-search-forward\
              "\\\\(\\\\w\\\\|\\\\s_\\\\)+[^ \\t\\n]*[ \\t\\n]*"\
              end t))\
      (setq count (1+ count)))\
    count))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun lengths-list-file (filename)\
  "Return list of definitions' lengths within FILE.\
The returned list is a list of numbers.\
Each number is the number of words or\
symbols in one function definition."\
@end group\
\
@group\
  (message "Working on `%s' ... " filename)\
  (save-excursion\
    (let ((buffer (find-file-noselect filename))\
          (lengths-list))\
      (set-buffer buffer)\
      (setq buffer-read-only t)\
      (widen)\
      (goto-char (point-min))\
@end group\
\
@group\
      (while (re-search-forward "^(defun" nil t)\
        (setq lengths-list\
              (cons (count-words-in-defun) lengths-list)))\
      (kill-buffer buffer)\
      lengths-list)))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun lengths-list-many-files (list-of-files)\
  "Return list of lengths of defuns in LIST-OF-FILES."\
  (let (lengths-list)\
;;; @r\{true-or-false-test\}\
    (while list-of-files\
      (setq lengths-list\
            (append\
             lengths-list\
@end group\
@group\
;;; @r\{Generate a lengths' list.\}\
             (lengths-list-file\
              (expand-file-name (car list-of-files)))))\
;;; @r\{Make files' list shorter.\}\
      (setq list-of-files (cdr list-of-files)))\
;;; @r\{Return final value of lengths' list.\}\
    lengths-list))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun defuns-per-range (sorted-lengths top-of-ranges)\
  "SORTED-LENGTHS defuns in each TOP-OF-RANGES range."\
  (let ((top-of-range (car top-of-ranges))\
        (number-within-range 0)\
        defuns-per-range-list)\
@end group\
\
@group\
    ;; @r\{Outer loop.\}\
    (while top-of-ranges\
\
      ;; @r\{Inner loop.\}\
      (while (and\
              ;; @r\{Need number for numeric test.\}\
              (car sorted-lengths)\
              (< (car sorted-lengths) top-of-range))\
\
        ;; @r\{Count number of definitions within current range.\}\
        (setq number-within-range (1+ number-within-range))\
        (setq sorted-lengths (cdr sorted-lengths)))\
@end group\
\
@group\
      ;; @r\{Exit inner loop but remain within outer loop.\}\
\
      (setq defuns-per-range-list\
            (cons number-within-range defuns-per-range-list))\
      (setq number-within-range 0)      ; @r\{Reset count to zero.\}\
\
      ;; @r\{Move to next range.\}\
      (setq top-of-ranges (cdr top-of-ranges))\
      ;; @r\{Specify next top of range value.\}\
      (setq top-of-range (car top-of-ranges)))\
@end group\
\
@group\
    ;; @r\{Exit outer loop and count the number of defuns larger than\}\
    ;; @r\{  the largest top-of-range value.\}\
    (setq defuns-per-range-list\
          (cons\
           (length sorted-lengths)\
           defuns-per-range-list))\
\
    ;; @r\{Return a list of the number of definitions within each range,\}\
    ;; @r\{  smallest to largest.\}\
    (nreverse defuns-per-range-list)))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun column-of-graph (max-graph-height actual-height)\
  "Return list of MAX-GRAPH-HEIGHT strings;\
ACTUAL-HEIGHT are graph-symbols.\
The graph-symbols are contiguous entries at the end\
of the list.\
The list will be inserted as one column of a graph.\
The strings are either graph-blank or graph-symbol."\
@end group\
\
@group\
  (let ((insert-list nil)\
        (number-of-top-blanks\
         (- max-graph-height actual-height)))\
\
    ;; @r\{Fill in @code\{graph-symbols\}.\}\
    (while (> actual-height 0)\
      (setq insert-list (cons graph-symbol insert-list))\
      (setq actual-height (1- actual-height)))\
@end group\
\
@group\
    ;; @r\{Fill in @code\{graph-blanks\}.\}\
    (while (> number-of-top-blanks 0)\
      (setq insert-list (cons graph-blank insert-list))\
      (setq number-of-top-blanks\
            (1- number-of-top-blanks)))\
\
    ;; @r\{Return whole list.\}\
    insert-list))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun Y-axis-element (number full-Y-label-width)\
  "Construct a NUMBERed label element.\
A numbered element looks like this `  5 - ',\
and is padded as needed so all line up with\
the element for the largest number."\
@end group\
@group\
  (let* ((leading-spaces\
         (- full-Y-label-width\
            (length\
             (concat (number-to-string number)\
                     Y-axis-tic)))))\
@end group\
@group\
    (concat\
     (make-string leading-spaces ? )\
     (number-to-string number)\
     Y-axis-tic)))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun print-Y-axis\
  (height full-Y-label-width &optional vertical-step)\
  "Insert Y axis by HEIGHT and FULL-Y-LABEL-WIDTH.\
Height must be the  maximum height of the graph.\
Full width is the width of the highest label element.\
Optionally, print according to VERTICAL-STEP."\
@end group\
@group\
;; Value of height and full-Y-label-width\
;; are passed by `print-graph'.\
  (let ((start (point)))\
    (insert-rectangle\
     (Y-axis-column height full-Y-label-width vertical-step))\
@end group\
@group\
    ;; @r\{Place point ready for inserting graph.\}\
    (goto-char start)\
    ;; @r\{Move point forward by value of\} full-Y-label-width\
    (forward-char full-Y-label-width)))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun print-X-axis-tic-line\
  (number-of-X-tics X-axis-leading-spaces X-axis-tic-element)\
  "Print ticks for X axis."\
    (insert X-axis-leading-spaces)\
    (insert X-axis-tic-symbol)  ; @r\{Under first column.\}\
@end group\
@group\
    ;; @r\{Insert second tic in the right spot.\}\
    (insert (concat\
             (make-string\
              (-  (* symbol-width X-axis-label-spacing)\
                  ;; @r\{Insert white space up to second tic symbol.\}\
                  (* 2 (length X-axis-tic-symbol)))\
              ? )\
             X-axis-tic-symbol))\
@end group\
@group\
    ;; @r\{Insert remaining ticks.\}\
    (while (> number-of-X-tics 1)\
      (insert X-axis-tic-element)\
      (setq number-of-X-tics (1- number-of-X-tics))))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun X-axis-element (number)\
  "Construct a numbered X axis element."\
  (let ((leading-spaces\
         (-  (* symbol-width X-axis-label-spacing)\
             (length (number-to-string number)))))\
    (concat (make-string leading-spaces ? )\
            (number-to-string number))))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun graph-body-print (numbers-list height symbol-width)\
  "Print a bar graph of the NUMBERS-LIST.\
The numbers-list consists of the Y-axis values.\
HEIGHT is maximum height of graph.\
SYMBOL-WIDTH is number of each column."\
@end group\
@group\
  (let (from-position)\
    (while numbers-list\
      (setq from-position (point))\
      (insert-rectangle\
       (column-of-graph height (car numbers-list)))\
      (goto-char from-position)\
      (forward-char symbol-width)\
@end group\
@group\
      ;; @r\{Draw graph column by column.\}\
      (sit-for 0)\
      (setq numbers-list (cdr numbers-list)))\
    ;; @r\{Place point for X axis labels.\}\
    (forward-line height)\
    (insert "\\n")))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun Y-axis-column\
  (height width-of-label &optional vertical-step)\
  "Construct list of labels for Y axis.\
HEIGHT is maximum height of graph.\
WIDTH-OF-LABEL is maximum width of label.\
@end group\
@group\
VERTICAL-STEP, an option, is a positive integer\
that specifies how much a Y axis label increments\
for each line.  For example, a step of 5 means\
that each line is five units of the graph."\
  (let (Y-axis\
        (number-per-line (or vertical-step 1)))\
@end group\
@group\
    (while (> height 1)\
      (if (zerop (% height Y-axis-label-spacing))\
          ;; @r\{Insert label.\}\
          (setq Y-axis\
                (cons\
                 (Y-axis-element\
                  (* height number-per-line)\
                  width-of-label)\
                 Y-axis))\
@end group\
@group\
        ;; @r\{Else, insert blanks.\}\
        (setq Y-axis\
              (cons\
               (make-string width-of-label ? )\
               Y-axis)))\
      (setq height (1- height)))\
@end group\
@group\
    ;; @r\{Insert base line.\}\
    (setq Y-axis (cons (Y-axis-element\
                        (or vertical-step 1)\
                        width-of-label)\
                       Y-axis))\
    (nreverse Y-axis)))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun print-X-axis-numbered-line\
  (number-of-X-tics X-axis-leading-spaces\
   &optional horizontal-step)\
  "Print line of X-axis numbers"\
  (let ((number X-axis-label-spacing)\
        (horizontal-step (or horizontal-step 1)))\
@end group\
@group\
    (insert X-axis-leading-spaces)\
    ;; line up number\
    (delete-char (- (1- (length (number-to-string horizontal-step)))))\
    (insert (concat\
             (make-string\
              ;; @r\{Insert white space up to next number.\}\
              (-  (* symbol-width X-axis-label-spacing)\
                  (1- (length (number-to-string horizontal-step)))\
                  2)\
              ? )\
             (number-to-string (* number horizontal-step))))\
@end group\
@group\
    ;; @r\{Insert remaining numbers.\}\
    (setq number (+ number X-axis-label-spacing))\
    (while (> number-of-X-tics 1)\
      (insert (X-axis-element (* number horizontal-step)))\
      (setq number (+ number X-axis-label-spacing))\
      (setq number-of-X-tics (1- number-of-X-tics)))))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun print-X-axis (numbers-list horizontal-step)\
  "Print X axis labels to length of NUMBERS-LIST.\
Optionally, HORIZONTAL-STEP, a positive integer,\
specifies how much an X  axis label increments for\
each column."\
@end group\
@group\
;; Value of symbol-width and full-Y-label-width\
;; are passed by `print-graph'.\
  (let* ((leading-spaces\
          (make-string full-Y-label-width ? ))\
       ;; symbol-width @r\{is provided by\} graph-body-print\
       (tic-width (* symbol-width X-axis-label-spacing))\
       (X-length (length numbers-list))\
@end group\
@group\
       (X-tic\
        (concat\
         (make-string\
          ;; @r\{Make a string of blanks.\}\
          (-  (* symbol-width X-axis-label-spacing)\
              (length X-axis-tic-symbol))\
          ? )\
@end group\
@group\
         ;; @r\{Concatenate blanks with tic symbol.\}\
         X-axis-tic-symbol))\
       (tic-number\
        (if (zerop (% X-length tic-width))\
            (/ X-length tic-width)\
          (1+ (/ X-length tic-width)))))\
@end group\
\
@group\
    (print-X-axis-tic-line\
     tic-number leading-spaces X-tic)\
    (insert "\\n")\
    (print-X-axis-numbered-line\
     tic-number leading-spaces horizontal-step)))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun one-fiftieth (full-range)\
  "Return list, each number of which is 1/50th previous."\
 (mapcar '(lambda (arg) (/ arg 50)) full-range))\
@end group\
@end smallexample\
\
@smallexample\
@group\
(defun print-graph\
  (numbers-list &optional vertical-step horizontal-step)\
  "Print labelled bar graph of the NUMBERS-LIST.\
The numbers-list consists of the Y-axis values.\
@end group\
\
@group\
Optionally, VERTICAL-STEP, a positive integer,\
specifies how much a Y axis label increments for\
each line.  For example, a step of 5 means that\
each row is five units.\
@end group\
\
@group\
Optionally, HORIZONTAL-STEP, a positive integer,\
specifies how much an X  axis label increments for\
each column."\
  (let* ((symbol-width (length graph-blank))\
         ;; @code\{height\} @r\{is both the largest number\}\
         ;; @r\{and the number with the most digits.\}\
         (height (apply 'max numbers-list))\
@end group\
@group\
         (height-of-top-line\
          (if (zerop (% height Y-axis-label-spacing))\
              height\
            ;; @r\{else\}\
            (* (1+ (/ height Y-axis-label-spacing))\
               Y-axis-label-spacing)))\
@end group\
@group\
         (vertical-step (or vertical-step 1))\
         (full-Y-label-width\
          (length\
           (concat\
            (number-to-string\
             (* height-of-top-line vertical-step))\
            Y-axis-tic))))\
@end group\
@group\
\
    (print-Y-axis\
     height-of-top-line full-Y-label-width vertical-step)\
    (graph-body-print\
        numbers-list height-of-top-line symbol-width)\
    (print-X-axis numbers-list horizontal-step)))\
@end group\
@end smallexample\
@c qqq\
@end ignore\
\
@page\
@node Final printed graph,  , Another Bug, Print Whole Graph\
@appendixsubsec The Printed Graph\
\
When made and installed, you can call the @code\{print-graph\} command\
like this:\
@sp 1\
\
@smallexample\
@group\
(print-graph fiftieth-list-for-graph 50 10)\
@end group\
@end smallexample\
@sp 1\
\
@noindent\
Here is the graph:\
@sp 2\
\
@smallexample\
@group\
1000 -  *\
        **\
        **\
        **\
        **\
 750 -  ***\
        ***\
        ***\
        ***\
        ****\
 500 - *****\
       ******\
       ******\
       ******\
       *******\
 250 - ********\
       *********                     *\
       ***********                   *\
       *************                 *\
  50 - ***************** *           *\
       |   |    |    |    |    |    |    |\
      10  50  100  150  200  250  300  350\
@end group\
@end smallexample\
\
@sp 2\
\
@noindent\
The largest group of functions contain 10 -- 19 words and symbols each.\
\
@node Free Software and Free Manuals, GNU Free Documentation License, Full Graph, Top\
@appendix Free Software and Free Manuals\
\
@strong\{by Richard M. Stallman\}\
@sp 1\
\
The biggest deficiency in free operating systems is not in the\
software---it is the lack of good free manuals that we can include in\
these systems.  Many of our most important programs do not come with\
full manuals.  Documentation is an essential part of any software\
package; when an important free software package does not come with a\
free manual, that is a major gap.  We have many such gaps today.\
\
Once upon a time, many years ago, I thought I would learn Perl.  I got\
a copy of a free manual, but I found it hard to read.  When I asked\
Perl users about alternatives, they told me that there were better\
introductory manuals---but those were not free.\
\
Why was this?  The authors of the good manuals had written them for\
O'Reilly Associates, which published them with restrictive terms---no\
copying, no modification, source files not available---which exclude\
them from the free software community.\
\
That wasn't the first time this sort of thing has happened, and (to\
our community's great loss) it was far from the last.  Proprietary\
manual publishers have enticed a great many authors to restrict their\
manuals since then.  Many times I have heard a GNU user eagerly tell me\
about a manual that he is writing, with which he expects to help the\
GNU project---and then had my hopes dashed, as he proceeded to explain\
that he had signed a contract with a publisher that would restrict it\
so that we cannot use it.\
\
Given that writing good English is a rare skill among programmers, we\
can ill afford to lose manuals this way.\
\
Free documentation, like free software, is a matter of freedom, not\
price.  The problem with these manuals was not that O'Reilly Associates\
charged a price for printed copies---that in itself is fine.  The Free\
Software Foundation @uref\{http://shop.fsf.org, sells printed copies\} of\
free @uref\{http://www.gnu.org/doc/doc.html, GNU manuals\}, too.\
But GNU manuals are available in source code form, while these manuals\
are available only on paper.  GNU manuals come with permission to copy\
and modify; the Perl manuals do not.  These restrictions are the\
problems.\
\
The criterion for a free manual is pretty much the same as for free\
software: it is a matter of giving all users certain\
freedoms.  Redistribution (including commercial redistribution) must be\
permitted, so that the manual can accompany every copy of the program,\
on-line or on paper.  Permission for modification is crucial too.\
\
As a general rule, I don't believe that it is essential for people to\
have permission to modify all sorts of articles and books.  The issues\
for writings are not necessarily the same as those for software.  For\
example, I don't think you or I are obliged to give permission to\
modify articles like this one, which describe our actions and our\
views.\
\
But there is a particular reason why the freedom to modify is crucial\
for documentation for free software.  When people exercise their right\
to modify the software, and add or change its features, if they are\
conscientious they will change the manual too---so they can provide\
accurate and usable documentation with the modified program.  A manual\
which forbids programmers to be conscientious and finish the job, or\
more precisely requires them to write a new manual from scratch if\
they change the program, does not fill our community's needs.\
\
While a blanket prohibition on modification is unacceptable, some\
kinds of limits on the method of modification pose no problem.  For\
example, requirements to preserve the original author's copyright\
notice, the distribution terms, or the list of authors, are ok.  It is\
also no problem to require modified versions to include notice that\
they were modified, even to have entire sections that may not be\
deleted or changed, as long as these sections deal with nontechnical\
topics.  (Some GNU manuals have them.)\
\
These kinds of restrictions are not a problem because, as a practical\
matter, they don't stop the conscientious programmer from adapting the\
manual to fit the modified program.  In other words, they don't block\
the free software community from making full use of the manual.\
\
However, it must be possible to modify all the technical content of\
the manual, and then distribute the result in all the usual media,\
through all the usual channels; otherwise, the restrictions do block\
the community, the manual is not free, and so we need another manual.\
\
Unfortunately, it is often hard to find someone to write another\
manual when a proprietary manual exists.  The obstacle is that many\
users think that a proprietary manual is good enough---so they don't\
see the need to write a free manual.  They do not see that the free\
operating system has a gap that needs filling.\
\
Why do users think that proprietary manuals are good enough? Some have\
not considered the issue.  I hope this article will do something to\
change that.\
\
Other users consider proprietary manuals acceptable for the same\
reason so many people consider proprietary software acceptable: they\
judge in purely practical terms, not using freedom as a\
criterion.  These people are entitled to their opinions, but since\
those opinions spring from values which do not include freedom, they\
are no guide for those of us who do value freedom.\
\
Please spread the word about this issue.  We continue to lose manuals\
to proprietary publishing.  If we spread the word that proprietary\
manuals are not sufficient, perhaps the next person who wants to help\
GNU by writing documentation will realize, before it is too late, that\
he must above all make it free.\
\
We can also encourage commercial publishers to sell free, copylefted\
manuals instead of proprietary ones.  One way you can help this is to\
check the distribution terms of a manual before you buy it, and prefer\
copylefted manuals to non-copylefted ones.\
\
@sp 2\
@noindent\
Note: The Free Software Foundation maintains a page on its Web site\
that lists free books available from other publishers:@*\
@uref\{http://www.gnu.org/doc/other-free-books.html\}\
\
@node GNU Free Documentation License, Index, Free Software and Free Manuals, Top\
@appendix GNU Free Documentation License\
\
@cindex FDL, GNU Free Documentation License\
@include doclicense.texi\
\
@node Index, About the Author, GNU Free Documentation License, Top\
@comment  node-name,  next,  previous,  up\
@unnumbered Index\
\
@ignore\
MENU ENTRY: NODE NAME.\
@end ignore\
\
@printindex cp\
\
@iftex\
@c Place biographical information on right-hand (verso) page\
\
@tex\
\\par\\vfill\\supereject\
\\ifodd\\pageno\
    \\global\\evenheadline=\{\\hfil\} \\global\\evenfootline=\{\\hfil\}\
    \\global\\oddheadline=\{\\hfil\} \\global\\oddfootline=\{\\hfil\}\
    %\\page\\hbox\{\}\\page\
\\else\
%    \\par\\vfill\\supereject\
    \\global\\evenheadline=\{\\hfil\} \\global\\evenfootline=\{\\hfil\}\
    \\global\\oddheadline=\{\\hfil\} \\global\\oddfootline=\{\\hfil\}\
    %\\page\\hbox\{\}%\\page\
    %\\page\\hbox\{\}%\\page\
\\fi\
@end tex\
\
@c page\
@w\{ \}\
\
@c ================ Biographical information ================\
\
@w\{ \}\
@sp 8\
@center About the Author\
@sp 1\
@end iftex\
\
@ifnottex\
@node About the Author,  , Index, Top\
@unnumbered About the Author\
@end ifnottex\
\
@quotation\
Robert J. Chassell has worked with GNU Emacs since 1985.  He writes\
and edits, teaches Emacs and Emacs Lisp, and speaks throughout the\
world on software freedom.  Chassell was a founding Director and\
Treasurer of the Free Software Foundation, Inc.  He is co-author of\
the @cite\{Texinfo\} manual, and has edited more than a dozen other\
books.  He graduated from Cambridge University, in England.  He has an\
abiding interest in social and economic history and flies his own\
airplane.\
@end quotation\
\
@c @page\
@c @w\{ \}\
@c\
@c @c Prevent page number on blank verso, so eject it first.\
@c @tex\
@c \\par\\vfill\\supereject\
@c @end tex\
\
@c @iftex\
@c @headings off\
@c @evenheading @thispage @| @| @thistitle\
@c @oddheading            @| @| @thispage\
@c @end iftex\
\
@bye\
\
@ignore\
   arch-tag: da1a2154-531f-43a8-8e33-fc7faad10acf\
@end ignore\
}