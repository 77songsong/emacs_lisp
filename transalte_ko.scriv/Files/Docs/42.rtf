{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node Install, Interactive, defun, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section Install a Function Definition\
@cindex Install a Function Definition\
@cindex Definition installation\
@cindex Function definition installation\
\
If you are reading this inside of Info in Emacs, you can try out the\
@code\{multiply-by-seven\} function by first evaluating the function\
definition and then evaluating @code\{(multiply-by-seven 3)\}.  A copy of\
the function definition follows.  Place the cursor after the last\
parenthesis of the function definition and type @kbd\{C-x C-e\}.  When you\
do this, @code\{multiply-by-seven\} will appear in the echo area.  (What\
this means is that when a function definition is evaluated, the value it\
returns is the name of the defined function.)  At the same time, this\
action installs the function definition.\
\
@smallexample\
@group\
(defun multiply-by-seven (number)\
  "Multiply NUMBER by seven."\
  (* 7 number))\
@end group\
@end smallexample\
\
@noindent\
By evaluating this @code\{defun\}, you have just installed\
@code\{multiply-by-seven\} in Emacs.  The function is now just as much a\
part of Emacs as @code\{forward-word\} or any other editing function you\
use.  (@code\{multiply-by-seven\} will stay installed until you quit\
Emacs.  To reload code automatically whenever you start Emacs, see\
@ref\{Permanent Installation, , Installing Code Permanently\}.)\
\
@menu\
* Effect of installation::\
* Change a defun::              How to change a function definition.\
@end menu\
\
@node Effect of installation, Change a defun, Install, Install\
@ifnottex\
@unnumberedsubsec The effect of installation\
@end ifnottex\
\
You can see the effect of installing @code\{multiply-by-seven\} by\
evaluating the following sample.  Place the cursor after the following\
expression and type @kbd\{C-x C-e\}.  The number 21 will appear in the\
echo area.\
\
@smallexample\
(multiply-by-seven 3)\
@end smallexample\
\
If you wish, you can read the documentation for the function by typing\
@kbd\{C-h f\} (@code\{describe-function\}) and then the name of the\
function, @code\{multiply-by-seven\}.  When you do this, a\
@file\{*Help*\} window will appear on your screen that says:\
\
@smallexample\
@group\
multiply-by-seven is a Lisp function.\
(multiply-by-seven NUMBER)\
\
Multiply NUMBER by seven.\
@end group\
@end smallexample\
\
@noindent\
(To return to a single window on your screen, type @kbd\{C-x 1\}.)\
\
@node Change a defun,  , Effect of installation, Install\
@comment  node-name,  next,  previous,  up\
@subsection Change a Function Definition\
@cindex Changing a function definition\
@cindex Function definition, how to change\
@cindex Definition, how to change\
\
If you want to change the code in @code\{multiply-by-seven\}, just rewrite\
it.  To install the new version in place of the old one, evaluate the\
function definition again.  This is how you modify code in Emacs.  It is\
very simple.\
\
As an example, you can change the @code\{multiply-by-seven\} function to\
add the number to itself seven times instead of multiplying the number\
by seven.  It produces the same answer, but by a different path.  At\
the same time, we will add a comment to the code; a comment is text\
that the Lisp interpreter ignores, but that a human reader may find\
useful or enlightening.  The comment is that this is the ``second\
version''.\
\
@smallexample\
@group\
(defun multiply-by-seven (number)       ; @r\{Second version.\}\
  "Multiply NUMBER by seven."\
  (+ number number number number number number number))\
@end group\
@end smallexample\
\
@cindex Comments in Lisp code\
The comment follows a semicolon, @samp\{;\}.  In Lisp, everything on a\
line that follows a semicolon is a comment.  The end of the line is the\
end of the comment.  To stretch a comment over two or more lines, begin\
each line with a semicolon.\
\
@xref\{Beginning a .emacs File, , Beginning a @file\{.emacs\}\
File\}, and @ref\{Comments, , Comments, elisp, The GNU Emacs Lisp\
Reference Manual\}, for more about comments.\
\
You can install this version of the @code\{multiply-by-seven\} function by\
evaluating it in the same way you evaluated the first function: place\
the cursor after the last parenthesis and type @kbd\{C-x C-e\}.\
\
In summary, this is how you write code in Emacs Lisp: you write a\
function; install it; test it; and then make fixes or enhancements and\
install it again.}