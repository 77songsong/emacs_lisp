{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node X11 Colors, Miscellaneous, Simple Extension, Emacs Initialization\
@section X11 Colors\
\
You can specify colors when you use Emacs with the MIT X Windowing\
system.\
\
I dislike the default colors and specify my own.\
\
@need 1250\
Here are the expressions in my @file\{.emacs\}\
file that set values:\
\
@smallexample\
@group\
;; Set cursor color\
(set-cursor-color "white")\
\
;; Set mouse color\
(set-mouse-color "white")\
\
;; Set foreground and background\
(set-foreground-color "white")\
(set-background-color "darkblue")\
@end group\
\
@group\
;;; Set highlighting colors for isearch and drag\
(set-face-foreground 'highlight "white")\
(set-face-background 'highlight "blue")\
@end group\
\
@group\
(set-face-foreground 'region "cyan")\
(set-face-background 'region "blue")\
@end group\
\
@group\
(set-face-foreground 'secondary-selection "skyblue")\
(set-face-background 'secondary-selection "darkblue")\
@end group\
\
@group\
;; Set calendar highlighting colors\
(setq calendar-load-hook\
      '(lambda ()\
         (set-face-foreground 'diary-face   "skyblue")\
         (set-face-background 'holiday-face "slate blue")\
         (set-face-foreground 'holiday-face "white")))\
@end group\
@end smallexample\
\
The various shades of blue soothe my eye and prevent me from seeing\
the screen flicker.\
\
Alternatively, I could have set my specifications in various X\
initialization files.  For example, I could set the foreground,\
background, cursor, and pointer (i.e., mouse) colors in my\
@file\{~/.Xresources\} file like this:\
\
@smallexample\
@group\
Emacs*foreground:   white\
Emacs*background:   darkblue\
Emacs*cursorColor:  white\
Emacs*pointerColor: white\
@end group\
@end smallexample\
\
In any event, since it is not part of Emacs, I set the root color of\
my X window in my @file\{~/.xinitrc\} file, like this@footnote\{I also\
run more modern window managers, such as Enlightenment, Gnome, or KDE;\
in those cases, I often specify an image rather than a plain color.\}:\
\
@smallexample\
xsetroot -solid Navy -fg white &\
@end smallexample\
\
@need 1700\
@node Miscellaneous, Mode Line, X11 Colors, Emacs Initialization\
@section Miscellaneous Settings for a @file\{.emacs\} File\
\
@need 1250\
Here are a few miscellaneous settings:\
@sp 1\
\
@itemize @minus\
@item\
Set the shape and color of the mouse cursor:\
\
@smallexample\
@group\
; Cursor shapes are defined in\
; `/usr/include/X11/cursorfont.h';\
; for example, the `target' cursor is number 128;\
; the `top_left_arrow' cursor is number 132.\
@end group\
\
@group\
(let ((mpointer (x-get-resource "*mpointer"\
                                "*emacs*mpointer")))\
  ;; If you have not set your mouse pointer\
  ;;     then set it, otherwise leave as is:\
  (if (eq mpointer nil)\
      (setq mpointer "132")) ; top_left_arrow\
@end group\
@group\
  (setq x-pointer-shape (string-to-int mpointer))\
  (set-mouse-color "white"))\
@end group\
@end smallexample\
\
@item\
Or you can set the values of a variety of features in an alist, like\
this:\
\
@smallexample\
@group\
(setq-default\
 default-frame-alist\
 '((cursor-color . "white")\
   (mouse-color . "white")\
   (foreground-color . "white")\
   (background-color . "DodgerBlue4")\
   ;; (cursor-type . bar)\
   (cursor-type . box)\
@end group\
@group\
   (tool-bar-lines . 0)\
   (menu-bar-lines . 1)\
   (width . 80)\
   (height . 58)\
   (font .\
         "-Misc-Fixed-Medium-R-Normal--20-200-75-75-C-100-ISO8859-1")\
   ))\
@end group\
@end smallexample\
\
@item\
Convert @kbd\{@key\{CTRL\}-h\} into @key\{DEL\} and @key\{DEL\}\
into @kbd\{@key\{CTRL\}-h\}.@*\
(Some older keyboards needed this, although I have not seen the\
problem recently.)\
\
@smallexample\
@group\
;; Translate `C-h' to <DEL>.\
; (keyboard-translate ?\\C-h ?\\C-?)\
\
;; Translate <DEL> to `C-h'.\
(keyboard-translate ?\\C-? ?\\C-h)\
@end group\
@end smallexample\
\
@item Turn off a blinking cursor!\
\
@smallexample\
@group\
(if (fboundp 'blink-cursor-mode)\
    (blink-cursor-mode -1))\
@end group\
@end smallexample\
\
@noindent\
or start GNU Emacs with the command @code\{emacs -nbc\}.\
\
@need 1250\
@item When using `grep'@*\
@samp\{-i\}@w\{  \}   Ignore case distinctions@*\
@samp\{-n\}@w\{  \}   Prefix each line of output with line number@*\
@samp\{-H\}@w\{  \}   Print the filename for each match.@*\
@samp\{-e\}@w\{  \}   Protect patterns beginning with a hyphen character, @samp\{-\}\
\
@smallexample\
(setq grep-command "grep -i -nH -e ")\
@end smallexample\
\
@ignore\
@c Evidently, no longer needed in GNU Emacs 22\
\
item Automatically uncompress compressed files when visiting them\
\
smallexample\
(load "uncompress")\
end smallexample\
\
@end ignore\
\
@item Find an existing buffer, even if it has a different name@*\
This avoids problems with symbolic links.\
\
@smallexample\
(setq find-file-existing-other-name t)\
@end smallexample\
\
@item Set your language environment and default input method\
\
@smallexample\
@group\
(set-language-environment "latin-1")\
;; Remember you can enable or disable multilingual text input\
;; with the @code\{toggle-input-method'\} (@kbd\{C-\\\}) command\
(setq default-input-method "latin-1-prefix")\
@end group\
@end smallexample\
\
If you want to write with Chinese `GB' characters, set this instead:\
\
@smallexample\
@group\
(set-language-environment "Chinese-GB")\
(setq default-input-method "chinese-tonepy")\
@end group\
@end smallexample\
@end itemize\
\
@subsubheading Fixing Unpleasant Key Bindings\
@cindex Key bindings, fixing\
@cindex Bindings, key, fixing unpleasant\
\
Some systems bind keys unpleasantly.  Sometimes, for example, the\
@key\{CTRL\} key appears in an awkward spot rather than at the far left\
of the home row.\
\
Usually, when people fix these sorts of keybindings, they do not\
change their @file\{~/.emacs\} file.  Instead, they bind the proper keys\
on their consoles with the @code\{loadkeys\} or @code\{install-keymap\}\
commands in their boot script and then include @code\{xmodmap\} commands\
in their @file\{.xinitrc\} or @file\{.Xsession\} file for X Windows.\
\
@need 1250\
@noindent\
For a boot script:\
\
@smallexample\
@group\
loadkeys /usr/share/keymaps/i386/qwerty/emacs2.kmap.gz\
@exdent or\
install-keymap emacs2\
@end group\
@end smallexample\
\
@need 1250\
@noindent\
For a @file\{.xinitrc\} or @file\{.Xsession\} file when the @key\{Caps\
Lock\} key is at the far left of the home row:\
\
@smallexample\
@group\
# Bind the key labeled `Caps Lock' to `Control'\
# (Such a broken user interface suggests that keyboard manufacturers\
# think that computers are typewriters from 1885.)\
\
xmodmap -e "clear Lock"\
xmodmap -e "add Control = Caps_Lock"\
@end group\
@end smallexample\
\
@need 1250\
@noindent\
In a @file\{.xinitrc\} or @file\{.Xsession\} file, to convert an @key\{ALT\}\
key to a @key\{META\} key:\
\
@smallexample\
@group\
# Some ill designed keyboards have a key labeled ALT and no Meta\
xmodmap -e "keysym Alt_L = Meta_L Alt_L"\
@end group\
@end smallexample\
\
@need 1700\
@node Mode Line,  , Miscellaneous, Emacs Initialization\
@section A Modified Mode Line\
@vindex mode-line-format\
@cindex Mode line format\
\
Finally, a feature I really like: a modified mode line.\
\
When I work over a network, I forget which machine I am using.  Also,\
I tend to I lose track of where I am, and which line point is on.\
\
So I reset my mode line to look like this:\
\
@smallexample\
-:-- foo.texi   rattlesnake:/home/bob/  Line 1  (Texinfo Fill) Top\
@end smallexample\
\
I am visiting a file called @file\{foo.texi\}, on my machine\
@file\{rattlesnake\} in my @file\{/home/bob\} buffer.  I am on line 1, in\
Texinfo mode, and am at the top of the buffer.\
\
@need 1200\
My @file\{.emacs\} file has a section that looks like this:\
\
@smallexample\
@group\
;; Set a Mode Line that tells me which machine, which directory,\
;; and which line I am on, plus the other customary information.\
(setq-default mode-line-format\
 (quote\
  (#("-" 0 1\
     (help-echo\
      "mouse-1: select window, mouse-2: delete others ..."))\
   mode-line-mule-info\
   mode-line-modified\
   mode-line-frame-identification\
   "    "\
@end group\
@group\
   mode-line-buffer-identification\
   "    "\
   (:eval (substring\
           (system-name) 0 (string-match "\\\\..+" (system-name))))\
   ":"\
   default-directory\
   #(" " 0 1\
     (help-echo\
      "mouse-1: select window, mouse-2: delete others ..."))\
   (line-number-mode " Line %l ")\
   global-mode-string\
@end group\
@group\
   #("   %[(" 0 6\
     (help-echo\
      "mouse-1: select window, mouse-2: delete others ..."))\
   (:eval (mode-line-mode-name))\
   mode-line-process\
   minor-mode-alist\
   #("%n" 0 2 (help-echo "mouse-2: widen" local-map (keymap ...)))\
   ")%] "\
   (-3 . "%P")\
   ;;   "-%-"\
   )))\
@end group\
@end smallexample\
\
@noindent\
Here, I redefine the default mode line.  Most of the parts are from\
the original; but I make a few changes.  I set the @emph\{default\} mode\
line format so as to permit various modes, such as Info, to override\
it.\
\
Many elements in the list are self-explanatory:\
@code\{mode-line-modified\} is a variable that tells whether the buffer\
has been modified, @code\{mode-name\} tells the name of the mode, and so\
on.  However, the format looks complicated because of two features we\
have not discussed.\
\
@cindex Properties, in mode line example\
The first string in the mode line is a dash or hyphen, @samp\{-\}.  In\
the old days, it would have been specified simply as @code\{"-"\}.  But\
nowadays, Emacs can add properties to a string, such as highlighting\
or, as in this case, a help feature.  If you place your mouse cursor\
over the hyphen, some help information appears (By default, you must\
wait seven-tenths of a second before the information appears.  You can\
change that timing by changing the value of @code\{tooltip-delay\}.)\
\
@need 1000\
The new string format has a special syntax:\
\
@smallexample\
#("-" 0 1 (help-echo "mouse-1: select window, ..."))\
@end smallexample\
\
@noindent\
The @code\{#(\} begins a list.  The first element of the list is the\
string itself, just one @samp\{-\}.  The second and third\
elements specify the range over which the fourth element applies.  A\
range starts @emph\{after\} a character, so a zero means the range\
starts just before the first character; a 1 means that the range ends\
just after the first character.  The third element is the property for\
the range.  It consists of a property list,  a\
property name, in this case, @samp\{help-echo\}, followed by a value, in this\
case, a string.  The second, third, and fourth elements of this new\
string format can be repeated.\
\
@xref\{Text Properties, , Text Properties, elisp, The GNU Emacs Lisp\
Reference Manual\}, and see @ref\{Mode Line Format, , Mode Line Format,\
elisp, The GNU Emacs Lisp Reference Manual\}, for more information.\
\
@code\{mode-line-buffer-identification\}\
displays the current buffer name.  It is a list\
beginning @code\{(#("%12b" 0 4 @dots\{\}\}.\
The @code\{#(\} begins the list.\
\
The @samp\{"%12b"\} displays the current buffer name, using the\
@code\{buffer-name\} function with which we are familiar; the `12'\
specifies the maximum number of characters that will be displayed.\
When a name has fewer characters, whitespace is added to fill out to\
this number.  (Buffer names can and often should be longer than 12\
characters; this length works well in a typical 80 column wide\
window.)\
\
@code\{:eval\} says to evaluate the following form and use the result as\
a string to display.  In this case, the expression displays the first\
component of the full system name.  The end of the first component is\
a @samp\{.\} (`period'), so I use the @code\{string-match\} function to\
tell me the length of the first component.  The substring from the\
zeroth character to that length is the name of the machine.\
\
@need 1250\
This is the expression:\
\
@smallexample\
@group\
(:eval (substring\
        (system-name) 0 (string-match "\\\\..+" (system-name))))\
@end group\
@end smallexample\
\
@samp\{%[\} and @samp\{%]\} cause a pair of square brackets\
to appear for each recursive editing level.  @samp\{%n\} says `Narrow'\
when narrowing is in effect.  @samp\{%P\} tells you the percentage of\
the buffer that is above the bottom of the window, or `Top', `Bottom',\
or `All'.  (A lower case @samp\{p\} tell you the percentage above the\
@emph\{top\} of the window.)  @samp\{%-\} inserts enough dashes to fill\
out the line.\
\
Remember, ``You don't have to like Emacs to like it'' --- your own\
Emacs can have different colors, different commands, and different\
keys than a default Emacs.\
\
On the other hand, if you want to bring up a plain `out of the box'\
Emacs, with no customization, type:\
\
@smallexample\
emacs -q\
@end smallexample\
\
@noindent\
This will start an Emacs that does @emph\{not\} load your\
@file\{~/.emacs\} initialization file.  A plain, default Emacs.  Nothing\
more.}