{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node Interactive, Interactive Options, Install, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section Make a Function Interactive\
@cindex Interactive functions\
@findex interactive\
\
You make a function interactive by placing a list that begins with\
the special form @code\{interactive\} immediately after the\
documentation.  A user can invoke an interactive function by typing\
@kbd\{M-x\} and then the name of the function; or by typing the keys to\
which it is bound, for example, by typing @kbd\{C-n\} for\
@code\{next-line\} or @kbd\{C-x h\} for @code\{mark-whole-buffer\}.\
\
Interestingly, when you call an interactive function interactively,\
the value returned is not automatically displayed in the echo area.\
This is because you often call an interactive function for its side\
effects, such as moving forward by a word or line, and not for the\
value returned.  If the returned value were displayed in the echo area\
each time you typed a key, it would be very distracting.\
\
@menu\
* Interactive multiply-by-seven::  An overview.\
* multiply-by-seven in detail::    The interactive version.\
@end menu\
\
@node Interactive multiply-by-seven, multiply-by-seven in detail, Interactive, Interactive\
@ifnottex\
@unnumberedsubsec An Interactive @code\{multiply-by-seven\}, An Overview\
@end ifnottex\
\
Both the use of the special form @code\{interactive\} and one way to\
display a value in the echo area can be illustrated by creating an\
interactive version of @code\{multiply-by-seven\}.\
\
@need 1250\
Here is the code:\
\
@smallexample\
@group\
(defun multiply-by-seven (number)       ; @r\{Interactive version.\}\
  "Multiply NUMBER by seven."\
  (interactive "p")\
  (message "The result is %d" (* 7 number)))\
@end group\
@end smallexample\
\
@noindent\
You can install this code by placing your cursor after it and typing\
@kbd\{C-x C-e\}.  The name of the function will appear in your echo area.\
Then, you can use this code by typing @kbd\{C-u\} and a number and then\
typing @kbd\{M-x multiply-by-seven\} and pressing @key\{RET\}.  The phrase\
@samp\{The result is @dots\{\}\} followed by the product will appear in the\
echo area.\
\
Speaking more generally, you invoke a function like this in either of two\
ways:\
\
@enumerate\
@item\
By typing a prefix argument that contains the number to be passed, and\
then typing @kbd\{M-x\} and the name of the function, as with\
@kbd\{C-u 3 M-x forward-sentence\}; or,\
\
@item\
By typing whatever key or keychord the function is bound to, as with\
@kbd\{C-u 3 M-e\}.\
@end enumerate\
\
@noindent\
Both the examples just mentioned work identically to move point forward\
three sentences.  (Since @code\{multiply-by-seven\} is not bound to a key,\
it could not be used as an example of key binding.)\
\
(@xref\{Keybindings, , Some Keybindings\}, to learn how to bind a command\
to a key.)\
\
A prefix argument is passed to an interactive function by typing the\
@key\{META\} key followed by a number, for example, @kbd\{M-3 M-e\}, or by\
typing @kbd\{C-u\} and then a number, for example, @kbd\{C-u 3 M-e\} (if you\
type @kbd\{C-u\} without a number, it defaults to 4).\
\
@node multiply-by-seven in detail,  , Interactive multiply-by-seven, Interactive\
@comment  node-name,  next,  previous,  up\
@subsection An Interactive @code\{multiply-by-seven\}\
\
Let's look at the use of the special form @code\{interactive\} and then at\
the function @code\{message\} in the interactive version of\
@code\{multiply-by-seven\}.  You will recall that the function definition\
looks like this:\
\
@smallexample\
@group\
(defun multiply-by-seven (number)       ; @r\{Interactive version.\}\
  "Multiply NUMBER by seven."\
  (interactive "p")\
  (message "The result is %d" (* 7 number)))\
@end group\
@end smallexample\
\
In this function, the expression, @code\{(interactive "p")\}, is a list of\
two elements.  The @code\{"p"\} tells Emacs to pass the prefix argument to\
the function and use its value for the argument of the function.\
\
@need 1000\
The argument will be a number.  This means that the symbol\
@code\{number\} will be bound to a number in the line:\
\
@smallexample\
(message "The result is %d" (* 7 number))\
@end smallexample\
\
@need 1250\
@noindent\
For example, if your prefix argument is 5, the Lisp interpreter will\
evaluate the line as if it were:\
\
@smallexample\
(message "The result is %d" (* 7 5))\
@end smallexample\
\
@noindent\
(If you are reading this in GNU Emacs, you can evaluate this expression\
yourself.)  First, the interpreter will evaluate the inner list, which\
is @code\{(* 7 5)\}.  This returns a value of 35.  Next, it\
will evaluate the outer list, passing the values of the second and\
subsequent elements of the list to the function @code\{message\}.\
\
As we have seen, @code\{message\} is an Emacs Lisp function especially\
designed for sending a one line message to a user.  (@xref\{message, ,\
The @code\{message\} function\}.)  In summary, the @code\{message\}\
function prints its first argument in the echo area as is, except for\
occurrences of @samp\{%d\} or @samp\{%s\} (and various other %-sequences\
which we have not mentioned).  When it sees a control sequence, the\
function looks to the second or subsequent arguments and prints the\
value of the argument in the location in the string where the control\
sequence is located.\
\
In the interactive @code\{multiply-by-seven\} function, the control string\
is @samp\{%d\}, which requires a number, and the value returned by\
evaluating @code\{(* 7 5)\} is the number 35.  Consequently, the number 35\
is printed in place of the @samp\{%d\} and the message is @samp\{The result\
is 35\}.\
\
(Note that when you call the function @code\{multiply-by-seven\}, the\
message is printed without quotes, but when you call @code\{message\}, the\
text is printed in double quotes.  This is because the value returned by\
@code\{message\} is what appears in the echo area when you evaluate an\
expression whose first element is @code\{message\}; but when embedded in a\
function, @code\{message\} prints the text as a side effect without\
quotes.)}