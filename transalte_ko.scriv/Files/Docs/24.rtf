{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node Preface, List Processing, Top, Top\
@comment  node-name,  next,  previous,  up\
@unnumbered Preface\
\
Most of the GNU Emacs integrated environment is written in the programming\
language called Emacs Lisp.  The code written in this programming\
language is the software---the sets of instructions---that tell the\
computer what to do when you give it commands.  Emacs is designed so\
that you can write new code in Emacs Lisp and easily install it as an\
extension to the editor.\
\
(GNU Emacs is sometimes called an ``extensible editor'', but it does\
much more than provide editing capabilities.  It is better to refer to\
Emacs as an ``extensible computing environment''.  However, that\
phrase is quite a mouthful.  It is easier to refer to Emacs simply as\
an editor.  Moreover, everything you do in Emacs---find the Mayan date\
and phases of the moon, simplify polynomials, debug code, manage\
files, read letters, write books---all these activities are kinds of\
editing in the most general sense of the word.)\
\
@menu\
* Why::                         Why learn Emacs Lisp?\
* On Reading this Text::        Read, gain familiarity, pick up habits....\
* Who You Are::                 For whom this is written.\
* Lisp History::\
* Note for Novices::            You can read this as a novice.\
* Thank You::\
@end menu\
\
@node Why, On Reading this Text, Preface, Preface\
@ifnottex\
@unnumberedsec Why Study Emacs Lisp?\
@end ifnottex\
\
Although Emacs Lisp is usually thought of in association only with Emacs,\
it is a full computer programming language.  You can use Emacs Lisp as\
you would any other programming language.\
\
Perhaps you want to understand programming; perhaps you want to extend\
Emacs; or perhaps you want to become a programmer.  This introduction to\
Emacs Lisp is designed to get you started: to guide you in learning the\
fundamentals of programming, and more importantly, to show you how you\
can teach yourself to go further.\
\
@node On Reading this Text, Who You Are, Why, Preface\
@comment  node-name,  next,  previous,  up\
@unnumberedsec On Reading this Text\
\
All through this document, you will see little sample programs you can\
run inside of Emacs.  If you read this document in Info inside of GNU\
Emacs, you can run the programs as they appear.  (This is easy to do and\
is explained when the examples are presented.)  Alternatively, you can\
read this introduction as a printed book while sitting beside a computer\
running Emacs.  (This is what I like to do; I like printed books.)  If\
you don't have a running Emacs beside you, you can still read this book,\
but in this case, it is best to treat it as a novel or as a travel guide\
to a country not yet visited: interesting, but not the same as being\
there.\
\
Much of this introduction is dedicated to walk-throughs or guided tours\
of code used in GNU Emacs.  These tours are designed for two purposes:\
first, to give you familiarity with real, working code (code you use\
every day); and, second, to give you familiarity with the way Emacs\
works.  It is interesting to see how a working environment is\
implemented.\
Also, I\
hope that you will pick up the habit of browsing through source code.\
You can learn from it and mine it for ideas.  Having GNU Emacs is like\
having a dragon's cave of treasures.\
\
In addition to learning about Emacs as an editor and Emacs Lisp as a\
programming language, the examples and guided tours will give you an\
opportunity to get acquainted with Emacs as a Lisp programming\
environment.  GNU Emacs supports programming and provides tools that\
you will want to become comfortable using, such as @kbd\{M-.\} (the key\
which invokes the @code\{find-tag\} command).  You will also learn about\
buffers and other objects that are part of the environment.\
Learning about these features of Emacs is like learning new routes\
around your home town.\
\
@ignore\
In addition, I have written several programs as extended examples.\
Although these are examples, the programs are real.  I use them.\
Other people use them.  You may use them.  Beyond the fragments of\
programs used for illustrations, there is very little in here that is\
`just for teaching purposes'; what you see is used.  This is a great\
advantage of Emacs Lisp: it is easy to learn to use it for work.\
@end ignore\
\
Finally, I hope to convey some of the skills for using Emacs to\
learn aspects of programming that you don't know.  You can often use\
Emacs to help you understand what puzzles you or to find out how to do\
something new.  This self-reliance is not only a pleasure, but an\
advantage.\
\
@node Who You Are, Lisp History, On Reading this Text, Preface\
@comment  node-name,  next,  previous,  up\
@unnumberedsec For Whom This is Written\
\
This text is written as an elementary introduction for people who are\
not programmers.  If you are a programmer, you may not be satisfied with\
this primer.  The reason is that you may have become expert at reading\
reference manuals and be put off by the way this text is organized.\
\
An expert programmer who reviewed this text said to me:\
\
@quotation\
@i\{I prefer to learn from reference manuals.  I ``dive into'' each\
paragraph, and ``come up for air'' between paragraphs.\}\
\
@i\{When I get to the end of a paragraph, I assume that that subject is\
done, finished, that I know everything I need (with the\
possible exception of the case when the next paragraph starts talking\
about it in more detail).  I expect that a well written reference manual\
will not have a lot of redundancy, and that it will have excellent\
pointers to the (one) place where the information I want is.\}\
@end quotation\
\
This introduction is not written for this person!\
\
Firstly, I try to say everything at least three times: first, to\
introduce it; second, to show it in context; and third, to show it in a\
different context, or to review it.\
\
Secondly, I hardly ever put all the information about a subject in one\
place, much less in one paragraph.  To my way of thinking, that imposes\
too heavy a burden on the reader.  Instead I try to explain only what\
you need to know at the time.  (Sometimes I include a little extra\
information so you won't be surprised later when the additional\
information is formally introduced.)\
\
When you read this text, you are not expected to learn everything the\
first time.  Frequently, you need only make, as it were, a `nodding\
acquaintance' with some of the items mentioned.  My hope is that I have\
structured the text and given you enough hints that you will be alert to\
what is important, and concentrate on it.\
\
You will need to ``dive into'' some paragraphs; there is no other way\
to read them.  But I have tried to keep down the number of such\
paragraphs.  This book is intended as an approachable hill, rather than\
as a daunting mountain.\
\
This introduction to @cite\{Programming in Emacs Lisp\} has a companion\
document,\
@iftex\
@cite\{The GNU Emacs Lisp Reference Manual\}.\
@end iftex\
@ifnottex\
@ref\{Top, , The GNU Emacs Lisp Reference Manual, elisp, The GNU\
Emacs Lisp Reference Manual\}.\
@end ifnottex\
The reference manual has more detail than this introduction.  In the\
reference manual, all the information about one topic is concentrated\
in one place.  You should turn to it if you are like the programmer\
quoted above.  And, of course, after you have read this\
@cite\{Introduction\}, you will find the @cite\{Reference Manual\} useful\
when you are writing your own programs.\
\
@node Lisp History, Note for Novices, Who You Are, Preface\
@unnumberedsec Lisp History\
@cindex Lisp history\
\
Lisp was first developed in the late 1950s at the Massachusetts\
Institute of Technology for research in artificial intelligence.  The\
great power of the Lisp language makes it superior for other purposes as\
well, such as writing editor commands and integrated environments.\
\
@cindex Maclisp\
@cindex Common Lisp\
GNU Emacs Lisp is largely inspired by Maclisp, which was written at MIT\
in the 1960s.  It is somewhat inspired by Common Lisp, which became a\
standard in the 1980s.  However, Emacs Lisp is much simpler than Common\
Lisp.  (The standard Emacs distribution contains an optional extensions\
file, @file\{cl.el\}, that adds many Common Lisp features to Emacs Lisp.)\
\
@node Note for Novices, Thank You, Lisp History, Preface\
@comment  node-name,  next,  previous,  up\
@unnumberedsec A Note for Novices\
\
If you don't know GNU Emacs, you can still read this document\
profitably.  However, I recommend you learn Emacs, if only to learn to\
move around your computer screen.  You can teach yourself how to use\
Emacs with the on-line tutorial.  To use it, type @kbd\{C-h t\}.  (This\
means you press and release the @key\{CTRL\} key and the @kbd\{h\} at the\
same time, and then press and release @kbd\{t\}.)\
\
Also, I often refer to one of Emacs' standard commands by listing the\
keys which you press to invoke the command and then giving the name of\
the command in parentheses, like this: @kbd\{M-C-\\\}\
(@code\{indent-region\}).  What this means is that the\
@code\{indent-region\} command is customarily invoked by typing\
@kbd\{M-C-\\\}.  (You can, if you wish, change the keys that are typed to\
invoke the command; this is called @dfn\{rebinding\}.  @xref\{Keymaps, ,\
Keymaps\}.)  The abbreviation @kbd\{M-C-\\\} means that you type your\
@key\{META\} key, @key\{CTRL\} key and @key\{\\\} key all at the same time.\
(On many modern keyboards the @key\{META\} key is labelled\
@key\{ALT\}.)\
Sometimes a combination like this is called a keychord, since it is\
similar to the way you play a chord on a piano.  If your keyboard does\
not have a @key\{META\} key, the @key\{ESC\} key prefix is used in place\
of it.  In this case, @kbd\{M-C-\\\} means that you press and release your\
@key\{ESC\} key and then type the @key\{CTRL\} key and the @key\{\\\} key at\
the same time.  But usually @kbd\{M-C-\\\} means press the @key\{CTRL\} key\
along with the key that is labelled @key\{ALT\} and, at the same time,\
press the @key\{\\\} key.\
\
In addition to typing a lone keychord, you can prefix what you type\
with @kbd\{C-u\}, which is called the `universal argument'.  The\
@kbd\{C-u\} keychord passes an argument to the subsequent command.\
Thus, to indent a region of plain text by 6 spaces, mark the region,\
and then type @w\{@kbd\{C-u 6 M-C-\\\}\}.  (If you do not specify a number,\
Emacs either passes the number 4 to the command or otherwise runs the\
command differently than it would otherwise.)  @xref\{Arguments, ,\
Numeric Arguments, emacs, The GNU Emacs Manual\}.\
\
If you are reading this in Info using GNU Emacs, you can read through\
this whole document just by pressing the space bar, @key\{SPC\}.\
(To learn about Info, type @kbd\{C-h i\} and then select Info.)\
\
A note on terminology:  when I use the word Lisp alone, I often am\
referring to the various dialects of Lisp in general, but when I speak\
of Emacs Lisp, I am referring to GNU Emacs Lisp in particular.\
\
@node Thank You,  , Note for Novices, Preface\
@comment  node-name,  next,  previous,  up\
@unnumberedsec Thank You\
\
My thanks to all who helped me with this book.  My especial thanks to\
@r\{Jim Blandy\}, @r\{Noah Friedman\}, @w\{Jim Kingdon\}, @r\{Roland\
McGrath\}, @w\{Frank Ritter\}, @w\{Randy Smith\}, @w\{Richard M.@:\
Stallman\}, and @w\{Melissa Weisshaus\}.  My thanks also go to both\
@w\{Philip Johnson\} and @w\{David Stampe\} for their patient\
encouragement.  My mistakes are my own.\
\
@flushright\
Robert J. Chassell\
@email\{bob@@gnu.org\}\
@end flushright\
\
@c ================ Beginning of main text ================\
\
@c Start main text on right-hand (verso) page\
\
@tex\
\\par\\vfill\\supereject\
\\headings off\
\\ifodd\\pageno\
    \\par\\vfill\\supereject\
\\else\
    \\par\\vfill\\supereject\
    \\page\\hbox\{\}\\page\
    \\par\\vfill\\supereject\
\\fi\
@end tex\
\
@iftex\
@headings off\
@evenheading @thispage @| @| @thischapter\
@oddheading @thissection @| @| @thispage\
@global@pageno = 1\
@end iftex}