{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node Emacs Initialization, Debugging, Readying a Graph, Top\
@chapter Your @file\{.emacs\} File\
@cindex @file\{.emacs\} file\
@cindex Customizing your @file\{.emacs\} file\
@cindex Initialization file\
\
``You don't have to like Emacs to like it'' -- this seemingly\
paradoxical statement is the secret of GNU Emacs.  The plain, `out of\
the box' Emacs is a generic tool.  Most people who use it, customize\
it to suit themselves.\
\
GNU Emacs is mostly written in Emacs Lisp; this means that by writing\
expressions in Emacs Lisp you can change or extend Emacs.\
\
@menu\
* Default Configuration::\
* Site-wide Init::              You can write site-wide init files.\
* defcustom::                   Emacs will write code for you.\
* Beginning a .emacs File::     How to write a @code\{.emacs file\}.\
* Text and Auto-fill::          Automatically wrap lines.\
* Mail Aliases::                Use abbreviations for email addresses.\
* Indent Tabs Mode::            Don't use tabs with @TeX\{\}\
* Keybindings::                 Create some personal keybindings.\
* Keymaps::                     More about key binding.\
* Loading Files::               Load (i.e., evaluate) files automatically.\
* Autoload::                    Make functions available.\
* Simple Extension::            Define a function; bind it to a key.\
* X11 Colors::                  Colors in X.\
* Miscellaneous::\
* Mode Line::                   How to customize your mode line.\
@end menu\
\
@node Default Configuration, Site-wide Init, Emacs Initialization, Emacs Initialization\
@ifnottex\
@unnumberedsec Emacs' Default Configuration\
@end ifnottex\
\
There are those who appreciate Emacs' default configuration.  After\
all, Emacs starts you in C mode when you edit a C file, starts you in\
Fortran mode when you edit a Fortran file, and starts you in\
Fundamental mode when you edit an unadorned file.  This all makes\
sense, if you do not know who is going to use Emacs.  Who knows what a\
person hopes to do with an unadorned file?  Fundamental mode is the\
right default for such a file, just as C mode is the right default for\
editing C code.  (Enough programming languages have syntaxes\
that enable them to share or nearly share features, so C mode is\
now provided by CC mode, the `C Collection'.)\
\
But when you do know who is going to use Emacs---you,\
yourself---then it makes sense to customize Emacs.\
\
For example, I seldom want Fundamental mode when I edit an\
otherwise undistinguished file; I want Text mode.  This is why I\
customize Emacs: so it suits me.\
\
You can customize and extend Emacs by writing or adapting a\
@file\{~/.emacs\} file.  This is your personal initialization file; its\
contents, written in Emacs Lisp, tell Emacs what to do.@footnote\{You\
may also add @file\{.el\} to @file\{~/.emacs\} and call it a\
@file\{~/.emacs.el\} file.  In the past, you were forbidden to type the\
extra keystrokes that the name @file\{~/.emacs.el\} requires, but now\
you may.  The new format is consistent with the Emacs Lisp file\
naming conventions; the old format saves typing.\}\
\
A @file\{~/.emacs\} file contains Emacs Lisp code.  You can write this\
code yourself; or you can use Emacs' @code\{customize\} feature to write\
the code for you.  You can combine your own expressions and\
auto-written Customize expressions in your @file\{.emacs\} file.\
\
(I myself prefer to write my own expressions, except for those,\
particularly fonts, that I find easier to manipulate using the\
@code\{customize\} command.  I combine the two methods.)\
\
Most of this chapter is about writing expressions yourself.  It\
describes a simple @file\{.emacs\} file; for more information, see\
@ref\{Init File, , The Init File, emacs, The GNU Emacs Manual\}, and\
@ref\{Init File, , The Init File, elisp, The GNU Emacs Lisp Reference\
Manual\}.\
\
@node Site-wide Init, defcustom, Default Configuration, Emacs Initialization\
@section Site-wide Initialization Files\
\
@cindex @file\{default.el\} init file\
@cindex @file\{site-init.el\} init file\
@cindex @file\{site-load.el\} init file\
In addition to your personal initialization file, Emacs automatically\
loads various site-wide initialization files, if they exist.  These\
have the same form as your @file\{.emacs\} file, but are loaded by\
everyone.\
\
Two site-wide initialization files, @file\{site-load.el\} and\
@file\{site-init.el\}, are loaded into Emacs and then `dumped' if a\
`dumped' version of Emacs is created, as is most common.  (Dumped\
copies of Emacs load more quickly.  However, once a file is loaded and\
dumped, a change to it does not lead to a change in Emacs unless you\
load it yourself or re-dump Emacs.  @xref\{Building Emacs, , Building\
Emacs, elisp, The GNU Emacs Lisp Reference Manual\}, and the\
@file\{INSTALL\} file.)\
\
Three other site-wide initialization files are loaded automatically\
each time you start Emacs, if they exist.  These are\
@file\{site-start.el\}, which is loaded @emph\{before\} your @file\{.emacs\}\
file, and @file\{default.el\}, and the terminal type file, which are both\
loaded @emph\{after\} your @file\{.emacs\} file.\
\
Settings and definitions in your @file\{.emacs\} file will overwrite\
conflicting settings and definitions in a @file\{site-start.el\} file,\
if it exists; but the settings and definitions in a @file\{default.el\}\
or terminal type file will overwrite those in your @file\{.emacs\} file.\
(You can prevent interference from a terminal type file by setting\
@code\{term-file-prefix\} to @code\{nil\}.  @xref\{Simple Extension, , A\
Simple Extension\}.)\
\
@c Rewritten to avoid overfull hbox.\
The @file\{INSTALL\} file that comes in the distribution contains\
descriptions of the @file\{site-init.el\} and @file\{site-load.el\} files.\
\
The @file\{loadup.el\}, @file\{startup.el\}, and @file\{loaddefs.el\} files\
control loading.  These files are in the @file\{lisp\} directory of the\
Emacs distribution and are worth perusing.\
\
The @file\{loaddefs.el\} file contains a good many suggestions as to\
what to put into your own @file\{.emacs\} file, or into a site-wide\
initialization file.\
\
@node defcustom, Beginning a .emacs File, Site-wide Init, Emacs Initialization\
@section Specifying Variables using @code\{defcustom\}\
@findex defcustom\
\
You can specify variables using @code\{defcustom\} so that you and\
others can then use Emacs' @code\{customize\} feature to set their\
values.  (You cannot use @code\{customize\} to write function\
definitions; but you can write @code\{defuns\} in your @file\{.emacs\}\
file.  Indeed, you can write any Lisp expression in your @file\{.emacs\}\
file.)\
\
The @code\{customize\} feature depends on the @code\{defcustom\} special\
form.  Although you can use @code\{defvar\} or @code\{setq\} for variables\
that users set, the @code\{defcustom\} special form is designed for the\
job.\
\
You can use your knowledge of @code\{defvar\} for writing the\
first three arguments for @code\{defcustom\}.  The first argument to\
@code\{defcustom\} is the name of the variable.  The second argument is\
the variable's initial value, if any; and this value is set only if\
the value has not already been set.  The third argument is the\
documentation.\
\
The fourth and subsequent arguments to @code\{defcustom\} specify types\
and options; these are not featured in @code\{defvar\}.  (These\
arguments are optional.)\
\
Each of these arguments consists of a keyword followed by a value.\
Each keyword starts with the colon character @samp\{:\}.\
\
@need 1250\
For example, the customizable user option variable\
@code\{text-mode-hook\} looks like this:\
\
@smallexample\
@group\
(defcustom text-mode-hook nil\
  "Normal hook run when entering Text mode and many related modes."\
  :type 'hook\
  :options '(turn-on-auto-fill flyspell-mode)\
  :group 'data)\
@end group\
@end smallexample\
\
@noindent\
The name of the variable is @code\{text-mode-hook\}; it has no default\
value; and its documentation string tells you what it does.\
\
The @code\{:type\} keyword tells Emacs the kind of data to which\
@code\{text-mode-hook\} should be set and how to display the value in a\
Customization buffer.\
\
The @code\{:options\} keyword specifies a suggested list of values for\
the variable.  Usually, @code\{:options\} applies to a hook.\
The list is only a suggestion; it is not exclusive; a person who sets\
the variable may set it to other values; the list shown following the\
@code\{:options\} keyword is intended to offer convenient choices to a\
user.\
\
Finally, the @code\{:group\} keyword tells the Emacs Customization\
command in which group the variable is located.  This tells where to\
find it.\
\
The @code\{defcustom\} function recognizes more than a dozen keywords.\
For more information, see @ref\{Customization, , Writing Customization\
Definitions, elisp, The GNU Emacs Lisp Reference Manual\}.\
\
Consider @code\{text-mode-hook\} as an example.\
\
There are two ways to customize this variable.  You can use the\
customization command or write the appropriate expressions yourself.\
\
@need 800\
Using the customization command,  you can type:\
\
@smallexample\
M-x customize\
@end smallexample\
\
@noindent\
and find that the group for editing files of data is called `data'.\
Enter that group.  Text Mode Hook is the first member.  You can click\
on its various options, such as @code\{turn-on-auto-fill\}, to set the\
values.  After you click on the button to\
\
@smallexample\
Save for Future Sessions\
@end smallexample\
\
@noindent\
Emacs will write an expression into your @file\{.emacs\} file.\
It will look like this:\
\
@smallexample\
@group\
(custom-set-variables\
  ;; custom-set-variables was added by Custom.\
  ;; If you edit it by hand, you could mess it up, so be careful.\
  ;; Your init file should contain only one such instance.\
  ;; If there is more than one, they won't work right.\
 '(text-mode-hook (quote (turn-on-auto-fill text-mode-hook-identify))))\
@end group\
@end smallexample\
\
@noindent\
(The @code\{text-mode-hook-identify\} function tells\
@code\{toggle-text-mode-auto-fill\} which buffers are in Text mode.\
It comes on automatically.)\
\
The @code\{custom-set-variables\} function works somewhat differently\
than a @code\{setq\}.  While I have never learned the differences, I\
modify the @code\{custom-set-variables\} expressions in my @file\{.emacs\}\
file by hand:  I make the changes in what appears to me to be a\
reasonable manner and have not had any problems.  Others prefer to use\
the Customization command and let Emacs do the work for them.\
\
Another @code\{custom-set-@dots\{\}\} function is @code\{custom-set-faces\}.\
This function sets the various font faces.  Over time, I have set a\
considerable number of faces.  Some of the time, I re-set them using\
@code\{customize\}; other times, I simply edit the\
@code\{custom-set-faces\} expression in my @file\{.emacs\} file itself.\
\
The second way to customize your @code\{text-mode-hook\} is to set it\
yourself in your @file\{.emacs\} file using code that has nothing to do\
with the @code\{custom-set-@dots\{\}\} functions.\
\
@need 800\
When you do this, and later use @code\{customize\}, you will see a\
message that says\
\
@smallexample\
CHANGED outside Customize; operating on it here may be unreliable.\
@end smallexample\
\
@need 800\
This message is only a warning.  If you click on the button to\
\
@smallexample\
Save for Future Sessions\
@end smallexample\
\
@noindent\
Emacs will write a @code\{custom-set-@dots\{\}\} expression near the end\
of your @file\{.emacs\} file that will be evaluated after your\
hand-written expression.  It will, therefore, overrule your\
hand-written expression.  No harm will be done.  When you do this,\
however, be careful to remember which expression is active; if you\
forget, you may confuse yourself.\
\
So long as you remember where the values are set, you will have no\
trouble.  In any event, the values are always set in your\
initialization file, which is usually called @file\{.emacs\}.\
\
I myself use @code\{customize\} for hardly anything.  Mostly, I write\
expressions myself.\
\
@findex defsubst\
@findex defconst\
Incidentally, to be more complete concerning defines:  @code\{defsubst\}\
defines an inline function.  The syntax is just like that of\
@code\{defun\}.  @code\{defconst\} defines a symbol as a constant.  The\
intent is that neither programs nor users should ever change a value\
set by @code\{defconst\}.  (You can change it; the value set is a\
variable; but please do not.)\
\
@node Beginning a .emacs File, Text and Auto-fill, defcustom, Emacs Initialization\
@section Beginning a @file\{.emacs\} File\
@cindex @file\{.emacs\} file, beginning of\
\
When you start Emacs, it loads your @file\{.emacs\} file unless you tell\
it not to by specifying @samp\{-q\} on the command line.  (The\
@code\{emacs -q\} command gives you a plain, out-of-the-box Emacs.)\
\
A @file\{.emacs\} file contains Lisp expressions.  Often, these are no\
more than expressions to set values; sometimes they are function\
definitions.\
\
@xref\{Init File, , The Init File @file\{~/.emacs\}, emacs, The GNU Emacs\
Manual\}, for a short description of initialization files.\
\
This chapter goes over some of the same ground, but is a walk among\
extracts from a complete, long-used @file\{.emacs\} file---my own.\
\
The first part of the file consists of comments: reminders to myself.\
By now, of course, I remember these things, but when I started, I did\
not.\
\
@need 1200\
@smallexample\
@group\
;;;; Bob's .emacs file\
; Robert J. Chassell\
; 26 September 1985\
@end group\
@end smallexample\
\
@noindent\
Look at that date!  I started this file a long time ago.  I have been\
adding to it ever since.\
\
@smallexample\
@group\
; Each section in this file is introduced by a\
; line beginning with four semicolons; and each\
; entry is introduced by a line beginning with\
; three semicolons.\
@end group\
@end smallexample\
\
@noindent\
This describes the usual conventions for comments in Emacs Lisp.\
Everything on a line that follows a semicolon is a comment.  Two,\
three, and four semicolons are used as subsection and section markers.\
(@xref\{Comments, ,, elisp, The GNU Emacs Lisp Reference Manual\}, for\
more about comments.)\
\
@smallexample\
@group\
;;;; The Help Key\
; Control-h is the help key;\
; after typing control-h, type a letter to\
; indicate the subject about which you want help.\
; For an explanation of the help facility,\
; type control-h two times in a row.\
@end group\
@end smallexample\
\
@noindent\
Just remember: type @kbd\{C-h\} two times for help.\
\
@smallexample\
@group\
; To find out about any mode, type control-h m\
; while in that mode.  For example, to find out\
; about mail mode, enter mail mode and then type\
; control-h m.\
@end group\
@end smallexample\
\
@noindent\
`Mode help', as I call this, is very helpful.  Usually, it tells you\
all you need to know.\
\
Of course, you don't need to include comments like these in your\
@file\{.emacs\} file.  I included them in mine because I kept forgetting\
about Mode help or the conventions for comments---but I was able to\
remember to look here to remind myself.\
\
@node Text and Auto-fill, Mail Aliases, Beginning a .emacs File, Emacs Initialization\
@section Text and Auto Fill Mode\
\
Now we come to the part that `turns on' Text mode and\
Auto Fill mode.\
\
@smallexample\
@group\
;;; Text mode and Auto Fill mode\
;; The next two lines put Emacs into Text mode\
;; and Auto Fill mode, and are for writers who\
;; want to start writing prose rather than code.\
(setq-default major-mode 'text-mode)\
(add-hook 'text-mode-hook 'turn-on-auto-fill)\
@end group\
@end smallexample\
\
Here is the first part of this @file\{.emacs\} file that does something\
besides remind a forgetful human!\
\
The first of the two lines in parentheses tells Emacs to turn on Text\
mode when you find a file, @emph\{unless\} that file should go into some\
other mode, such as C mode.\
\
@cindex Per-buffer, local variables list\
@cindex Local variables list, per-buffer,\
@cindex Automatic mode selection\
@cindex Mode selection, automatic\
When Emacs reads a file, it looks at the extension to the file name,\
if any.  (The extension is the part that comes after a @samp\{.\}.)  If\
the file ends with a @samp\{.c\} or @samp\{.h\} extension then Emacs turns\
on C mode.  Also, Emacs looks at first nonblank line of the file; if\
the line says @w\{@samp\{-*- C -*-\}\}, Emacs turns on C mode.  Emacs\
possesses a list of extensions and specifications that it uses\
automatically.  In addition, Emacs looks near the last page for a\
per-buffer, ``local variables list'', if any.\
\
@ifinfo\
@xref\{Choosing Modes, , How Major Modes are Chosen, emacs, The GNU\
Emacs Manual\}.\
\
@xref\{File Variables, , Local Variables in Files, emacs, The GNU Emacs\
Manual\}.\
@end ifinfo\
@iftex\
See sections ``How Major Modes are Chosen'' and ``Local Variables in\
Files'' in @cite\{The GNU Emacs Manual\}.\
@end iftex\
\
Now, back to the @file\{.emacs\} file.\
\
@need 800\
Here is the line again; how does it work?\
\
@cindex Text Mode turned on\
@smallexample\
(setq major-mode 'text-mode)\
@end smallexample\
\
@noindent\
This line is a short, but complete Emacs Lisp expression.\
\
We are already familiar with @code\{setq\}.  It sets the following variable,\
@code\{major-mode\}, to the subsequent value, which is @code\{text-mode\}.\
The single quote mark before @code\{text-mode\} tells Emacs to deal directly\
with the @code\{text-mode\} symbol, not with whatever it might stand for.\
@xref\{set & setq, , Setting the Value of a Variable\},\
for a reminder of how @code\{setq\} works.\
The main point is that there is no difference between the procedure you\
use to set a value in your @file\{.emacs\} file and the procedure you use\
anywhere else in Emacs.\
\
@need 800\
Here is the next line:\
\
@cindex Auto Fill mode turned on\
@findex add-hook\
@smallexample\
(add-hook 'text-mode-hook 'turn-on-auto-fill)\
@end smallexample\
\
@noindent\
In this line, the @code\{add-hook\} command adds\
@code\{turn-on-auto-fill\} to the variable.\
\
@code\{turn-on-auto-fill\} is the name of a program, that, you guessed\
it!, turns on Auto Fill mode.\
\
Every time Emacs turns on Text mode, Emacs runs the commands `hooked'\
onto Text mode.  So every time Emacs turns on Text mode, Emacs also\
turns on Auto Fill mode.\
\
In brief, the first line causes Emacs to enter Text mode when you edit a\
file, unless the file name extension, a first non-blank line, or local\
variables to tell Emacs otherwise.\
\
Text mode among other actions, sets the syntax table to work\
conveniently for writers.  In Text mode, Emacs considers an apostrophe\
as part of a word like a letter; but Emacs does not consider a period\
or a space as part of a word.  Thus, @kbd\{M-f\} moves you over\
@samp\{it's\}.  On the other hand, in C mode, @kbd\{M-f\} stops just after\
the @samp\{t\} of @samp\{it's\}.\
\
The second line causes Emacs to turn on Auto Fill mode when it turns\
on Text mode.  In Auto Fill mode, Emacs automatically breaks a line\
that is too wide and brings the excessively wide part of the line down\
to the next line.  Emacs breaks lines between words, not within them.\
\
When Auto Fill mode is turned off, lines continue to the right as you\
type them.  Depending on how you set the value of\
@code\{truncate-lines\}, the words you type either disappear off the\
right side of the screen, or else are shown, in a rather ugly and\
unreadable manner, as a continuation line on the screen.\
\
@need 1250\
In addition, in this part of my @file\{.emacs\} file, I tell the Emacs\
fill commands to insert two spaces after a colon:\
\
@smallexample\
(setq colon-double-space t)\
@end smallexample\
\
@node Mail Aliases, Indent Tabs Mode, Text and Auto-fill, Emacs Initialization\
@section Mail Aliases\
\
Here is a @code\{setq\} that `turns on' mail aliases, along with more\
reminders.\
\
@smallexample\
@group\
;;; Mail mode\
; To enter mail mode, type `C-x m'\
; To enter RMAIL (for reading mail),\
; type `M-x rmail'\
(setq mail-aliases t)\
@end group\
@end smallexample\
\
@cindex Mail aliases\
@noindent\
This @code\{setq\} command sets the value of the variable\
@code\{mail-aliases\} to @code\{t\}.  Since @code\{t\} means true, the line\
says, in effect, ``Yes, use mail aliases.''\
\
Mail aliases are convenient short names for long email addresses or\
for lists of email addresses.  The file where you keep your `aliases'\
is @file\{~/.mailrc\}.  You write an alias like this:\
\
@smallexample\
alias geo george@@foobar.wiz.edu\
@end smallexample\
\
@noindent\
When you write a message to George, address it to @samp\{geo\}; the\
mailer will automatically expand @samp\{geo\} to the full address.\
\
@node Indent Tabs Mode, Keybindings, Mail Aliases, Emacs Initialization\
@section Indent Tabs Mode\
@cindex Tabs, preventing\
@findex indent-tabs-mode\
\
By default, Emacs inserts tabs in place of multiple spaces when it\
formats a region.  (For example, you might indent many lines of text\
all at once with the @code\{indent-region\} command.)  Tabs look fine on\
a terminal or with ordinary printing, but they produce badly indented\
output when you use @TeX\{\} or Texinfo since @TeX\{\} ignores tabs.\
\
@need 1250\
The following turns off Indent Tabs mode:\
\
@smallexample\
@group\
;;; Prevent Extraneous Tabs\
(setq-default indent-tabs-mode nil)\
@end group\
@end smallexample\
\
Note that this line uses @code\{setq-default\} rather than the\
@code\{setq\} command that we have seen before.  The @code\{setq-default\}\
command sets values only in buffers that do not have their own local\
values for the variable.\
\
@ifinfo\
@xref\{Just Spaces, , Tabs vs. Spaces, emacs, The GNU Emacs Manual\}.\
\
@xref\{File Variables, , Local Variables in Files, emacs, The GNU Emacs\
Manual\}.\
@end ifinfo\
@iftex\
See sections ``Tabs vs.@: Spaces'' and ``Local Variables in\
Files'' in @cite\{The GNU Emacs Manual\}.\
@end iftex\
\
@need 1700\
@node Keybindings, Keymaps, Indent Tabs Mode, Emacs Initialization\
@section Some Keybindings\
\
Now for some personal keybindings:\
\
@smallexample\
@group\
;;; Compare windows\
(global-set-key "\\C-cw" 'compare-windows)\
@end group\
@end smallexample\
\
@findex compare-windows\
@code\{compare-windows\} is a nifty command that compares the text in\
your current window with text in the next window.  It makes the\
comparison by starting at point in each window, moving over text in\
each window as far as they match.  I use this command all the time.\
\
This also shows how to set a key globally, for all modes.\
\
@cindex Setting a key globally\
@cindex Global set key\
@cindex Key setting globally\
@findex global-set-key\
The command is @code\{global-set-key\}.  It is followed by the\
keybinding.  In a @file\{.emacs\} file, the keybinding is written as\
shown: @code\{\\C-c\} stands for `control-c', which means `press the\
control key and the @key\{c\} key at the same time'.  The @code\{w\} means\
`press the @key\{w\} key'.  The keybinding is surrounded by double\
quotation marks.  In documentation, you would write this as\
@w\{@kbd\{C-c w\}\}.  (If you were binding a @key\{META\} key, such as\
@kbd\{M-c\}, rather than a @key\{CTRL\} key, you would write\
@w\{@code\{\\M-c\}\} in your @file\{.emacs\} file.  @xref\{Init Rebinding, ,\
Rebinding Keys in Your Init File, emacs, The GNU Emacs Manual\}, for\
details.)\
\
The command invoked by the keys is @code\{compare-windows\}.  Note that\
@code\{compare-windows\} is preceded by a single quote; otherwise, Emacs\
would first try to evaluate the symbol to determine its value.\
\
These three things, the double quotation marks, the backslash before\
the @samp\{C\}, and the single quote mark are necessary parts of\
keybinding that I tend to forget.  Fortunately, I have come to\
remember that I should look at my existing @file\{.emacs\} file, and\
adapt what is there.\
\
As for the keybinding itself: @kbd\{C-c w\}.  This combines the prefix\
key, @kbd\{C-c\}, with a single character, in this case, @kbd\{w\}.  This\
set of keys, @kbd\{C-c\} followed by a single character, is strictly\
reserved for individuals' own use.  (I call these `own' keys, since\
these are for my own use.)  You should always be able to create such a\
keybinding for your own use without stomping on someone else's\
keybinding.  If you ever write an extension to Emacs, please avoid\
taking any of these keys for public use.  Create a key like @kbd\{C-c\
C-w\} instead.  Otherwise, we will run out of `own' keys.\
\
@need 1250\
Here is another keybinding, with a comment:\
\
@smallexample\
@group\
;;; Keybinding for `occur'\
; I use occur a lot, so let's bind it to a key:\
(global-set-key "\\C-co" 'occur)\
@end group\
@end smallexample\
\
@findex occur\
The @code\{occur\} command shows all the lines in the current buffer\
that contain a match for a regular expression.  Matching lines are\
shown in a buffer called @file\{*Occur*\}.  That buffer serves as a menu\
to jump to occurrences.\
\
@findex global-unset-key\
@cindex Unbinding key\
@cindex Key unbinding\
@need 1250\
Here is how to unbind a key, so it does not\
work:\
\
@smallexample\
@group\
;;; Unbind `C-x f'\
(global-unset-key "\\C-xf")\
@end group\
@end smallexample\
\
There is a reason for this unbinding: I found I inadvertently typed\
@w\{@kbd\{C-x f\}\} when I meant to type @kbd\{C-x C-f\}.  Rather than find a\
file, as I intended, I accidentally set the width for filled text,\
almost always to a width I did not want.  Since I hardly ever reset my\
default width, I simply unbound the key.\
\
@findex list-buffers, @r\{rebound\}\
@findex buffer-menu, @r\{bound to key\}\
@need 1250\
The following rebinds an existing key:\
\
@smallexample\
@group\
;;; Rebind `C-x C-b' for `buffer-menu'\
(global-set-key "\\C-x\\C-b" 'buffer-menu)\
@end group\
@end smallexample\
\
By default, @kbd\{C-x C-b\} runs the\
@code\{list-buffers\} command.  This command lists\
your buffers in @emph\{another\} window.  Since I\
almost always want to do something in that\
window, I prefer the  @code\{buffer-menu\}\
command, which not only lists the buffers,\
but moves point into that window.\
\
@node Keymaps, Loading Files, Keybindings, Emacs Initialization\
@section Keymaps\
@cindex Keymaps\
@cindex Rebinding keys\
\
Emacs uses @dfn\{keymaps\} to record which keys call which commands.\
When you use @code\{global-set-key\} to set the keybinding for a single\
command in all parts of Emacs, you are specifying the keybinding in\
@code\{current-global-map\}.\
\
Specific modes, such as C mode or Text mode, have their own keymaps;\
the mode-specific keymaps override the global map that is shared by\
all buffers.\
\
The @code\{global-set-key\} function binds, or rebinds, the global\
keymap.  For example, the following binds the key @kbd\{C-x C-b\} to the\
function @code\{buffer-menu\}:\
\
@smallexample\
(global-set-key "\\C-x\\C-b" 'buffer-menu)\
@end smallexample\
\
Mode-specific keymaps are bound using the @code\{define-key\} function,\
which takes a specific keymap as an argument, as well as the key and\
the command.  For example, my @file\{.emacs\} file contains the\
following expression to bind the @code\{texinfo-insert-@@group\} command\
to @kbd\{C-c C-c g\}:\
\
@smallexample\
@group\
(define-key texinfo-mode-map "\\C-c\\C-cg" 'texinfo-insert-@@group)\
@end group\
@end smallexample\
\
@noindent\
The @code\{texinfo-insert-@@group\} function itself is a little extension\
to Texinfo mode that inserts @samp\{@@group\} into a Texinfo file.  I\
use this command all the time and prefer to type the three strokes\
@kbd\{C-c C-c g\} rather than the six strokes @kbd\{@@ g r o u p\}.\
(@samp\{@@group\} and its matching @samp\{@@end group\} are commands that\
keep all enclosed text together on one page; many multi-line examples\
in this book are surrounded by @samp\{@@group @dots\{\} @@end group\}.)\
\
@need 1250\
Here is the @code\{texinfo-insert-@@group\} function definition:\
\
@smallexample\
@group\
(defun texinfo-insert-@@group ()\
  "Insert the string @@group in a Texinfo buffer."\
  (interactive)\
  (beginning-of-line)\
  (insert "@@group\\n"))\
@end group\
@end smallexample\
\
(Of course, I could have used Abbrev mode to save typing, rather than\
write a function to insert a word; but I prefer key strokes consistent\
with other Texinfo mode key bindings.)\
\
You will see numerous @code\{define-key\} expressions in\
@file\{loaddefs.el\} as well as in the various mode libraries, such as\
@file\{cc-mode.el\} and @file\{lisp-mode.el\}.\
\
@xref\{Key Bindings, , Customizing Key Bindings, emacs, The GNU Emacs\
Manual\}, and @ref\{Keymaps, , Keymaps, elisp, The GNU Emacs Lisp\
Reference Manual\}, for more information about keymaps.\
\
@node Loading Files, Autoload, Keymaps, Emacs Initialization\
@section Loading Files\
@cindex Loading files\
@c findex load\
\
Many people in the GNU Emacs community have written extensions to\
Emacs.  As time goes by, these extensions are often included in new\
releases.  For example, the Calendar and Diary packages are now part\
of the standard GNU Emacs, as is Calc.\
\
You can use a @code\{load\} command to evaluate a complete file and\
thereby install all the functions and variables in the file into Emacs.\
For example:\
\
@c (auto-compression-mode t)\
\
@smallexample\
(load "~/emacs/slowsplit")\
@end smallexample\
\
This evaluates, i.e.@: loads, the @file\{slowsplit.el\} file or if it\
exists, the faster, byte compiled @file\{slowsplit.elc\} file from the\
@file\{emacs\} sub-directory of your home directory.  The file contains\
the function @code\{split-window-quietly\}, which John Robinson wrote in\
1989.\
\
The @code\{split-window-quietly\} function splits a window with the\
minimum of redisplay.  I installed it in 1989 because it worked well\
with the slow 1200 baud terminals I was then using.  Nowadays, I only\
occasionally come across such a slow connection, but I continue to use\
the function because I like the way it leaves the bottom half of a\
buffer in the lower of the new windows and the top half in the upper\
window.\
\
@need 1250\
To replace the key binding for the default\
@code\{split-window-vertically\}, you must also unset that key and bind\
the keys to @code\{split-window-quietly\}, like this:\
\
@smallexample\
@group\
(global-unset-key "\\C-x2")\
(global-set-key "\\C-x2" 'split-window-quietly)\
@end group\
@end smallexample\
\
@vindex load-path\
If you load many extensions, as I do, then instead of specifying the\
exact location of the extension file, as shown above, you can specify\
that directory as part of Emacs' @code\{load-path\}.  Then, when Emacs\
loads a file, it will search that directory as well as its default\
list of directories.  (The default list is specified in @file\{paths.h\}\
when Emacs is built.)\
\
@need 1250\
The following command adds your @file\{~/emacs\} directory to the\
existing load path:\
\
@smallexample\
@group\
;;; Emacs Load Path\
(setq load-path (cons "~/emacs" load-path))\
@end group\
@end smallexample\
\
Incidentally, @code\{load-library\} is an interactive interface to the\
@code\{load\} function.  The complete function looks like this:\
\
@findex load-library\
@smallexample\
@group\
(defun load-library (library)\
  "Load the library named LIBRARY.\
This is an interface to the function `load'."\
  (interactive\
   (list (completing-read "Load library: "\
			  (apply-partially 'locate-file-completion-table\
                                           load-path\
                                           (get-load-suffixes)))))\
  (load library))\
@end group\
@end smallexample\
\
The name of the function, @code\{load-library\}, comes from the use of\
`library' as a conventional synonym for `file'.  The source for the\
@code\{load-library\} command is in the @file\{files.el\} library.\
\
Another interactive command that does a slightly different job is\
@code\{load-file\}.  @xref\{Lisp Libraries, , Libraries of Lisp Code for\
Emacs, emacs, The GNU Emacs Manual\}, for information on the\
distinction between @code\{load-library\} and this command.\
\
@node Autoload, Simple Extension, Loading Files, Emacs Initialization\
@section Autoloading\
@findex autoload\
\
Instead of installing a function by loading the file that contains it,\
or by evaluating the function definition, you can make the function\
available but not actually install it until it is first called.  This\
is called @dfn\{autoloading\}.\
\
When you execute an autoloaded function, Emacs automatically evaluates\
the file that contains the definition, and then calls the function.\
\
Emacs starts quicker with autoloaded functions, since their libraries\
are not loaded right away; but you need to wait a moment when you\
first use such a function, while its containing file is evaluated.\
\
Rarely used functions are frequently autoloaded.  The\
@file\{loaddefs.el\} library contains hundreds of autoloaded functions,\
from @code\{bookmark-set\} to @code\{wordstar-mode\}.  Of course, you may\
come to use a `rare' function frequently.  When you do, you should\
load that function's file with a @code\{load\} expression in your\
@file\{.emacs\} file.\
\
In my @file\{.emacs\} file, I load 14 libraries that contain functions\
that would otherwise be autoloaded.  (Actually, it would have been\
better to include these files in my `dumped' Emacs, but I forgot.\
@xref\{Building Emacs, , Building Emacs, elisp, The GNU Emacs Lisp\
Reference Manual\}, and the @file\{INSTALL\} file for more about\
dumping.)\
\
You may also want to include autoloaded expressions in your @file\{.emacs\}\
file.  @code\{autoload\} is a built-in function that takes up to five\
arguments, the final three of which are optional.  The first argument\
is the name of the function to be autoloaded; the second is the name\
of the file to be loaded.  The third argument is documentation for the\
function, and the fourth tells whether the function can be called\
interactively.  The fifth argument tells what type of\
object---@code\{autoload\} can handle a keymap or macro as well as a\
function (the default is a function).\
\
@need 800\
Here is a typical example:\
\
@smallexample\
@group\
(autoload 'html-helper-mode\
  "html-helper-mode" "Edit HTML documents" t)\
@end group\
@end smallexample\
\
@noindent\
(@code\{html-helper-mode\} is an older alternative to @code\{html-mode\},\
which is a standard part of the distribution.)\
\
@noindent\
This expression autoloads the @code\{html-helper-mode\} function.  It\
takes it from the @file\{html-helper-mode.el\} file (or from the byte\
compiled version @file\{html-helper-mode.elc\}, if that exists.)  The\
file must be located in a directory specified by @code\{load-path\}.\
The documentation says that this is a mode to help you edit documents\
written in the HyperText Markup Language.  You can call this mode\
interactively by typing @kbd\{M-x html-helper-mode\}.  (You need to\
duplicate the function's regular documentation in the autoload\
expression because the regular function is not yet loaded, so its\
documentation is not available.)\
\
@xref\{Autoload, , Autoload, elisp, The GNU Emacs Lisp Reference\
Manual\}, for more information.\
\
@node Simple Extension, X11 Colors, Autoload, Emacs Initialization\
@section A Simple Extension: @code\{line-to-top-of-window\}\
@findex line-to-top-of-window\
@cindex Simple extension in @file\{.emacs\} file\
\
Here is a simple extension to Emacs that moves the line point is on to\
the top of the window.  I use this all the time, to make text easier\
to read.\
\
You can put the following code into a separate file and then load it\
from your @file\{.emacs\} file, or you can include it within your\
@file\{.emacs\} file.\
\
@need 1250\
Here is the definition:\
\
@smallexample\
@group\
;;; Line to top of window;\
;;; replace three keystroke sequence  C-u 0 C-l\
(defun line-to-top-of-window ()\
  "Move the line point is on to top of window."\
  (interactive)\
  (recenter 0))\
@end group\
@end smallexample\
\
@need 1250\
Now for the keybinding.\
\
Nowadays, function keys as well as mouse button events and\
non-@sc\{ascii\} characters are written within square brackets, without\
quotation marks.  (In Emacs version 18 and before, you had to write\
different function key bindings for each different make of terminal.)\
\
I bind @code\{line-to-top-of-window\} to my @key\{F6\} function key like\
this:\
\
@smallexample\
(global-set-key [f6] 'line-to-top-of-window)\
@end smallexample\
\
For more information, see @ref\{Init Rebinding, , Rebinding Keys in\
Your Init File, emacs, The GNU Emacs Manual\}.\
\
@cindex Conditional 'twixt two versions of Emacs\
@cindex Version of Emacs, choosing\
@cindex Emacs version, choosing\
If you run two versions of GNU Emacs, such as versions 22 and 23, and\
use one @file\{.emacs\} file, you can select which code to evaluate with\
the following conditional:\
\
@smallexample\
@group\
(cond\
 ((= 22 emacs-major-version)\
  ;; evaluate version 22 code\
  ( @dots\{\} ))\
 ((= 23 emacs-major-version)\
  ;; evaluate version 23 code\
  ( @dots\{\} )))\
@end group\
@end smallexample\
\
For example, in contrast to version 20, more recent versions blink\
their cursors by default.  I hate such blinking, as well as other\
features, so I placed the following in my @file\{.emacs\}\
file@footnote\{When I start instances of Emacs that do not load my\
@file\{.emacs\} file or any site file, I also turn off blinking:\
\
@smallexample\
emacs -q --no-site-file -eval '(blink-cursor-mode nil)'\
\
@exdent Or nowadays, using an even more sophisticated set of options,\
\
emacs -Q - D\
@end smallexample\
\}:\
\
@smallexample\
@group\
(when (>= emacs-major-version 21)\
  (blink-cursor-mode 0)\
  ;; Insert newline when you press `C-n' (next-line)\
  ;; at the end of the buffer\
  (setq next-line-add-newlines t)\
@end group\
@group\
  ;; Turn on image viewing\
  (auto-image-file-mode t)\
@end group\
@group\
  ;; Turn on menu bar (this bar has text)\
  ;; (Use numeric argument to turn on)\
  (menu-bar-mode 1)\
@end group\
@group\
  ;; Turn off tool bar (this bar has icons)\
  ;; (Use numeric argument to turn on)\
  (tool-bar-mode nil)\
@end group\
@group\
  ;; Turn off tooltip mode for tool bar\
  ;; (This mode causes icon explanations to pop up)\
  ;; (Use numeric argument to turn on)\
  (tooltip-mode nil)\
  ;; If tooltips turned on, make tips appear promptly\
  (setq tooltip-delay 0.1)  ; default is 0.7 second\
   )\
@end group\
@end smallexample\
\
@node X11 Colors, Miscellaneous, Simple Extension, Emacs Initialization\
@section X11 Colors\
\
You can specify colors when you use Emacs with the MIT X Windowing\
system.\
\
I dislike the default colors and specify my own.\
\
@need 1250\
Here are the expressions in my @file\{.emacs\}\
file that set values:\
\
@smallexample\
@group\
;; Set cursor color\
(set-cursor-color "white")\
\
;; Set mouse color\
(set-mouse-color "white")\
\
;; Set foreground and background\
(set-foreground-color "white")\
(set-background-color "darkblue")\
@end group\
\
@group\
;;; Set highlighting colors for isearch and drag\
(set-face-foreground 'highlight "white")\
(set-face-background 'highlight "blue")\
@end group\
\
@group\
(set-face-foreground 'region "cyan")\
(set-face-background 'region "blue")\
@end group\
\
@group\
(set-face-foreground 'secondary-selection "skyblue")\
(set-face-background 'secondary-selection "darkblue")\
@end group\
\
@group\
;; Set calendar highlighting colors\
(setq calendar-load-hook\
      '(lambda ()\
         (set-face-foreground 'diary-face   "skyblue")\
         (set-face-background 'holiday-face "slate blue")\
         (set-face-foreground 'holiday-face "white")))\
@end group\
@end smallexample\
\
The various shades of blue soothe my eye and prevent me from seeing\
the screen flicker.\
\
Alternatively, I could have set my specifications in various X\
initialization files.  For example, I could set the foreground,\
background, cursor, and pointer (i.e., mouse) colors in my\
@file\{~/.Xresources\} file like this:\
\
@smallexample\
@group\
Emacs*foreground:   white\
Emacs*background:   darkblue\
Emacs*cursorColor:  white\
Emacs*pointerColor: white\
@end group\
@end smallexample\
\
In any event, since it is not part of Emacs, I set the root color of\
my X window in my @file\{~/.xinitrc\} file, like this@footnote\{I also\
run more modern window managers, such as Enlightenment, Gnome, or KDE;\
in those cases, I often specify an image rather than a plain color.\}:\
\
@smallexample\
xsetroot -solid Navy -fg white &\
@end smallexample\
\
@need 1700\
@node Miscellaneous, Mode Line, X11 Colors, Emacs Initialization\
@section Miscellaneous Settings for a @file\{.emacs\} File\
\
@need 1250\
Here are a few miscellaneous settings:\
@sp 1\
\
@itemize @minus\
@item\
Set the shape and color of the mouse cursor:\
\
@smallexample\
@group\
; Cursor shapes are defined in\
; `/usr/include/X11/cursorfont.h';\
; for example, the `target' cursor is number 128;\
; the `top_left_arrow' cursor is number 132.\
@end group\
\
@group\
(let ((mpointer (x-get-resource "*mpointer"\
                                "*emacs*mpointer")))\
  ;; If you have not set your mouse pointer\
  ;;     then set it, otherwise leave as is:\
  (if (eq mpointer nil)\
      (setq mpointer "132")) ; top_left_arrow\
@end group\
@group\
  (setq x-pointer-shape (string-to-int mpointer))\
  (set-mouse-color "white"))\
@end group\
@end smallexample\
\
@item\
Or you can set the values of a variety of features in an alist, like\
this:\
\
@smallexample\
@group\
(setq-default\
 default-frame-alist\
 '((cursor-color . "white")\
   (mouse-color . "white")\
   (foreground-color . "white")\
   (background-color . "DodgerBlue4")\
   ;; (cursor-type . bar)\
   (cursor-type . box)\
@end group\
@group\
   (tool-bar-lines . 0)\
   (menu-bar-lines . 1)\
   (width . 80)\
   (height . 58)\
   (font .\
         "-Misc-Fixed-Medium-R-Normal--20-200-75-75-C-100-ISO8859-1")\
   ))\
@end group\
@end smallexample\
\
@item\
Convert @kbd\{@key\{CTRL\}-h\} into @key\{DEL\} and @key\{DEL\}\
into @kbd\{@key\{CTRL\}-h\}.@*\
(Some older keyboards needed this, although I have not seen the\
problem recently.)\
\
@smallexample\
@group\
;; Translate `C-h' to <DEL>.\
; (keyboard-translate ?\\C-h ?\\C-?)\
\
;; Translate <DEL> to `C-h'.\
(keyboard-translate ?\\C-? ?\\C-h)\
@end group\
@end smallexample\
\
@item Turn off a blinking cursor!\
\
@smallexample\
@group\
(if (fboundp 'blink-cursor-mode)\
    (blink-cursor-mode -1))\
@end group\
@end smallexample\
\
@noindent\
or start GNU Emacs with the command @code\{emacs -nbc\}.\
\
@need 1250\
@item When using `grep'@*\
@samp\{-i\}@w\{  \}   Ignore case distinctions@*\
@samp\{-n\}@w\{  \}   Prefix each line of output with line number@*\
@samp\{-H\}@w\{  \}   Print the filename for each match.@*\
@samp\{-e\}@w\{  \}   Protect patterns beginning with a hyphen character, @samp\{-\}\
\
@smallexample\
(setq grep-command "grep -i -nH -e ")\
@end smallexample\
\
@ignore\
@c Evidently, no longer needed in GNU Emacs 22\
\
item Automatically uncompress compressed files when visiting them\
\
smallexample\
(load "uncompress")\
end smallexample\
\
@end ignore\
\
@item Find an existing buffer, even if it has a different name@*\
This avoids problems with symbolic links.\
\
@smallexample\
(setq find-file-existing-other-name t)\
@end smallexample\
\
@item Set your language environment and default input method\
\
@smallexample\
@group\
(set-language-environment "latin-1")\
;; Remember you can enable or disable multilingual text input\
;; with the @code\{toggle-input-method'\} (@kbd\{C-\\\}) command\
(setq default-input-method "latin-1-prefix")\
@end group\
@end smallexample\
\
If you want to write with Chinese `GB' characters, set this instead:\
\
@smallexample\
@group\
(set-language-environment "Chinese-GB")\
(setq default-input-method "chinese-tonepy")\
@end group\
@end smallexample\
@end itemize\
\
@subsubheading Fixing Unpleasant Key Bindings\
@cindex Key bindings, fixing\
@cindex Bindings, key, fixing unpleasant\
\
Some systems bind keys unpleasantly.  Sometimes, for example, the\
@key\{CTRL\} key appears in an awkward spot rather than at the far left\
of the home row.\
\
Usually, when people fix these sorts of keybindings, they do not\
change their @file\{~/.emacs\} file.  Instead, they bind the proper keys\
on their consoles with the @code\{loadkeys\} or @code\{install-keymap\}\
commands in their boot script and then include @code\{xmodmap\} commands\
in their @file\{.xinitrc\} or @file\{.Xsession\} file for X Windows.\
\
@need 1250\
@noindent\
For a boot script:\
\
@smallexample\
@group\
loadkeys /usr/share/keymaps/i386/qwerty/emacs2.kmap.gz\
@exdent or\
install-keymap emacs2\
@end group\
@end smallexample\
\
@need 1250\
@noindent\
For a @file\{.xinitrc\} or @file\{.Xsession\} file when the @key\{Caps\
Lock\} key is at the far left of the home row:\
\
@smallexample\
@group\
# Bind the key labeled `Caps Lock' to `Control'\
# (Such a broken user interface suggests that keyboard manufacturers\
# think that computers are typewriters from 1885.)\
\
xmodmap -e "clear Lock"\
xmodmap -e "add Control = Caps_Lock"\
@end group\
@end smallexample\
\
@need 1250\
@noindent\
In a @file\{.xinitrc\} or @file\{.Xsession\} file, to convert an @key\{ALT\}\
key to a @key\{META\} key:\
\
@smallexample\
@group\
# Some ill designed keyboards have a key labeled ALT and no Meta\
xmodmap -e "keysym Alt_L = Meta_L Alt_L"\
@end group\
@end smallexample\
\
@need 1700\
@node Mode Line,  , Miscellaneous, Emacs Initialization\
@section A Modified Mode Line\
@vindex mode-line-format\
@cindex Mode line format\
\
Finally, a feature I really like: a modified mode line.\
\
When I work over a network, I forget which machine I am using.  Also,\
I tend to I lose track of where I am, and which line point is on.\
\
So I reset my mode line to look like this:\
\
@smallexample\
-:-- foo.texi   rattlesnake:/home/bob/  Line 1  (Texinfo Fill) Top\
@end smallexample\
\
I am visiting a file called @file\{foo.texi\}, on my machine\
@file\{rattlesnake\} in my @file\{/home/bob\} buffer.  I am on line 1, in\
Texinfo mode, and am at the top of the buffer.\
\
@need 1200\
My @file\{.emacs\} file has a section that looks like this:\
\
@smallexample\
@group\
;; Set a Mode Line that tells me which machine, which directory,\
;; and which line I am on, plus the other customary information.\
(setq-default mode-line-format\
 (quote\
  (#("-" 0 1\
     (help-echo\
      "mouse-1: select window, mouse-2: delete others ..."))\
   mode-line-mule-info\
   mode-line-modified\
   mode-line-frame-identification\
   "    "\
@end group\
@group\
   mode-line-buffer-identification\
   "    "\
   (:eval (substring\
           (system-name) 0 (string-match "\\\\..+" (system-name))))\
   ":"\
   default-directory\
   #(" " 0 1\
     (help-echo\
      "mouse-1: select window, mouse-2: delete others ..."))\
   (line-number-mode " Line %l ")\
   global-mode-string\
@end group\
@group\
   #("   %[(" 0 6\
     (help-echo\
      "mouse-1: select window, mouse-2: delete others ..."))\
   (:eval (mode-line-mode-name))\
   mode-line-process\
   minor-mode-alist\
   #("%n" 0 2 (help-echo "mouse-2: widen" local-map (keymap ...)))\
   ")%] "\
   (-3 . "%P")\
   ;;   "-%-"\
   )))\
@end group\
@end smallexample\
\
@noindent\
Here, I redefine the default mode line.  Most of the parts are from\
the original; but I make a few changes.  I set the @emph\{default\} mode\
line format so as to permit various modes, such as Info, to override\
it.\
\
Many elements in the list are self-explanatory:\
@code\{mode-line-modified\} is a variable that tells whether the buffer\
has been modified, @code\{mode-name\} tells the name of the mode, and so\
on.  However, the format looks complicated because of two features we\
have not discussed.\
\
@cindex Properties, in mode line example\
The first string in the mode line is a dash or hyphen, @samp\{-\}.  In\
the old days, it would have been specified simply as @code\{"-"\}.  But\
nowadays, Emacs can add properties to a string, such as highlighting\
or, as in this case, a help feature.  If you place your mouse cursor\
over the hyphen, some help information appears (By default, you must\
wait seven-tenths of a second before the information appears.  You can\
change that timing by changing the value of @code\{tooltip-delay\}.)\
\
@need 1000\
The new string format has a special syntax:\
\
@smallexample\
#("-" 0 1 (help-echo "mouse-1: select window, ..."))\
@end smallexample\
\
@noindent\
The @code\{#(\} begins a list.  The first element of the list is the\
string itself, just one @samp\{-\}.  The second and third\
elements specify the range over which the fourth element applies.  A\
range starts @emph\{after\} a character, so a zero means the range\
starts just before the first character; a 1 means that the range ends\
just after the first character.  The third element is the property for\
the range.  It consists of a property list,  a\
property name, in this case, @samp\{help-echo\}, followed by a value, in this\
case, a string.  The second, third, and fourth elements of this new\
string format can be repeated.\
\
@xref\{Text Properties, , Text Properties, elisp, The GNU Emacs Lisp\
Reference Manual\}, and see @ref\{Mode Line Format, , Mode Line Format,\
elisp, The GNU Emacs Lisp Reference Manual\}, for more information.\
\
@code\{mode-line-buffer-identification\}\
displays the current buffer name.  It is a list\
beginning @code\{(#("%12b" 0 4 @dots\{\}\}.\
The @code\{#(\} begins the list.\
\
The @samp\{"%12b"\} displays the current buffer name, using the\
@code\{buffer-name\} function with which we are familiar; the `12'\
specifies the maximum number of characters that will be displayed.\
When a name has fewer characters, whitespace is added to fill out to\
this number.  (Buffer names can and often should be longer than 12\
characters; this length works well in a typical 80 column wide\
window.)\
\
@code\{:eval\} says to evaluate the following form and use the result as\
a string to display.  In this case, the expression displays the first\
component of the full system name.  The end of the first component is\
a @samp\{.\} (`period'), so I use the @code\{string-match\} function to\
tell me the length of the first component.  The substring from the\
zeroth character to that length is the name of the machine.\
\
@need 1250\
This is the expression:\
\
@smallexample\
@group\
(:eval (substring\
        (system-name) 0 (string-match "\\\\..+" (system-name))))\
@end group\
@end smallexample\
\
@samp\{%[\} and @samp\{%]\} cause a pair of square brackets\
to appear for each recursive editing level.  @samp\{%n\} says `Narrow'\
when narrowing is in effect.  @samp\{%P\} tells you the percentage of\
the buffer that is above the bottom of the window, or `Top', `Bottom',\
or `All'.  (A lower case @samp\{p\} tell you the percentage above the\
@emph\{top\} of the window.)  @samp\{%-\} inserts enough dashes to fill\
out the line.\
\
Remember, ``You don't have to like Emacs to like it'' --- your own\
Emacs can have different colors, different commands, and different\
keys than a default Emacs.\
\
On the other hand, if you want to bring up a plain `out of the box'\
Emacs, with no customization, type:\
\
@smallexample\
emacs -q\
@end smallexample\
\
@noindent\
This will start an Emacs that does @emph\{not\} load your\
@file\{~/.emacs\} initialization file.  A plain, default Emacs.  Nothing\
more.}