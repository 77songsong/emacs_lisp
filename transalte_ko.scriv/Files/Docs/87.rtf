{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node while, dolist dotimes, Loops & Recursion, Loops & Recursion\
@comment  node-name,  next,  previous,  up\
@section @code\{while\}\
@cindex Loops\
@findex while\
\
The @code\{while\} special form tests whether the value returned by\
evaluating its first argument is true or false.  This is similar to what\
the Lisp interpreter does with an @code\{if\}; what the interpreter does\
next, however, is different.\
\
In a @code\{while\} expression, if the value returned by evaluating the\
first argument is false, the Lisp interpreter skips the rest of the\
expression (the @dfn\{body\} of the expression) and does not evaluate it.\
However, if the value is true, the Lisp interpreter evaluates the body\
of the expression and then again tests whether the first argument to\
@code\{while\} is true or false.  If the value returned by evaluating the\
first argument is again true, the Lisp interpreter again evaluates the\
body of the expression.\
\
@need 1200\
The template for a @code\{while\} expression looks like this:\
\
@smallexample\
@group\
(while @var\{true-or-false-test\}\
  @var\{body\}@dots\{\})\
@end group\
@end smallexample\
\
@menu\
* Looping with while::          Repeat so long as test returns true.\
* Loop Example::                A @code\{while\} loop that uses a list.\
* print-elements-of-list::      Uses @code\{while\}, @code\{car\}, @code\{cdr\}.\
* Incrementing Loop::           A loop with an incrementing counter.\
* Incrementing Loop Details::\
* Decrementing Loop::           A loop with a decrementing counter.\
@end menu\
\
@node Looping with while, Loop Example, while, while\
@ifnottex\
@unnumberedsubsec Looping with @code\{while\}\
@end ifnottex\
\
So long as the true-or-false-test of the @code\{while\} expression\
returns a true value when it is evaluated, the body is repeatedly\
evaluated.  This process is called a loop since the Lisp interpreter\
repeats the same thing again and again, like an airplane doing a loop.\
When the result of evaluating the true-or-false-test is false, the\
Lisp interpreter does not evaluate the rest of the @code\{while\}\
expression and `exits the loop'.\
\
Clearly, if the value returned by evaluating the first argument to\
@code\{while\} is always true, the body following will be evaluated\
again and again @dots\{\} and again @dots\{\} forever.  Conversely, if the\
value returned is never true, the expressions in the body will never\
be evaluated.  The craft of writing a @code\{while\} loop consists of\
choosing a mechanism such that the true-or-false-test returns true\
just the number of times that you want the subsequent expressions to\
be evaluated, and then have the test return false.\
\
The value returned by evaluating a @code\{while\} is the value of the\
true-or-false-test.  An interesting consequence of this is that a\
@code\{while\} loop that evaluates without error will return @code\{nil\}\
or false regardless of whether it has looped 1 or 100 times or none at\
all.  A @code\{while\} expression that evaluates successfully never\
returns a true value!  What this means is that @code\{while\} is always\
evaluated for its side effects, which is to say, the consequences of\
evaluating the expressions within the body of the @code\{while\} loop.\
This makes sense.  It is not the mere act of looping that is desired,\
but the consequences of what happens when the expressions in the loop\
are repeatedly evaluated.\
\
@node Loop Example, print-elements-of-list, Looping with while, while\
@comment  node-name,  next,  previous,  up\
@subsection A @code\{while\} Loop and a List\
\
A common way to control a @code\{while\} loop is to test whether a list\
has any elements.  If it does, the loop is repeated; but if it does not,\
the repetition is ended.  Since this is an important technique, we will\
create a short example to illustrate it.\
\
A simple way to test whether a list has elements is to evaluate the\
list: if it has no elements, it is an empty list and will return the\
empty list, @code\{()\}, which is a synonym for @code\{nil\} or false.  On\
the other hand, a list with elements will return those elements when it\
is evaluated.  Since Emacs Lisp considers as true any value that is not\
@code\{nil\}, a list that returns elements will test true in a\
@code\{while\} loop.\
\
@need 1200\
For example, you can set the variable @code\{empty-list\} to @code\{nil\} by\
evaluating the following @code\{setq\} expression:\
\
@smallexample\
(setq empty-list ())\
@end smallexample\
\
@noindent\
After evaluating the @code\{setq\} expression, you can evaluate the\
variable @code\{empty-list\} in the usual way, by placing the cursor after\
the symbol and typing @kbd\{C-x C-e\}; @code\{nil\} will appear in your\
echo area:\
\
@smallexample\
empty-list\
@end smallexample\
\
On the other hand, if you set a variable to be a list with elements, the\
list will appear when you evaluate the variable, as you can see by\
evaluating the following two expressions:\
\
@smallexample\
@group\
(setq animals '(gazelle giraffe lion tiger))\
\
animals\
@end group\
@end smallexample\
\
Thus, to create a @code\{while\} loop that tests whether there are any\
items in the list @code\{animals\}, the first part of the loop will be\
written like this:\
\
@smallexample\
@group\
(while animals\
       @dots\{\}\
@end group\
@end smallexample\
\
@noindent\
When the @code\{while\} tests its first argument, the variable\
@code\{animals\} is evaluated.  It returns a list.  So long as the list\
has elements, the @code\{while\} considers the results of the test to be\
true; but when the list is empty, it considers the results of the test\
to be false.\
\
To prevent the @code\{while\} loop from running forever, some mechanism\
needs to be provided to empty the list eventually.  An oft-used\
technique is to have one of the subsequent forms in the @code\{while\}\
expression set the value of the list to be the @sc\{cdr\} of the list.\
Each time the @code\{cdr\} function is evaluated, the list will be made\
shorter, until eventually only the empty list will be left.  At this\
point, the test of the @code\{while\} loop will return false, and the\
arguments to the @code\{while\} will no longer be evaluated.\
\
For example, the list of animals bound to the variable @code\{animals\}\
can be set to be the @sc\{cdr\} of the original list with the\
following expression:\
\
@smallexample\
(setq animals (cdr animals))\
@end smallexample\
\
@noindent\
If you have evaluated the previous expressions and then evaluate this\
expression, you will see @code\{(giraffe lion tiger)\} appear in the echo\
area.  If you evaluate the expression again, @code\{(lion tiger)\} will\
appear in the echo area.  If you evaluate it again and yet again,\
@code\{(tiger)\} appears and then the empty list, shown by @code\{nil\}.\
\
A template for a @code\{while\} loop that uses the @code\{cdr\} function\
repeatedly to cause the true-or-false-test eventually to test false\
looks like this:\
\
@smallexample\
@group\
(while @var\{test-whether-list-is-empty\}\
  @var\{body\}@dots\{\}\
  @var\{set-list-to-cdr-of-list\})\
@end group\
@end smallexample\
\
This test and use of @code\{cdr\} can be put together in a function that\
goes through a list and prints each element of the list on a line of its\
own.\
\
@node print-elements-of-list, Incrementing Loop, Loop Example, while\
@subsection An Example: @code\{print-elements-of-list\}\
@findex print-elements-of-list\
\
The @code\{print-elements-of-list\} function illustrates a @code\{while\}\
loop with a list.\
\
@cindex @file\{*scratch*\} buffer\
The function requires several lines for its output.  If you are\
reading this in a recent instance of GNU Emacs,\
@c GNU Emacs 21, GNU Emacs 22, or a later version,\
you can evaluate the following expression inside of Info, as usual.\
\
If you are using an earlier version of Emacs, you need to copy the\
necessary expressions to your @file\{*scratch*\} buffer and evaluate\
them there.  This is because the echo area had only one line in the\
earlier versions.\
\
You can copy the expressions by marking the beginning of the region\
with @kbd\{C-@key\{SPC\}\} (@code\{set-mark-command\}), moving the cursor to\
the end of the region and then copying the region using @kbd\{M-w\}\
(@code\{kill-ring-save\}, which calls @code\{copy-region-as-kill\} and\
then provides visual feedback).  In the @file\{*scratch*\}\
buffer, you can yank the expressions back by typing @kbd\{C-y\}\
(@code\{yank\}).\
\
After you have copied the expressions to the @file\{*scratch*\} buffer,\
evaluate each expression in turn.  Be sure to evaluate the last\
expression, @code\{(print-elements-of-list animals)\}, by typing\
@kbd\{C-u C-x C-e\}, that is, by giving an argument to\
@code\{eval-last-sexp\}.  This will cause the result of the evaluation\
to be printed in the @file\{*scratch*\} buffer instead of being printed\
in the echo area.  (Otherwise you will see something like this in your\
echo area: @code\{^Jgazelle^J^Jgiraffe^J^Jlion^J^Jtiger^Jnil\}, in which\
each @samp\{^J\} stands for a `newline'.)\
\
@need 1500\
In a recent instance of GNU Emacs, you can evaluate these expressions\
directly in the Info buffer, and the echo area will grow to show the\
results.\
\
@smallexample\
@group\
(setq animals '(gazelle giraffe lion tiger))\
\
(defun print-elements-of-list (list)\
  "Print each element of LIST on a line of its own."\
  (while list\
    (print (car list))\
    (setq list (cdr list))))\
\
(print-elements-of-list animals)\
@end group\
@end smallexample\
\
@need 1200\
@noindent\
When you evaluate the three expressions in sequence, you will see\
this:\
\
@smallexample\
@group\
gazelle\
\
giraffe\
\
lion\
\
tiger\
nil\
@end group\
@end smallexample\
\
Each element of the list is printed on a line of its own (that is what\
the function @code\{print\} does) and then the value returned by the\
function is printed.  Since the last expression in the function is the\
@code\{while\} loop, and since @code\{while\} loops always return\
@code\{nil\}, a @code\{nil\} is printed after the last element of the list.\
\
@node Incrementing Loop, Incrementing Loop Details, print-elements-of-list, while\
@comment  node-name,  next,  previous,  up\
@subsection A Loop with an Incrementing Counter\
\
A loop is not useful unless it stops when it ought.  Besides\
controlling a loop with a list, a common way of stopping a loop is to\
write the first argument as a test that returns false when the correct\
number of repetitions are complete.  This means that the loop must\
have a counter---an expression that counts how many times the loop\
repeats itself.\
\
@node Incrementing Loop Details, Decrementing Loop, Incrementing Loop, while\
@ifnottex\
@unnumberedsubsec Details of an Incrementing Loop\
@end ifnottex\
\
The test for a loop with an incrementing counter can be an expression\
such as @code\{(< count desired-number)\} which returns @code\{t\} for\
true if the value of @code\{count\} is less than the\
@code\{desired-number\} of repetitions and @code\{nil\} for false if the\
value of @code\{count\} is equal to or is greater than the\
@code\{desired-number\}.  The expression that increments the count can\
be a simple @code\{setq\} such as @code\{(setq count (1+ count))\}, where\
@code\{1+\} is a built-in function in Emacs Lisp that adds 1 to its\
argument.  (The expression @w\{@code\{(1+ count)\}\} has the same result\
as @w\{@code\{(+ count 1)\}\}, but is easier for a human to read.)\
\
@need 1250\
The template for a @code\{while\} loop controlled by an incrementing\
counter looks like this:\
\
@smallexample\
@group\
@var\{set-count-to-initial-value\}\
(while (< count desired-number)         ; @r\{true-or-false-test\}\
  @var\{body\}@dots\{\}\
  (setq count (1+ count)))              ; @r\{incrementer\}\
@end group\
@end smallexample\
\
@noindent\
Note that you need to set the initial value of @code\{count\}; usually it\
is set to 1.\
\
@menu\
* Incrementing Example::        Counting pebbles in a triangle.\
* Inc Example parts::           The parts of the function definition.\
* Inc Example altogether::      Putting the function definition together.\
@end menu\
\
@node Incrementing Example, Inc Example parts, Incrementing Loop Details, Incrementing Loop Details\
@unnumberedsubsubsec  Example with incrementing counter\
\
Suppose you are playing on the beach and decide to make a triangle of\
pebbles, putting one pebble in the first row, two in the second row,\
three in the third row and so on, like this:\
\
@sp 1\
@c pebble diagram\
@ifnottex\
@smallexample\
@group\
               *\
              * *\
             * * *\
            * * * *\
@end group\
@end smallexample\
@end ifnottex\
@iftex\
@smallexample\
@group\
               @bullet\{\}\
              @bullet\{\} @bullet\{\}\
             @bullet\{\} @bullet\{\} @bullet\{\}\
            @bullet\{\} @bullet\{\} @bullet\{\} @bullet\{\}\
@end group\
@end smallexample\
@end iftex\
@sp 1\
\
@noindent\
(About 2500 years ago, Pythagoras and others developed the beginnings of\
number theory by considering questions such as this.)\
\
Suppose you want to know how many pebbles you will need to make a\
triangle with 7 rows?\
\
Clearly, what you need to do is add up the numbers from 1 to 7.  There\
are two ways to do this; start with the smallest number, one, and add up\
the list in sequence, 1, 2, 3, 4 and so on; or start with the largest\
number and add the list going down: 7, 6, 5, 4 and so on.  Because both\
mechanisms illustrate common ways of writing @code\{while\} loops, we will\
create two examples, one counting up and the other counting down.  In\
this first example, we will start with 1 and add 2, 3, 4 and so on.\
\
If you are just adding up a short list of numbers, the easiest way to do\
it is to add up all the numbers at once.  However, if you do not know\
ahead of time how many numbers your list will have, or if you want to be\
prepared for a very long list, then you need to design your addition so\
that what you do is repeat a simple process many times instead of doing\
a more complex process once.\
\
For example, instead of adding up all the pebbles all at once, what you\
can do is add the number of pebbles in the first row, 1, to the number\
in the second row, 2, and then add the total of those two rows to the\
third row, 3.  Then you can add the number in the fourth row, 4, to the\
total of the first three rows; and so on.\
\
The critical characteristic of the process is that each repetitive\
action is simple.  In this case, at each step we add only two numbers,\
the number of pebbles in the row and the total already found.  This\
process of adding two numbers is repeated again and again until the last\
row has been added to the total of all the preceding rows.  In a more\
complex loop the repetitive action might not be so simple, but it will\
be simpler than doing everything all at once.\
\
@node Inc Example parts, Inc Example altogether, Incrementing Example, Incrementing Loop Details\
@unnumberedsubsubsec The parts of the function definition\
\
The preceding analysis gives us the bones of our function definition:\
first, we will need a variable that we can call @code\{total\} that will\
be the total number of pebbles.  This will be the value returned by\
the function.\
\
Second, we know that the function will require an argument: this\
argument will be the total number of rows in the triangle.  It can be\
called @code\{number-of-rows\}.\
\
Finally, we need a variable to use as a counter.  We could call this\
variable @code\{counter\}, but a better name is @code\{row-number\}.  That\
is because what the counter does in this function is count rows, and a\
program should be written to be as understandable as possible.\
\
When the Lisp interpreter first starts evaluating the expressions in the\
function, the value of @code\{total\} should be set to zero, since we have\
not added anything to it.  Then the function should add the number of\
pebbles in the first row to the total, and then add the number of\
pebbles in the second to the total, and then add the number of\
pebbles in the third row to the total, and so on, until there are no\
more rows left to add.\
\
Both @code\{total\} and @code\{row-number\} are used only inside the\
function, so they can be declared as local variables with @code\{let\}\
and given initial values.  Clearly, the initial value for @code\{total\}\
should be 0.  The initial value of @code\{row-number\} should be 1,\
since we start with the first row.  This means that the @code\{let\}\
statement will look like this:\
\
@smallexample\
@group\
  (let ((total 0)\
        (row-number 1))\
    @var\{body\}@dots\{\})\
@end group\
@end smallexample\
\
After the internal variables are declared and bound to their initial\
values, we can begin the @code\{while\} loop.  The expression that serves\
as the test should return a value of @code\{t\} for true so long as the\
@code\{row-number\} is less than or equal to the @code\{number-of-rows\}.\
(If the expression tests true only so long as the row number is less\
than the number of rows in the triangle, the last row will never be\
added to the total; hence the row number has to be either less than or\
equal to the number of rows.)\
\
@need 1500\
@findex <= @r\{(less than or equal)\}\
Lisp provides the @code\{<=\} function that returns true if the value of\
its first argument is less than or equal to the value of its second\
argument and false otherwise.  So the expression that the @code\{while\}\
will evaluate as its test should look like this:\
\
@smallexample\
(<= row-number number-of-rows)\
@end smallexample\
\
The total number of pebbles can be found by repeatedly adding the number\
of pebbles in a row to the total already found.  Since the number of\
pebbles in the row is equal to the row number, the total can be found by\
adding the row number to the total.  (Clearly, in a more complex\
situation, the number of pebbles in the row might be related to the row\
number in a more complicated way; if this were the case, the row number\
would be replaced by the appropriate expression.)\
\
@smallexample\
(setq total (+ total row-number))\
@end smallexample\
\
@noindent\
What this does is set the new value of @code\{total\} to be equal to the\
sum of adding the number of pebbles in the row to the previous total.\
\
After setting the value of @code\{total\}, the conditions need to be\
established for the next repetition of the loop, if there is one.  This\
is done by incrementing the value of the @code\{row-number\} variable,\
which serves as a counter.  After the @code\{row-number\} variable has\
been incremented, the true-or-false-test at the beginning of the\
@code\{while\} loop tests whether its value is still less than or equal to\
the value of the @code\{number-of-rows\} and if it is, adds the new value\
of the @code\{row-number\} variable to the @code\{total\} of the previous\
repetition of the loop.\
\
@need 1200\
The built-in Emacs Lisp function @code\{1+\} adds 1 to a number, so the\
@code\{row-number\} variable can be incremented with this expression:\
\
@smallexample\
(setq row-number (1+ row-number))\
@end smallexample\
\
@node Inc Example altogether,  , Inc Example parts, Incrementing Loop Details\
@unnumberedsubsubsec Putting the function definition together\
\
We have created the parts for the function definition; now we need to\
put them together.\
\
@need 800\
First, the contents of the @code\{while\} expression:\
\
@smallexample\
@group\
(while (<= row-number number-of-rows)   ; @r\{true-or-false-test\}\
  (setq total (+ total row-number))\
  (setq row-number (1+ row-number)))    ; @r\{incrementer\}\
@end group\
@end smallexample\
\
Along with the @code\{let\} expression varlist, this very nearly\
completes the body of the function definition.  However, it requires\
one final element, the need for which is somewhat subtle.\
\
The final touch is to place the variable @code\{total\} on a line by\
itself after the @code\{while\} expression.  Otherwise, the value returned\
by the whole function is the value of the last expression that is\
evaluated in the body of the @code\{let\}, and this is the value\
returned by the @code\{while\}, which is always @code\{nil\}.\
\
This may not be evident at first sight.  It almost looks as if the\
incrementing expression is the last expression of the whole function.\
But that expression is part of the body of the @code\{while\}; it is the\
last element of the list that starts with the symbol @code\{while\}.\
Moreover, the whole of the @code\{while\} loop is a list within the body\
of the @code\{let\}.\
\
@need 1250\
In outline, the function will look like this:\
\
@smallexample\
@group\
(defun @var\{name-of-function\} (@var\{argument-list\})\
  "@var\{documentation\}@dots\{\}"\
  (let (@var\{varlist\})\
    (while (@var\{true-or-false-test\})\
      @var\{body-of-while\}@dots\{\} )\
    @dots\{\} ))                    ; @r\{Need final expression here.\}\
@end group\
@end smallexample\
\
The result of evaluating the @code\{let\} is what is going to be returned\
by the @code\{defun\} since the @code\{let\} is not embedded within any\
containing list, except for the @code\{defun\} as a whole.  However, if\
the @code\{while\} is the last element of the @code\{let\} expression, the\
function will always return @code\{nil\}.  This is not what we want!\
Instead, what we want is the value of the variable @code\{total\}.  This\
is returned by simply placing the symbol as the last element of the list\
starting with @code\{let\}.  It gets evaluated after the preceding\
elements of the list are evaluated, which means it gets evaluated after\
it has been assigned the correct value for the total.\
\
It may be easier to see this by printing the list starting with\
@code\{let\} all on one line.  This format makes it evident that the\
@var\{varlist\} and @code\{while\} expressions are the second and third\
elements of the list starting with @code\{let\}, and the @code\{total\} is\
the last element:\
\
@smallexample\
@group\
(let (@var\{varlist\}) (while (@var\{true-or-false-test\}) @var\{body-of-while\}@dots\{\} ) total)\
@end group\
@end smallexample\
\
@need 1200\
Putting everything together, the @code\{triangle\} function definition\
looks like this:\
\
@smallexample\
@group\
(defun triangle (number-of-rows)    ; @r\{Version with\}\
                                    ; @r\{  incrementing counter.\}\
  "Add up the number of pebbles in a triangle.\
The first row has one pebble, the second row two pebbles,\
the third row three pebbles, and so on.\
The argument is NUMBER-OF-ROWS."\
@end group\
@group\
  (let ((total 0)\
        (row-number 1))\
    (while (<= row-number number-of-rows)\
      (setq total (+ total row-number))\
      (setq row-number (1+ row-number)))\
    total))\
@end group\
@end smallexample\
\
@need 1200\
After you have installed @code\{triangle\} by evaluating the function, you\
can try it out.  Here are two examples:\
\
@smallexample\
@group\
(triangle 4)\
\
(triangle 7)\
@end group\
@end smallexample\
\
@noindent\
The sum of the first four numbers is 10 and the sum of the first seven\
numbers is 28.\
\
@node Decrementing Loop,  , Incrementing Loop Details, while\
@comment  node-name,  next,  previous,  up\
@subsection Loop with a Decrementing Counter\
\
Another common way to write a @code\{while\} loop is to write the test\
so that it determines whether a counter is greater than zero.  So long\
as the counter is greater than zero, the loop is repeated.  But when\
the counter is equal to or less than zero, the loop is stopped.  For\
this to work, the counter has to start out greater than zero and then\
be made smaller and smaller by a form that is evaluated\
repeatedly.\
\
The test will be an expression such as @code\{(> counter 0)\} which\
returns @code\{t\} for true if the value of @code\{counter\} is greater\
than zero, and @code\{nil\} for false if the value of @code\{counter\} is\
equal to or less than zero.  The expression that makes the number\
smaller and smaller can be a simple @code\{setq\} such as @code\{(setq\
counter (1- counter))\}, where @code\{1-\} is a built-in function in\
Emacs Lisp that subtracts 1 from its argument.\
\
@need 1250\
The template for a decrementing @code\{while\} loop looks like this:\
\
@smallexample\
@group\
(while (> counter 0)                    ; @r\{true-or-false-test\}\
  @var\{body\}@dots\{\}\
  (setq counter (1- counter)))          ; @r\{decrementer\}\
@end group\
@end smallexample\
\
@menu\
* Decrementing Example::        More pebbles on the beach.\
* Dec Example parts::           The parts of the function definition.\
* Dec Example altogether::      Putting the function definition together.\
@end menu\
\
@node Decrementing Example, Dec Example parts, Decrementing Loop, Decrementing Loop\
@unnumberedsubsubsec Example with decrementing counter\
\
To illustrate a loop with a decrementing counter, we will rewrite the\
@code\{triangle\} function so the counter decreases to zero.\
\
This is the reverse of the earlier version of the function.  In this\
case, to find out how many pebbles are needed to make a triangle with\
3 rows, add the number of pebbles in the third row, 3, to the number\
in the preceding row, 2, and then add the total of those two rows to\
the row that precedes them, which is 1.\
\
Likewise, to find the number of pebbles in a triangle with 7 rows, add\
the number of pebbles in the seventh row, 7, to the number in the\
preceding row, which is 6, and then add the total of those two rows to\
the row that precedes them, which is 5, and so on.  As in the previous\
example, each addition only involves adding two numbers, the total of\
the rows already added up and the number of pebbles in the row that is\
being added to the total.  This process of adding two numbers is\
repeated again and again until there are no more pebbles to add.\
\
We know how many pebbles to start with: the number of pebbles in the\
last row is equal to the number of rows.  If the triangle has seven\
rows, the number of pebbles in the last row is 7.  Likewise, we know how\
many pebbles are in the preceding row: it is one less than the number in\
the row.\
\
@node Dec Example parts, Dec Example altogether, Decrementing Example, Decrementing Loop\
@unnumberedsubsubsec The parts of the function definition\
\
We start with three variables: the total number of rows in the\
triangle; the number of pebbles in a row; and the total number of\
pebbles, which is what we want to calculate.  These variables can be\
named @code\{number-of-rows\}, @code\{number-of-pebbles-in-row\}, and\
@code\{total\}, respectively.\
\
Both @code\{total\} and @code\{number-of-pebbles-in-row\} are used only\
inside the function and are declared with @code\{let\}.  The initial\
value of @code\{total\} should, of course, be zero.  However, the\
initial value of @code\{number-of-pebbles-in-row\} should be equal to\
the number of rows in the triangle, since the addition will start with\
the longest row.\
\
@need 1250\
This means that the beginning of the @code\{let\} expression will look\
like this:\
\
@smallexample\
@group\
(let ((total 0)\
      (number-of-pebbles-in-row number-of-rows))\
  @var\{body\}@dots\{\})\
@end group\
@end smallexample\
\
The total number of pebbles can be found by repeatedly adding the number\
of pebbles in a row to the total already found, that is, by repeatedly\
evaluating the following expression:\
\
@smallexample\
(setq total (+ total number-of-pebbles-in-row))\
@end smallexample\
\
@noindent\
After the @code\{number-of-pebbles-in-row\} is added to the @code\{total\},\
the @code\{number-of-pebbles-in-row\} should be decremented by one, since\
the next time the loop repeats, the preceding row will be\
added to the total.\
\
The number of pebbles in a preceding row is one less than the number of\
pebbles in a row, so the built-in Emacs Lisp function @code\{1-\} can be\
used to compute the number of pebbles in the preceding row.  This can be\
done with the following expression:\
\
@smallexample\
@group\
(setq number-of-pebbles-in-row\
      (1- number-of-pebbles-in-row))\
@end group\
@end smallexample\
\
Finally, we know that the @code\{while\} loop should stop making repeated\
additions when there are no pebbles in a row.  So the test for\
the @code\{while\} loop is simply:\
\
@smallexample\
(while (> number-of-pebbles-in-row 0)\
@end smallexample\
\
@node Dec Example altogether,  , Dec Example parts, Decrementing Loop\
@unnumberedsubsubsec Putting the function definition together\
\
We can put these expressions together to create a function definition\
that works.  However, on examination, we find that one of the local\
variables is unneeded!\
\
@need 1250\
The function definition looks like this:\
\
@smallexample\
@group\
;;; @r\{First subtractive version.\}\
(defun triangle (number-of-rows)\
  "Add up the number of pebbles in a triangle."\
  (let ((total 0)\
        (number-of-pebbles-in-row number-of-rows))\
    (while (> number-of-pebbles-in-row 0)\
      (setq total (+ total number-of-pebbles-in-row))\
      (setq number-of-pebbles-in-row\
            (1- number-of-pebbles-in-row)))\
    total))\
@end group\
@end smallexample\
\
As written, this function works.\
\
However, we do not need @code\{number-of-pebbles-in-row\}.\
\
@cindex Argument as local variable\
When the @code\{triangle\} function is evaluated, the symbol\
@code\{number-of-rows\} will be bound to a number, giving it an initial\
value.  That number can be changed in the body of the function as if\
it were a local variable, without any fear that such a change will\
effect the value of the variable outside of the function.  This is a\
very useful characteristic of Lisp; it means that the variable\
@code\{number-of-rows\} can be used anywhere in the function where\
@code\{number-of-pebbles-in-row\} is used.\
\
@need 800\
Here is a second version of the function written a bit more cleanly:\
\
@smallexample\
@group\
(defun triangle (number)                ; @r\{Second version.\}\
  "Return sum of numbers 1 through NUMBER inclusive."\
  (let ((total 0))\
    (while (> number 0)\
      (setq total (+ total number))\
      (setq number (1- number)))\
    total))\
@end group\
@end smallexample\
\
In brief, a properly written @code\{while\} loop will consist of three parts:\
\
@enumerate\
@item\
A test that will return false after the loop has repeated itself the\
correct number of times.\
\
@item\
An expression the evaluation of which will return the value desired\
after being repeatedly evaluated.\
\
@item\
An expression to change the value passed to the true-or-false-test so\
that the test returns false after the loop has repeated itself the right\
number of times.\
@end enumerate}