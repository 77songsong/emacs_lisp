{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node Counting,  , Using setq, set & setq\
@comment  node-name,  next,  previous,  up\
@subsection Counting\
@cindex Counting\
\
Here is an example that shows how to use @code\{setq\} in a counter.  You\
might use this to count how many times a part of your program repeats\
itself.  First set a variable to zero; then add one to the number each\
time the program repeats itself.  To do this, you need a variable that\
serves as a counter, and two expressions: an initial @code\{setq\}\
expression that sets the counter variable to zero; and a second\
@code\{setq\} expression that increments the counter each time it is\
evaluated.\
\
@smallexample\
@group\
(setq counter 0)                ; @r\{Let's call this the initializer.\}\
\
(setq counter (+ counter 1))    ; @r\{This is the incrementer.\}\
\
counter                         ; @r\{This is the counter.\}\
@end group\
@end smallexample\
\
@noindent\
(The text following the @samp\{;\} are comments.  @xref\{Change a\
defun, , Change a Function Definition\}.)\
\
If you evaluate the first of these expressions, the initializer,\
@code\{(setq counter 0)\}, and then evaluate the third expression,\
@code\{counter\}, the number @code\{0\} will appear in the echo area.  If\
you then evaluate the second expression, the incrementer, @code\{(setq\
counter (+ counter 1))\}, the counter will get the value 1.  So if you\
again evaluate @code\{counter\}, the number @code\{1\} will appear in the\
echo area.  Each time you evaluate the second expression, the value of\
the counter will be incremented.\
\
When you evaluate the incrementer, @code\{(setq counter (+ counter 1))\},\
the Lisp interpreter first evaluates the innermost list; this is the\
addition.  In order to evaluate this list, it must evaluate the variable\
@code\{counter\} and the number @code\{1\}.  When it evaluates the variable\
@code\{counter\}, it receives its current value.  It passes this value and\
the number @code\{1\} to the @code\{+\} which adds them together.  The sum\
is then returned as the value of the inner list and passed to the\
@code\{setq\} which sets the variable @code\{counter\} to this new value.\
Thus, the value of the variable, @code\{counter\}, is changed.}