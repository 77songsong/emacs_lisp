{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node How the Interpreter Acts, Evaluating Inner Lists, Evaluation, Evaluation\
@ifnottex\
@unnumberedsubsec How the Lisp Interpreter Acts\
@end ifnottex\
\
@cindex @samp\{returned value\} explained.\
After evaluating an expression, the Lisp interpreter will most likely\
@dfn\{return\} the value that the computer produces by carrying out the\
instructions it found in the function definition, or perhaps it will\
give up on that function and produce an error message.  (The interpreter\
may also find itself tossed, so to speak, to a different function or it\
may attempt to repeat continually what it is doing for ever and ever in\
what is called an `infinite loop'.  These actions are less common; and\
we can ignore them.)  Most frequently, the interpreter returns a value.\
\
@cindex @samp\{side effect\} defined\
At the same time the interpreter returns a value, it may do something\
else as well, such as move a cursor or copy a file; this other kind of\
action is called a @dfn\{side effect\}.  Actions that we humans think are\
important, such as printing results, are often ``side effects'' to the\
Lisp interpreter.  The jargon can sound peculiar, but it turns out that\
it is fairly easy to learn to use side effects.\
\
In summary, evaluating a symbolic expression most commonly causes the\
Lisp interpreter to return a value and perhaps carry out a side effect;\
or else produce an error.}