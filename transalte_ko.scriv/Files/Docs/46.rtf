{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node let, if, Permanent Installation, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section @code\{let\}\
@findex let\
\
The @code\{let\} expression is a special form in Lisp that you will need\
to use in most function definitions.\
\
@code\{let\} is used to attach or bind a symbol to a value in such a way\
that the Lisp interpreter will not confuse the variable with a\
variable of the same name that is not part of the function.\
\
To understand why the @code\{let\} special form is necessary, consider\
the situation in which you own a home that you generally refer to as\
`the house', as in the sentence, ``The house needs painting.''  If you\
are visiting a friend and your host refers to `the house', he is\
likely to be referring to @emph\{his\} house, not yours, that is, to a\
different house.\
\
If your friend is referring to his house and you think he is referring\
to your house, you may be in for some confusion.  The same thing could\
happen in Lisp if a variable that is used inside of one function has\
the same name as a variable that is used inside of another function,\
and the two are not intended to refer to the same value.  The\
@code\{let\} special form prevents this kind of confusion.\
\
@menu\
* Prevent confusion::\
* Parts of let Expression::\
* Sample let Expression::\
* Uninitialized let Variables::\
@end menu\
\
@node Prevent confusion, Parts of let Expression, let, let\
@ifnottex\
@unnumberedsubsec @code\{let\} Prevents Confusion\
@end ifnottex\
\
@cindex @samp\{local variable\} defined\
@cindex @samp\{variable, local\}, defined\
The @code\{let\} special form prevents confusion.  @code\{let\} creates a\
name for a @dfn\{local variable\} that overshadows any use of the same\
name outside the @code\{let\} expression.  This is like understanding\
that whenever your host refers to `the house', he means his house, not\
yours.  (Symbols used in argument lists work the same way.\
@xref\{defun, , The @code\{defun\} Special Form\}.)\
\
Local variables created by a @code\{let\} expression retain their value\
@emph\{only\} within the @code\{let\} expression itself (and within\
expressions called within the @code\{let\} expression); the local\
variables have no effect outside the @code\{let\} expression.\
\
Another way to think about @code\{let\} is that it is like a @code\{setq\}\
that is temporary and local.  The values set by @code\{let\} are\
automatically undone when the @code\{let\} is finished.  The setting\
only affects expressions that are inside the bounds of the @code\{let\}\
expression.  In computer science jargon, we would say ``the binding of\
a symbol is visible only in functions called in the @code\{let\} form;\
in Emacs Lisp, scoping is dynamic, not lexical.''\
\
@code\{let\} can create more than one variable at once.  Also,\
@code\{let\} gives each variable it creates an initial value, either a\
value specified by you, or @code\{nil\}.  (In the jargon, this is called\
`binding the variable to the value'.)  After @code\{let\} has created\
and bound the variables, it executes the code in the body of the\
@code\{let\}, and returns the value of the last expression in the body,\
as the value of the whole @code\{let\} expression.  (`Execute' is a jargon\
term that means to evaluate a list; it comes from the use of the word\
meaning `to give practical effect to' (@cite\{Oxford English\
Dictionary\}).  Since you evaluate an expression to perform an action,\
`execute' has evolved as a synonym to `evaluate'.)\
\
@node Parts of let Expression, Sample let Expression, Prevent confusion, let\
@comment  node-name,  next,  previous,  up\
@subsection The Parts of a @code\{let\} Expression\
@cindex @code\{let\} expression, parts of\
@cindex Parts of @code\{let\} expression\
\
@cindex @samp\{varlist\} defined\
A @code\{let\} expression is a list of three parts.  The first part is\
the symbol @code\{let\}.  The second part is a list, called a\
@dfn\{varlist\}, each element of which is either a symbol by itself or a\
two-element list, the first element of which is a symbol.  The third\
part of the @code\{let\} expression is the body of the @code\{let\}.  The\
body usually consists of one or more lists.\
\
@need 800\
A template for a @code\{let\} expression looks like this:\
\
@smallexample\
(let @var\{varlist\} @var\{body\}@dots\{\})\
@end smallexample\
\
@noindent\
The symbols in the varlist are the variables that are given initial\
values by the @code\{let\} special form.  Symbols by themselves are given\
the initial value of @code\{nil\}; and each symbol that is the first\
element of a two-element list is bound to the value that is returned\
when the Lisp interpreter evaluates the second element.\
\
Thus, a varlist might look like this: @code\{(thread (needles 3))\}.  In\
this case, in a @code\{let\} expression, Emacs binds the symbol\
@code\{thread\} to an initial value of @code\{nil\}, and binds the symbol\
@code\{needles\} to an initial value of 3.\
\
When you write a @code\{let\} expression, what you do is put the\
appropriate expressions in the slots of the @code\{let\} expression\
template.\
\
If the varlist is composed of two-element lists, as is often the case,\
the template for the @code\{let\} expression looks like this:\
\
@smallexample\
@group\
(let ((@var\{variable\} @var\{value\})\
      (@var\{variable\} @var\{value\})\
      @dots\{\})\
  @var\{body\}@dots\{\})\
@end group\
@end smallexample\
\
@node Sample let Expression, Uninitialized let Variables, Parts of let Expression, let\
@comment  node-name,  next,  previous,  up\
@subsection Sample @code\{let\} Expression\
@cindex Sample @code\{let\} expression\
@cindex @code\{let\} expression sample\
\
The following expression creates and gives initial values\
to the two variables @code\{zebra\} and @code\{tiger\}.  The body of the\
@code\{let\} expression is a list which calls the @code\{message\} function.\
\
@smallexample\
@group\
(let ((zebra 'stripes)\
      (tiger 'fierce))\
  (message "One kind of animal has %s and another is %s."\
           zebra tiger))\
@end group\
@end smallexample\
\
Here, the varlist is @code\{((zebra 'stripes) (tiger 'fierce))\}.\
\
The two variables are @code\{zebra\} and @code\{tiger\}.  Each variable is\
the first element of a two-element list and each value is the second\
element of its two-element list.  In the varlist, Emacs binds the\
variable @code\{zebra\} to the value @code\{stripes\}@footnote\{According\
to Jared Diamond in @cite\{Guns, Germs, and Steel\}, ``@dots\{\} zebras\
become impossibly dangerous as they grow older'' but the claim here is\
that they do not become fierce like a tiger.  (1997, W. W. Norton and\
Co., ISBN 0-393-03894-2, page 171)\}, and binds the\
variable @code\{tiger\} to the value @code\{fierce\}.  In this example,\
both values are symbols preceded by a quote.  The values could just as\
well have been another list or a string.  The body of the @code\{let\}\
follows after the list holding the variables.  In this example, the\
body is a list that uses the @code\{message\} function to print a string\
in the echo area.\
\
@need 1500\
You may evaluate the example in the usual fashion, by placing the\
cursor after the last parenthesis and typing @kbd\{C-x C-e\}.  When you do\
this, the following will appear in the echo area:\
\
@smallexample\
"One kind of animal has stripes and another is fierce."\
@end smallexample\
\
As we have seen before, the @code\{message\} function prints its first\
argument, except for @samp\{%s\}.  In this example, the value of the variable\
@code\{zebra\} is printed at the location of the first @samp\{%s\} and the\
value of the variable @code\{tiger\} is printed at the location of the\
second @samp\{%s\}.\
\
@node Uninitialized let Variables,  , Sample let Expression, let\
@comment  node-name,  next,  previous,  up\
@subsection Uninitialized Variables in a @code\{let\} Statement\
@cindex Uninitialized @code\{let\} variables\
@cindex @code\{let\} variables uninitialized\
\
If you do not bind the variables in a @code\{let\} statement to specific\
initial values, they will automatically be bound to an initial value of\
@code\{nil\}, as in the following expression:\
\
@smallexample\
@group\
(let ((birch 3)\
      pine\
      fir\
      (oak 'some))\
  (message\
   "Here are %d variables with %s, %s, and %s value."\
   birch pine fir oak))\
@end group\
@end smallexample\
\
@noindent\
Here, the varlist is @code\{((birch 3) pine fir (oak 'some))\}.\
\
@need 1250\
If you evaluate this expression in the usual way, the following will\
appear in your echo area:\
\
@smallexample\
"Here are 3 variables with nil, nil, and some value."\
@end smallexample\
\
@noindent\
In this example, Emacs binds the symbol @code\{birch\} to the number 3,\
binds the symbols @code\{pine\} and @code\{fir\} to @code\{nil\}, and binds\
the symbol @code\{oak\} to the value @code\{some\}.\
\
Note that in the first part of the @code\{let\}, the variables @code\{pine\}\
and @code\{fir\} stand alone as atoms that are not surrounded by\
parentheses; this is because they are being bound to @code\{nil\}, the\
empty list.  But @code\{oak\} is bound to @code\{some\} and so is a part of\
the list @code\{(oak 'some)\}.  Similarly, @code\{birch\} is bound to the\
number 3 and so is in a list with that number.  (Since a number\
evaluates to itself, the number does not need to be quoted.  Also, the\
number is printed in the message using a @samp\{%d\} rather than a\
@samp\{%s\}.)  The four variables as a group are put into a list to\
delimit them from the body of the @code\{let\}.}