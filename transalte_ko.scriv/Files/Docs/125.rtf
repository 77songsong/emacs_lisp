{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node debug, debug-on-entry, Debugging, Debugging\
@section @code\{debug\}\
@findex debug\
\
Suppose you have written a function definition that is intended to\
return the sum of the numbers 1 through a given number.  (This is the\
@code\{triangle\} function discussed earlier.  @xref\{Decrementing\
Example, , Example with Decrementing Counter\}, for a discussion.)\
@c xref\{Decrementing Loop,, Loop with a Decrementing Counter\}, for a discussion.)\
\
However, your function definition has a bug.  You have mistyped\
@samp\{1=\} for @samp\{1-\}.  Here is the broken definition:\
\
@findex triangle-bugged\
@smallexample\
@group\
(defun triangle-bugged (number)\
  "Return sum of numbers 1 through NUMBER inclusive."\
  (let ((total 0))\
    (while (> number 0)\
      (setq total (+ total number))\
      (setq number (1= number)))      ; @r\{Error here.\}\
    total))\
@end group\
@end smallexample\
\
If you are reading this in Info, you can evaluate this definition in\
the normal fashion.  You will see @code\{triangle-bugged\} appear in the\
echo area.\
\
@need 1250\
Now evaluate the @code\{triangle-bugged\} function with an\
argument of 4:\
\
@smallexample\
(triangle-bugged 4)\
@end smallexample\
\
@noindent\
In a recent GNU Emacs, you will create and enter a @file\{*Backtrace*\}\
buffer that says:\
\
@noindent\
@smallexample\
@group\
---------- Buffer: *Backtrace* ----------\
Debugger entered--Lisp error: (void-function 1=)\
  (1= number)\
  (setq number (1= number))\
  (while (> number 0) (setq total (+ total number))\
        (setq number (1= number)))\
  (let ((total 0)) (while (> number 0) (setq total ...)\
    (setq number ...)) total)\
  triangle-bugged(4)\
@end group\
@group\
  eval((triangle-bugged 4))\
  eval-last-sexp-1(nil)\
  eval-last-sexp(nil)\
  call-interactively(eval-last-sexp)\
---------- Buffer: *Backtrace* ----------\
@end group\
@end smallexample\
\
@noindent\
(I have reformatted this example slightly; the debugger does not fold\
long lines.  As usual, you can quit the debugger by typing @kbd\{q\} in\
the @file\{*Backtrace*\} buffer.)\
\
In practice, for a bug as simple as this, the `Lisp error' line will\
tell you what you need to know to correct the definition.  The\
function @code\{1=\} is `void'.\
\
@ignore\
@need 800\
In GNU Emacs 20 and before, you will see:\
\
@smallexample\
Symbol's function definition is void:@: 1=\
@end smallexample\
\
@noindent\
which has the same meaning as the @file\{*Backtrace*\} buffer line in\
version 21.\
@end ignore\
\
However, suppose you are not quite certain what is going on?\
You can read the complete backtrace.\
\
In this case, you need to run a recent GNU Emacs, which automatically\
starts the debugger that puts you in the @file\{*Backtrace*\} buffer; or\
else, you need to start the debugger manually as described below.\
\
Read the @file\{*Backtrace*\} buffer from the bottom up; it tells you\
what Emacs did that led to the error.  Emacs made an interactive call\
to @kbd\{C-x C-e\} (@code\{eval-last-sexp\}), which led to the evaluation\
of the @code\{triangle-bugged\} expression.  Each line above tells you\
what the Lisp interpreter evaluated next.\
\
@need 1250\
The third line from the top of the buffer is\
\
@smallexample\
(setq number (1= number))\
@end smallexample\
\
@noindent\
Emacs tried to evaluate this expression; in order to do so, it tried\
to evaluate the inner expression shown on the second line from the\
top:\
\
@smallexample\
(1= number)\
@end smallexample\
\
@need 1250\
@noindent\
This is where the error occurred; as the top line says:\
\
@smallexample\
Debugger entered--Lisp error: (void-function 1=)\
@end smallexample\
\
@noindent\
You can correct the mistake, re-evaluate the function definition, and\
then run your test again.}