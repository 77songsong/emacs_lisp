{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node save-excursion, Review, Truth & Falsehood, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section @code\{save-excursion\}\
@findex save-excursion\
@cindex Region, what it is\
@cindex Preserving point, mark, and buffer\
@cindex Point, mark, buffer preservation\
@findex point\
@findex mark\
\
The @code\{save-excursion\} function is the fourth and final special form\
that we will discuss in this chapter.\
\
In Emacs Lisp programs used for editing, the @code\{save-excursion\}\
function is very common.  It saves the location of point and mark,\
executes the body of the function, and then restores point and mark to\
their previous positions if their locations were changed.  Its primary\
purpose is to keep the user from being surprised and disturbed by\
unexpected movement of point or mark.\
\
@menu\
* Point and mark::              A review of various locations.\
* Template for save-excursion::\
@end menu\
\
@node Point and mark, Template for save-excursion, save-excursion, save-excursion\
@ifnottex\
@unnumberedsubsec Point and Mark\
@end ifnottex\
\
Before discussing @code\{save-excursion\}, however, it may be useful\
first to review what point and mark are in GNU Emacs.  @dfn\{Point\} is\
the current location of the cursor.  Wherever the cursor\
is, that is point.  More precisely, on terminals where the cursor\
appears to be on top of a character, point is immediately before the\
character.  In Emacs Lisp, point is an integer.  The first character in\
a buffer is number one, the second is number two, and so on.  The\
function @code\{point\} returns the current position of the cursor as a\
number.  Each buffer has its own value for point.\
\
The @dfn\{mark\} is another position in the buffer; its value can be set\
with a command such as @kbd\{C-@key\{SPC\}\} (@code\{set-mark-command\}).  If\
a mark has been set, you can use the command @kbd\{C-x C-x\}\
(@code\{exchange-point-and-mark\}) to cause the cursor to jump to the mark\
and set the mark to be the previous position of point.  In addition, if\
you set another mark, the position of the previous mark is saved in the\
mark ring.  Many mark positions can be saved this way.  You can jump the\
cursor to a saved mark by typing @kbd\{C-u C-@key\{SPC\}\} one or more\
times.\
\
The part of the buffer between point and mark is called @dfn\{the\
region\}.  Numerous commands work on the region, including\
@code\{center-region\}, @code\{count-lines-region\}, @code\{kill-region\}, and\
@code\{print-region\}.\
\
The @code\{save-excursion\} special form saves the locations of point and\
mark and restores those positions after the code within the body of the\
special form is evaluated by the Lisp interpreter.  Thus, if point were\
in the beginning of a piece of text and some code moved point to the end\
of the buffer, the @code\{save-excursion\} would put point back to where\
it was before, after the expressions in the body of the function were\
evaluated.\
\
In Emacs, a function frequently moves point as part of its internal\
workings even though a user would not expect this.  For example,\
@code\{count-lines-region\} moves point.  To prevent the user from being\
bothered by jumps that are both unexpected and (from the user's point of\
view) unnecessary, @code\{save-excursion\} is often used to keep point and\
mark in the location expected by the user.  The use of\
@code\{save-excursion\} is good housekeeping.\
\
To make sure the house stays clean, @code\{save-excursion\} restores the\
values of point and mark even if something goes wrong in the code inside\
of it (or, to be more precise and to use the proper jargon, ``in case of\
abnormal exit'').  This feature is very helpful.\
\
In addition to recording the values of point and mark,\
@code\{save-excursion\} keeps track of the current buffer, and restores\
it, too.  This means you can write code that will change the buffer and\
have @code\{save-excursion\} switch you back to the original buffer.\
This is how @code\{save-excursion\} is used in @code\{append-to-buffer\}.\
(@xref\{append-to-buffer, , The Definition of @code\{append-to-buffer\}\}.)\
\
@node Template for save-excursion,  , Point and mark, save-excursion\
@comment  node-name,  next,  previous,  up\
@subsection Template for a @code\{save-excursion\} Expression\
\
@need 800\
The template for code using @code\{save-excursion\} is simple:\
\
@smallexample\
@group\
(save-excursion\
  @var\{body\}@dots\{\})\
@end group\
@end smallexample\
\
@noindent\
The body of the function is one or more expressions that will be\
evaluated in sequence by the Lisp interpreter.  If there is more than\
one expression in the body, the value of the last one will be returned\
as the value of the @code\{save-excursion\} function.  The other\
expressions in the body are evaluated only for their side effects; and\
@code\{save-excursion\} itself is used only for its side effect (which\
is restoring the positions of point and mark).\
\
@need 1250\
In more detail, the template for a @code\{save-excursion\} expression\
looks like this:\
\
@smallexample\
@group\
(save-excursion\
  @var\{first-expression-in-body\}\
  @var\{second-expression-in-body\}\
  @var\{third-expression-in-body\}\
   @dots\{\}\
  @var\{last-expression-in-body\})\
@end group\
@end smallexample\
\
@noindent\
An expression, of course, may be a symbol on its own or a list.\
\
In Emacs Lisp code, a @code\{save-excursion\} expression often occurs\
within the body of a @code\{let\} expression.  It looks like this:\
\
@smallexample\
@group\
(let @var\{varlist\}\
  (save-excursion\
    @var\{body\}@dots\{\}))\
@end group\
@end smallexample}