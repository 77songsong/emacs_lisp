{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node else, Truth & Falsehood, if, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section If--then--else Expressions\
@cindex Else\
\
An @code\{if\} expression may have an optional third argument, called\
the @dfn\{else-part\}, for the case when the true-or-false-test returns\
false.  When this happens, the second argument or then-part of the\
overall @code\{if\} expression is @emph\{not\} evaluated, but the third or\
else-part @emph\{is\} evaluated.  You might think of this as the cloudy\
day alternative for the decision ``if it is warm and sunny, then go to\
the beach, else read a book!''.\
\
The word ``else'' is not written in the Lisp code; the else-part of an\
@code\{if\} expression comes after the then-part.  In the written Lisp, the\
else-part is usually written to start on a line of its own and is\
indented less than the then-part:\
\
@smallexample\
@group\
(if @var\{true-or-false-test\}\
    @var\{action-to-carry-out-if-the-test-returns-true\}\
  @var\{action-to-carry-out-if-the-test-returns-false\})\
@end group\
@end smallexample\
\
For example, the following @code\{if\} expression prints the message @samp\{4\
is not greater than 5!\} when you evaluate it in the usual way:\
\
@smallexample\
@group\
(if (> 4 5)                               ; @r\{if-part\}\
    (message "4 falsely greater than 5!") ; @r\{then-part\}\
  (message "4 is not greater than 5!"))   ; @r\{else-part\}\
@end group\
@end smallexample\
\
@noindent\
Note that the different levels of indentation make it easy to\
distinguish the then-part from the else-part.  (GNU Emacs has several\
commands that automatically indent @code\{if\} expressions correctly.\
@xref\{List \'c0\'d4\'b7\'c2\'c7\'cf\'b1\'e2, , GNU Emacs\'b4\'c2 List \'c0\'d4\'b7\'c2\'c0\'bb \'b5\'bd\'b4\'c2\'b4\'d9\}.)\
\
We can extend the @code\{type-of-animal\} function to include an\
else-part by simply incorporating an additional part to the @code\{if\}\
expression.\
\
@need 1500\
You can see the consequences of doing this if you evaluate the following\
version of the @code\{type-of-animal\} function definition to install it\
and then evaluate the two subsequent expressions to pass different\
arguments to the function.\
\
@smallexample\
@group\
(defun type-of-animal (characteristic)  ; @r\{Second version.\}\
  "Print message in echo area depending on CHARACTERISTIC.\
If the CHARACTERISTIC is the symbol `fierce',\
then warn of a tiger;\
else say it's not fierce."\
  (if (equal characteristic 'fierce)\
      (message "It's a tiger!")\
    (message "It's not fierce!")))\
@end group\
@end smallexample\
@sp 1\
\
@smallexample\
@group\
(type-of-animal 'fierce)\
\
(type-of-animal 'zebra)\
\
@end group\
@end smallexample\
\
@c Following sentence rewritten to prevent overfull hbox.\
@noindent\
When you evaluate @code\{(type-of-animal 'fierce)\}, you will see the\
following message printed in the echo area: @code\{"It's a tiger!"\}; but\
when you evaluate @code\{(type-of-animal 'zebra)\}, you will see\
@code\{"It's not fierce!"\}.\
\
(Of course, if the @var\{characteristic\} were @code\{ferocious\}, the\
message @code\{"It's not fierce!"\} would be printed; and it would be\
misleading!  When you write code, you need to take into account the\
possibility that some such argument will be tested by the @code\{if\}\
and write your program accordingly.)}