{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node Practicing Evaluation, Writing Defuns, List Processing, Top\
@comment  node-name,  next,  previous,  up\
@chapter Practicing Evaluation\
@cindex Practicing evaluation\
@cindex Evaluation practice\
\
Before learning how to write a function definition in Emacs Lisp, it is\
useful to spend a little time evaluating various expressions that have\
already been written.  These expressions will be lists with the\
functions as their first (and often only) element.  Since some of the\
functions associated with buffers are both simple and interesting, we\
will start with those.  In this section, we will evaluate a few of\
these.  In another section, we will study the code of several other\
buffer-related functions, to see how they were written.\
\
@menu\
* How to Evaluate::            Typing editing commands or @kbd\{C-x C-e\}\
                                 causes evaluation.\
* Buffer Names::               Buffers and files are different.\
* Getting Buffers::            Getting a buffer itself, not merely its name.\
* Switching Buffers::          How to change to another buffer.\
* Buffer Size & Locations::    Where point is located and the size of\
                               the buffer.\
* Evaluation Exercise::\
@end menu\
\
@node How to Evaluate, Buffer Names, Practicing Evaluation, Practicing Evaluation\
@ifnottex\
@unnumberedsec How to Evaluate\
@end ifnottex\
\
@i\{Whenever you give an editing command\} to Emacs Lisp, such as the\
command to move the cursor or to scroll the screen, @i\{you are evaluating\
an expression,\} the first element of which is a function.  @i\{This is\
how Emacs works.\}\
\
@cindex @samp\{interactive function\} defined\
@cindex @samp\{command\} defined\
When you type keys, you cause the Lisp interpreter to evaluate an\
expression and that is how you get your results.  Even typing plain text\
involves evaluating an Emacs Lisp function, in this case, one that uses\
@code\{self-insert-command\}, which simply inserts the character you\
typed.  The functions you evaluate by typing keystrokes are called\
@dfn\{interactive\} functions, or @dfn\{commands\}; how you make a function\
interactive will be illustrated in the chapter on how to write function\
definitions.  @xref\{Interactive, , Making a Function Interactive\}.\
\
In addition to typing keyboard commands, we have seen a second way to\
evaluate an expression: by positioning the cursor after a list and\
typing @kbd\{C-x C-e\}.  This is what we will do in the rest of this\
section.  There are other ways to evaluate an expression as well; these\
will be described as we come to them.\
\
Besides being used for practicing evaluation, the functions shown in the\
next few sections are important in their own right.  A study of these\
functions makes clear the distinction between buffers and files, how to\
switch to a buffer, and how to determine a location within it.}