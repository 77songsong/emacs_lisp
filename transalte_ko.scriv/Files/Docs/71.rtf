{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node nth, setcar, nthcdr, car cdr & cons\
@comment  node-name,  next,  previous,  up\
@section @code\{nth\}\
@findex nth\
\
The @code\{nthcdr\} function takes the @sc\{cdr\} of a list repeatedly.\
The @code\{nth\} function takes the @sc\{car\} of the result returned by\
@code\{nthcdr\}.  It returns the Nth element of the list.\
\
@need 1500\
Thus, if it were not defined in C for speed, the definition of\
@code\{nth\} would be:\
\
@smallexample\
@group\
(defun nth (n list)\
  "Returns the Nth element of LIST.\
N counts from zero.  If LIST is not that long, nil is returned."\
  (car (nthcdr n list)))\
@end group\
@end smallexample\
\
@noindent\
(Originally, @code\{nth\} was defined in Emacs Lisp in @file\{subr.el\},\
but its definition was redone in C in the 1980s.)\
\
The @code\{nth\} function returns a single element of a list.\
This can be very convenient.\
\
Note that the elements are numbered from zero, not one.  That is to\
say, the first element of a list, its @sc\{car\} is the zeroth element.\
This is called `zero-based' counting and often bothers people who\
are accustomed to the first element in a list being number one, which\
is `one-based'.\
\
@need 1250\
For example:\
\
@smallexample\
@group\
(nth 0 '("one" "two" "three"))\
    @result\{\} "one"\
\
(nth 1 '("one" "two" "three"))\
    @result\{\} "two"\
@end group\
@end smallexample\
\
It is worth mentioning that @code\{nth\}, like @code\{nthcdr\} and\
@code\{cdr\}, does not change the original list---the function is\
non-destructive.  This is in sharp contrast to the @code\{setcar\} and\
@code\{setcdr\} functions.}