{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node Cutting & Storing Text, List Implementation, car cdr & cons, Top\
@comment  node-name,  next,  previous,  up\
@chapter Cutting and Storing Text\
@cindex Cutting and storing text\
@cindex Storing and cutting text\
@cindex Killing text\
@cindex Clipping text\
@cindex Erasing text\
@cindex Deleting text\
\
Whenever you cut or clip text out of a buffer with a `kill' command in\
GNU Emacs, it is stored in a list and you can bring it back with a\
`yank' command.\
\
(The use of the word `kill' in Emacs for processes which specifically\
@emph\{do not\} destroy the values of the entities is an unfortunate\
historical accident.  A much more appropriate word would be `clip' since\
that is what the kill commands do; they clip text out of a buffer and\
put it into storage from which it can be brought back.  I have often\
been tempted to replace globally all occurrences of `kill' in the Emacs\
sources with `clip' and all occurrences of `killed' with `clipped'.)\
\
@menu\
* Storing Text::                Text is stored in a list.\
* zap-to-char::                 Cutting out text up to a character.\
* kill-region::                 Cutting text out of a region.\
* copy-region-as-kill::         A definition for copying text.\
* Digression into C::           Minor note on C programming language macros.\
* defvar::                      How to give a variable an initial value.\
* cons & search-fwd Review::\
* search Exercises::\
@end menu\
\
@node Storing Text, zap-to-char, Cutting & Storing Text, Cutting & Storing Text\
@ifnottex\
@unnumberedsec Storing Text in a List\
@end ifnottex\
\
When text is cut out of a buffer, it is stored on a list.  Successive\
pieces of text are stored on the list successively, so the list might\
look like this:\
\
@smallexample\
("a piece of text" "previous piece")\
@end smallexample\
\
@need 1200\
@noindent\
The function @code\{cons\} can be used to create a new list from a piece\
of text (an `atom', to use the jargon) and an existing list, like\
this:\
\
@smallexample\
@group\
(cons "another piece"\
      '("a piece of text" "previous piece"))\
@end group\
@end smallexample\
\
@need 1200\
@noindent\
If you evaluate this expression, a list of three elements will appear in\
the echo area:\
\
@smallexample\
("another piece" "a piece of text" "previous piece")\
@end smallexample\
\
With the @code\{car\} and @code\{nthcdr\} functions, you can retrieve\
whichever piece of text you want.  For example, in the following code,\
@code\{nthcdr 1 @dots\{\}\} returns the list with the first item removed;\
and the @code\{car\} returns the first element of that remainder---the\
second element of the original list:\
\
@smallexample\
@group\
(car (nthcdr 1 '("another piece"\
                 "a piece of text"\
                 "previous piece")))\
     @result\{\} "a piece of text"\
@end group\
@end smallexample\
\
The actual functions in Emacs are more complex than this, of course.\
The code for cutting and retrieving text has to be written so that\
Emacs can figure out which element in the list you want---the first,\
second, third, or whatever.  In addition, when you get to the end of\
the list, Emacs should give you the first element of the list, rather\
than nothing at all.\
\
The list that holds the pieces of text is called the @dfn\{kill ring\}.\
This chapter leads up to a description of the kill ring and how it is\
used by first tracing how the @code\{zap-to-char\} function works.  This\
function uses (or `calls') a function that invokes a function that\
manipulates the kill ring.  Thus, before reaching the mountains, we\
climb the foothills.\
\
A subsequent chapter describes how text that is cut from the buffer is\
retrieved.  @xref\{Yanking, , Yanking Text Back\}.}