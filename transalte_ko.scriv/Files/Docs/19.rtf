{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node Words in a defun, Readying a Graph, Counting Words, Top\
@chapter Counting Words in a @code\{defun\}\
@cindex Counting words in a @code\{defun\}\
@cindex Word counting in a @code\{defun\}\
\
Our next project is to count the number of words in a function\
definition.  Clearly, this can be done using some variant of\
@code\{count-word-region\}.  @xref\{Counting Words, , Counting Words:\
Repetition and Regexps\}.  If we are just going to count the words in\
one definition, it is easy enough to mark the definition with the\
@kbd\{C-M-h\} (@code\{mark-defun\}) command, and then call\
@code\{count-word-region\}.\
\
However, I am more ambitious: I want to count the words and symbols in\
every definition in the Emacs sources and then print a graph that\
shows how many functions there are of each length: how many contain 40\
to 49 words or symbols, how many contain 50 to 59 words or symbols,\
and so on.  I have often been curious how long a typical function is,\
and this will tell.\
\
@menu\
* Divide and Conquer::\
* Words and Symbols::           What to count?\
* Syntax::                      What constitutes a word or symbol?\
* count-words-in-defun::        Very like @code\{count-words\}.\
* Several defuns::              Counting several defuns in a file.\
* Find a File::                 Do you want to look at a file?\
* lengths-list-file::           A list of the lengths of many definitions.\
* Several files::               Counting in definitions in different files.\
* Several files recursively::   Recursively counting in different files.\
* Prepare the data::            Prepare the data for display in a graph.\
@end menu\
\
@node Divide and Conquer, Words and Symbols, Words in a defun, Words in a defun\
@ifnottex\
@unnumberedsec Divide and Conquer\
@end ifnottex\
\
Described in one phrase, the histogram project is daunting; but\
divided into numerous small steps, each of which we can take one at a\
time, the project becomes less fearsome.  Let us consider what the\
steps must be:\
\
@itemize @bullet\
@item\
First, write a function to count the words in one definition.  This\
includes the problem of handling symbols as well as words.\
\
@item\
Second, write a function to list the numbers of words in each function\
in a file.  This function can use the @code\{count-words-in-defun\}\
function.\
\
@item\
Third, write a function to list the numbers of words in each function\
in each of several files.  This entails automatically finding the\
various files, switching to them, and counting the words in the\
definitions within them.\
\
@item\
Fourth, write a function to convert the list of numbers that we\
created in step three to a form that will be suitable for printing as\
a graph.\
\
@item\
Fifth, write a function to print the results as a graph.\
@end itemize\
\
This is quite a project!  But if we take each step slowly, it will not\
be difficult.}