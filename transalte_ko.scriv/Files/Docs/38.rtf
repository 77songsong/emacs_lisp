{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node Switching Buffers, Buffer Size & Locations, Getting Buffers, \'c6\'f2\'b0\'a1 \'bf\'ac\'bd\'c0\'c7\'cf\'b1\'e2\
@comment  node-name,  next,  previous,  up\
@section Switching Buffers\
@findex switch-to-buffer\
@findex set-buffer\
@cindex Switching to a buffer\
\
The @code\{other-buffer\} function actually provides a buffer when it is\
used as an argument to a function that requires one.  We can see this\
by using @code\{other-buffer\} and @code\{switch-to-buffer\} to switch to a\
different buffer.\
\
But first, a brief introduction to the @code\{switch-to-buffer\}\
function.  When you switched back and forth from Info to the\
@file\{*scratch*\} buffer to evaluate @code\{(buffer-name)\}, you most\
likely typed @kbd\{C-x b\} and then typed @file\{*scratch*\}@footnote\{Or\
rather, to save typing, you probably only typed @kbd\{RET\} if the\
default buffer was @file\{*scratch*\}, or if it was different, then you\
typed just part of the name, such as @code\{*sc\}, pressed your\
@kbd\{TAB\} key to cause it to expand to the full name, and then typed\
your @kbd\{RET\} key.\} when prompted in the minibuffer for the name of\
the buffer to which you wanted to switch.  The keystrokes, @kbd\{C-x\
b\}, cause the Lisp interpreter to evaluate the interactive function\
@code\{switch-to-buffer\}.  As we said before, this is how Emacs works:\
different keystrokes call or run different functions.  For example,\
@kbd\{C-f\} calls @code\{forward-char\}, @kbd\{M-e\} calls\
@code\{forward-sentence\}, and so on.\
\
By writing @code\{switch-to-buffer\} in an expression, and giving it a\
buffer to switch to, we can switch buffers just the way @kbd\{C-x b\}\
does.\
\
@need 1000\
Here is the Lisp expression:\
\
@smallexample\
(switch-to-buffer (other-buffer))\
@end smallexample\
\
@noindent\
The symbol @code\{switch-to-buffer\} is the first element of the list,\
so the Lisp interpreter will treat it as a function and carry out the\
instructions that are attached to it.  But before doing that, the\
interpreter will note that @code\{other-buffer\} is inside parentheses\
and work on that symbol first.  @code\{other-buffer\} is the first (and\
in this case, the only) element of this list, so the Lisp interpreter\
calls or runs the function.  It returns another buffer.  Next, the\
interpreter runs @code\{switch-to-buffer\}, passing to it, as an\
argument, the other buffer, which is what Emacs will switch to.  If\
you are reading this in Info, try this now.  Evaluate the expression.\
(To get back, type @kbd\{C-x b @key\{RET\}\}.)@footnote\{Remember, this\
expression will move you to your most recent other buffer that you\
cannot see.  If you really want to go to your most recently selected\
buffer, even if you can still see it, you need to evaluate the\
following more complex expression:\
\
@smallexample\
(switch-to-buffer (other-buffer (current-buffer) t))\
@end smallexample\
\
@c noindent\
In this case, the first argument to @code\{other-buffer\} tells it which\
buffer to skip---the current one---and the second argument tells\
@code\{other-buffer\} it is OK to switch to a visible buffer.\
In regular use, @code\{switch-to-buffer\} takes you to an invisible\
window since you would most likely use @kbd\{C-x o\} (@code\{other-window\})\
to go to another visible buffer.\}\
\
In the programming examples in later sections of this document, you will\
see the function @code\{set-buffer\} more often than\
@code\{switch-to-buffer\}.  This is because of a difference between\
computer programs and humans: humans have eyes and expect to see the\
buffer on which they are working on their computer terminals.  This is\
so obvious, it almost goes without saying.  However, programs do not\
have eyes.  When a computer program works on a buffer, that buffer does\
not need to be visible on the screen.\
\
@code\{switch-to-buffer\} is designed for humans and does two different\
things: it switches the buffer to which Emacs' attention is directed; and\
it switches the buffer displayed in the window to the new buffer.\
@code\{set-buffer\}, on the other hand, does only one thing: it switches\
the attention of the computer program to a different buffer.  The buffer\
on the screen remains unchanged (of course, normally nothing happens\
there until the command finishes running).\
\
@cindex @samp\{call\} defined\
Also, we have just introduced another jargon term, the word @dfn\{call\}.\
When you evaluate a list in which the first symbol is a function, you\
are calling that function.  The use of the term comes from the notion of\
the function as an entity that can do something for you if you `call'\
it---just as a plumber is an entity who can fix a leak if you call him\
or her.}