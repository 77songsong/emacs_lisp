{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node count-words-region, recursive-count-words, Why Count Words, Counting Words\
@comment  node-name,  next,  previous,  up\
@section The @code\{count-words-region\} Function\
@findex count-words-region\
\
A word count command could count words in a line, paragraph, region,\
or buffer.  What should the command cover?  You could design the\
command to count the number of words in a complete buffer.  However,\
the Emacs tradition encourages flexibility---you may want to count\
words in just a section, rather than all of a buffer.  So it makes\
more sense to design the command to count the number of words in a\
region.  Once you have a @code\{count-words-region\} command, you can,\
if you wish, count words in a whole buffer by marking it with\
@w\{@kbd\{C-x h\}\} (@code\{mark-whole-buffer\}).\
\
Clearly, counting words is a repetitive act: starting from the\
beginning of the region, you count the first word, then the second\
word, then the third word, and so on, until you reach the end of the\
region.  This means that word counting is ideally suited to recursion\
or to a @code\{while\} loop.\
\
@menu\
* Design count-words-region::   The definition using a @code\{while\} loop.\
* Whitespace Bug::              The Whitespace Bug in @code\{count-words-region\}.\
@end menu\
\
@node Design count-words-region, Whitespace Bug, count-words-region, count-words-region\
@ifnottex\
@unnumberedsubsec Designing @code\{count-words-region\}\
@end ifnottex\
\
First, we will implement the word count command with a @code\{while\}\
loop, then with recursion.  The command will, of course, be\
interactive.\
\
@need 800\
The template for an interactive function definition is, as always:\
\
@smallexample\
@group\
(defun @var\{name-of-function\} (@var\{argument-list\})\
  "@var\{documentation\}@dots\{\}"\
  (@var\{interactive-expression\}@dots\{\})\
  @var\{body\}@dots\{\})\
@end group\
@end smallexample\
\
What we need to do is fill in the slots.\
\
The name of the function should be self-explanatory and similar to the\
existing @code\{count-lines-region\} name.  This makes the name easier\
to remember.  @code\{count-words-region\} is a good choice.\
\
The function counts words within a region.  This means that the\
argument list must contain symbols that are bound to the two\
positions, the beginning and end of the region.  These two positions\
can be called @samp\{beginning\} and @samp\{end\} respectively.  The first\
line of the documentation should be a single sentence, since that is\
all that is printed as documentation by a command such as\
@code\{apropos\}.  The interactive expression will be of the form\
@samp\{(interactive "r")\}, since that will cause Emacs to pass the\
beginning and end of the region to the function's argument list.  All\
this is routine.\
\
The body of the function needs to be written to do three tasks:\
first, to set up conditions under which the @code\{while\} loop can\
count words, second, to run the @code\{while\} loop, and third, to send\
a message to the user.\
\
When a user calls @code\{count-words-region\}, point may be at the\
beginning or the end of the region.  However, the counting process\
must start at the beginning of the region.  This means we will want\
to put point there if it is not already there.  Executing\
@code\{(goto-char beginning)\} ensures this.  Of course, we will want to\
return point to its expected position when the function finishes its\
work.  For this reason, the body must be enclosed in a\
@code\{save-excursion\} expression.\
\
The central part of the body of the function consists of a\
@code\{while\} loop in which one expression jumps point forward word by\
word, and another expression counts those jumps.  The true-or-false-test\
of the @code\{while\} loop should test true so long as point should jump\
forward, and false when point is at the end of the region.\
\
We could use @code\{(forward-word 1)\} as the expression for moving point\
forward word by word, but it is easier to see what Emacs identifies as a\
`word' if we use a regular expression search.\
\
A regular expression search that finds the pattern for which it is\
searching leaves point after the last character matched.  This means\
that a succession of successful word searches will move point forward\
word by word.\
\
As a practical matter, we want the regular expression search to jump\
over whitespace and punctuation between words as well as over the\
words themselves.  A regexp that refuses to jump over interword\
whitespace would never jump more than one word!  This means that\
the regexp should include the whitespace and punctuation that follows\
a word, if any, as well as the word itself.  (A word may end a buffer\
and not have any following whitespace or punctuation, so that part of\
the regexp must be optional.)\
\
Thus, what we want for the regexp is a pattern defining one or more\
word constituent characters followed, optionally, by one or more\
characters that are not word constituents.  The regular expression for\
this is:\
\
@smallexample\
\\w+\\W*\
@end smallexample\
\
@noindent\
The buffer's syntax table determines which characters are and are not\
word constituents.  (@xref\{Syntax, , What Constitutes a Word or\
Symbol?\}, for more about syntax.  Also, see @ref\{Syntax, Syntax, The\
Syntax Table, emacs, The GNU Emacs Manual\}, and @ref\{Syntax Tables, ,\
Syntax Tables, elisp, The GNU Emacs Lisp Reference Manual\}.)\
\
@need 800\
The search expression looks like this:\
\
@smallexample\
(re-search-forward "\\\\w+\\\\W*")\
@end smallexample\
\
@noindent\
(Note that paired backslashes precede the @samp\{w\} and @samp\{W\}.  A\
single backslash has special meaning to the Emacs Lisp interpreter.\
It indicates that the following character is interpreted differently\
than usual.  For example, the two characters, @samp\{\\n\}, stand for\
@samp\{newline\}, rather than for a backslash followed by @samp\{n\}.  Two\
backslashes in a row stand for an ordinary, `unspecial' backslash, so\
Emacs Lisp interpreter ends of seeing a single backslash followed by a\
letter.  So it discovers the letter is special.)\
\
We need a counter to count how many words there are; this variable\
must first be set to 0 and then incremented each time Emacs goes\
around the @code\{while\} loop.  The incrementing expression is simply:\
\
@smallexample\
(setq count (1+ count))\
@end smallexample\
\
Finally, we want to tell the user how many words there are in the\
region.  The @code\{message\} function is intended for presenting this\
kind of information to the user.  The message has to be phrased so\
that it reads properly regardless of how many words there are in the\
region: we don't want to say that ``there are 1 words in the region''.\
The conflict between singular and plural is ungrammatical.  We can\
solve this problem by using a conditional expression that evaluates\
different messages depending on the number of words in the region.\
There are three possibilities: no words in the region, one word in the\
region, and more than one word.  This means that the @code\{cond\}\
special form is appropriate.\
\
@need 1500\
All this leads to the following function definition:\
\
@smallexample\
@group\
;;; @r\{First version; has bugs!\}\
(defun count-words-region (beginning end)\
  "Print number of words in the region.\
Words are defined as at least one word-constituent\
character followed by at least one character that\
is not a word-constituent.  The buffer's syntax\
table determines which characters these are."\
  (interactive "r")\
  (message "Counting words in region ... ")\
@end group\
\
@group\
;;; @r\{1. Set up appropriate conditions.\}\
  (save-excursion\
    (goto-char beginning)\
    (let ((count 0))\
@end group\
\
@group\
;;; @r\{2. Run the\} while @r\{loop.\}\
      (while (< (point) end)\
        (re-search-forward "\\\\w+\\\\W*")\
        (setq count (1+ count)))\
@end group\
\
@group\
;;; @r\{3. Send a message to the user.\}\
      (cond ((zerop count)\
             (message\
              "The region does NOT have any words."))\
            ((= 1 count)\
             (message\
              "The region has 1 word."))\
            (t\
             (message\
              "The region has %d words." count))))))\
@end group\
@end smallexample\
\
@noindent\
As written, the function works, but not in all circumstances.\
\
@node Whitespace Bug,  , Design count-words-region, count-words-region\
@comment  node-name,  next,  previous,  up\
@subsection The Whitespace Bug in @code\{count-words-region\}\
\
The @code\{count-words-region\} command described in the preceding\
section has two bugs, or rather, one bug with two manifestations.\
First, if you mark a region containing only whitespace in the middle\
of some text, the @code\{count-words-region\} command tells you that the\
region contains one word!  Second, if you mark a region containing\
only whitespace at the end of the buffer or the accessible portion of\
a narrowed buffer, the command displays an error message that looks\
like this:\
\
@smallexample\
Search failed: "\\\\w+\\\\W*"\
@end smallexample\
\
If you are reading this in Info in GNU Emacs, you can test for these\
bugs yourself.\
\
First, evaluate the function in the usual manner to install it.\
@ifinfo\
Here is a copy of the definition.  Place your cursor after the closing\
parenthesis and type @kbd\{C-x C-e\} to install it.\
\
@smallexample\
@group\
;; @r\{First version; has bugs!\}\
(defun count-words-region (beginning end)\
  "Print number of words in the region.\
Words are defined as at least one word-constituent character followed\
by at least one character that is not a word-constituent.  The buffer's\
syntax table determines which characters these are."\
@end group\
@group\
  (interactive "r")\
  (message "Counting words in region ... ")\
@end group\
\
@group\
;;; @r\{1. Set up appropriate conditions.\}\
  (save-excursion\
    (goto-char beginning)\
    (let ((count 0))\
@end group\
\
@group\
;;; @r\{2. Run the\} while @r\{loop.\}\
      (while (< (point) end)\
        (re-search-forward "\\\\w+\\\\W*")\
        (setq count (1+ count)))\
@end group\
\
@group\
;;; @r\{3. Send a message to the user.\}\
      (cond ((zerop count)\
             (message "The region does NOT have any words."))\
            ((= 1 count) (message "The region has 1 word."))\
            (t (message "The region has %d words." count))))))\
@end group\
@end smallexample\
@end ifinfo\
\
@need 1000\
If you wish, you can also install this keybinding by evaluating it:\
\
@smallexample\
(global-set-key "\\C-c=" 'count-words-region)\
@end smallexample\
\
To conduct the first test, set mark and point to the beginning and end\
of the following line and then type @kbd\{C-c =\} (or @kbd\{M-x\
count-words-region\} if you have not bound @kbd\{C-c =\}):\
\
@smallexample\
    one   two  three\
@end smallexample\
\
@noindent\
Emacs will tell you, correctly, that the region has three words.\
\
Repeat the test, but place mark at the beginning of the line and place\
point just @emph\{before\} the word @samp\{one\}.  Again type the command\
@kbd\{C-c =\} (or @kbd\{M-x count-words-region\}).  Emacs should tell you\
that the region has no words, since it is composed only of the\
whitespace at the beginning of the line.  But instead Emacs tells you\
that the region has one word!\
\
For the third test, copy the sample line to the end of the\
@file\{*scratch*\} buffer and then type several spaces at the end of the\
line.  Place mark right after the word @samp\{three\} and point at the\
end of line.  (The end of the line will be the end of the buffer.)\
Type @kbd\{C-c =\} (or @kbd\{M-x count-words-region\}) as you did before.\
Again, Emacs should tell you that the region has no words, since it is\
composed only of the whitespace at the end of the line.  Instead,\
Emacs displays an error message saying @samp\{Search failed\}.\
\
The two bugs stem from the same problem.\
\
Consider the first manifestation of the bug, in which the command\
tells you that the whitespace at the beginning of the line contains\
one word.  What happens is this: The @code\{M-x count-words-region\}\
command moves point to the beginning of the region.  The @code\{while\}\
tests whether the value of point is smaller than the value of\
@code\{end\}, which it is.  Consequently, the regular expression search\
looks for and finds the first word.  It leaves point after the word.\
@code\{count\} is set to one.  The @code\{while\} loop repeats; but this\
time the value of point is larger than the value of @code\{end\}, the\
loop is exited; and the function displays a message saying the number\
of words in the region is one.  In brief, the regular expression\
search looks for and finds the word even though it is outside\
the marked region.\
\
In the second manifestation of the bug, the region is whitespace at\
the end of the buffer.  Emacs says @samp\{Search failed\}.  What happens\
is that the true-or-false-test in the @code\{while\} loop tests true, so\
the search expression is executed.  But since there are no more words\
in the buffer, the search fails.\
\
In both manifestations of the bug, the search extends or attempts to\
extend outside of the region.\
\
The solution is to limit the search to the region---this is a fairly\
simple action, but as you may have come to expect, it is not quite as\
simple as you might think.\
\
As we have seen, the @code\{re-search-forward\} function takes a search\
pattern as its first argument.  But in addition to this first,\
mandatory argument, it accepts three optional arguments.  The optional\
second argument bounds the search.  The optional third argument, if\
@code\{t\}, causes the function to return @code\{nil\} rather than signal\
an error if the search fails.  The optional fourth argument is a\
repeat count.  (In Emacs, you can see a function's documentation by\
typing @kbd\{C-h f\}, the name of the function, and then @key\{RET\}.)\
\
In the @code\{count-words-region\} definition, the value of the end of\
the region is held by the variable @code\{end\} which is passed as an\
argument to the function.  Thus, we can add @code\{end\} as an argument\
to the regular expression search expression:\
\
@smallexample\
(re-search-forward "\\\\w+\\\\W*" end)\
@end smallexample\
\
However, if you make only this change to the @code\{count-words-region\}\
definition and then test the new version of the definition on a\
stretch of whitespace, you will receive an error message saying\
@samp\{Search failed\}.\
\
What happens is this: the search is limited to the region, and fails\
as you expect because there are no word-constituent characters in the\
region.  Since it fails, we receive an error message.  But we do not\
want to receive an error message in this case; we want to receive the\
message that "The region does NOT have any words."\
\
The solution to this problem is to provide @code\{re-search-forward\}\
with a third argument of @code\{t\}, which causes the function to return\
@code\{nil\} rather than signal an error if the search fails.\
\
However, if you make this change and try it, you will see the message\
``Counting words in region ... '' and @dots\{\} you will keep on seeing\
that message @dots\{\}, until you type @kbd\{C-g\} (@code\{keyboard-quit\}).\
\
Here is what happens: the search is limited to the region, as before,\
and it fails because there are no word-constituent characters in the\
region, as expected.  Consequently, the @code\{re-search-forward\}\
expression returns @code\{nil\}.  It does nothing else.  In particular,\
it does not move point, which it does as a side effect if it finds the\
search target.  After the @code\{re-search-forward\} expression returns\
@code\{nil\}, the next expression in the @code\{while\} loop is evaluated.\
This expression increments the count.  Then the loop repeats.  The\
true-or-false-test tests true because the value of point is still less\
than the value of end, since the @code\{re-search-forward\} expression\
did not move point. @dots\{\} and the cycle repeats @dots\{\}\
\
The @code\{count-words-region\} definition requires yet another\
modification, to cause the true-or-false-test of the @code\{while\} loop\
to test false if the search fails.  Put another way, there are two\
conditions that must be satisfied in the true-or-false-test before the\
word count variable is incremented: point must still be within the\
region and the search expression must have found a word to count.\
\
Since both the first condition and the second condition must be true\
together, the two expressions, the region test and the search\
expression, can be joined with an @code\{and\} special form and embedded in\
the @code\{while\} loop as the true-or-false-test, like this:\
\
@smallexample\
(and (< (point) end) (re-search-forward "\\\\w+\\\\W*" end t))\
@end smallexample\
\
@c colon in printed section title causes problem in Info cross reference\
@c also trouble with an overfull hbox\
@iftex\
@noindent\
(For information about @code\{and\}, see\
@ref\{kill-new function, , The @code\{kill-new\} function\}.)\
@end iftex\
@ifinfo\
@noindent\
(@xref\{kill-new function, , The @code\{kill-new\} function\}, for\
information about @code\{and\}.)\
@end ifinfo\
\
The @code\{re-search-forward\} expression returns @code\{t\} if the search\
succeeds and as a side effect moves point.  Consequently, as words are\
found, point is moved through the region.  When the search expression\
fails to find another word, or when point reaches the end of the\
region, the true-or-false-test tests false, the @code\{while\} loop\
exits, and the @code\{count-words-region\} function displays one or\
other of its messages.\
\
After incorporating these final changes, the @code\{count-words-region\}\
works without bugs (or at least, without bugs that I have found!).\
Here is what it looks like:\
\
@smallexample\
@group\
;;; @r\{Final version:\} @code\{while\}\
(defun count-words-region (beginning end)\
  "Print number of words in the region."\
  (interactive "r")\
  (message "Counting words in region ... ")\
@end group\
\
@group\
;;; @r\{1. Set up appropriate conditions.\}\
  (save-excursion\
    (let ((count 0))\
      (goto-char beginning)\
@end group\
\
@group\
;;; @r\{2. Run the\} while @r\{loop.\}\
      (while (and (< (point) end)\
                  (re-search-forward "\\\\w+\\\\W*" end t))\
        (setq count (1+ count)))\
@end group\
\
@group\
;;; @r\{3. Send a message to the user.\}\
      (cond ((zerop count)\
             (message\
              "The region does NOT have any words."))\
            ((= 1 count)\
             (message\
              "The region has 1 word."))\
            (t\
             (message\
              "The region has %d words." count))))))\
@end group\
@end smallexample}