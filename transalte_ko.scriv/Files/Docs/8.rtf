{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node Writing Defuns, Buffer Walk Through, \'c6\'f2\'b0\'a1 \'bf\'ac\'bd\'c0\'c7\'cf\'b1\'e2, Top\
@comment  node-name,  next,  previous,  up\
@chapter How To Write Function Definitions\
@cindex Definition writing\
@cindex Function definition writing\
@cindex Writing a function definition\
\
When the Lisp interpreter evaluates a list, it looks to see whether the\
first symbol on the list has a function definition attached to it; or,\
put another way, whether the symbol points to a function definition.  If\
it does, the computer carries out the instructions in the definition.  A\
symbol that has a function definition is called, simply, a function\
(although, properly speaking, the definition is the function and the\
symbol refers to it.)\
\
@menu\
* Primitive Functions::\
* defun::                        The @code\{defun\} special form.\
* Install::                      Install a function definition.\
* Interactive::                  Making a function interactive.\
* Interactive Options::          Different options for @code\{interactive\}.\
* Permanent Installation::       Installing code permanently.\
* let::                          Creating and initializing local variables.\
* if::                           What if?\
* else::                         If--then--else expressions.\
* Truth & Falsehood::            What Lisp considers false and true.\
* save-excursion::               Keeping track of point, mark, and buffer.\
* Review::\
* defun Exercises::\
@end menu\
\
@node Primitive Functions, defun, Writing Defuns, Writing Defuns\
@ifnottex\
@unnumberedsec An Aside about Primitive Functions\
@end ifnottex\
@cindex Primitive functions\
@cindex Functions, primitive\
\
@cindex C language primitives\
@cindex Primitives written in C\
All functions are defined in terms of other functions, except for a few\
@dfn\{primitive\} functions that are written in the C programming\
language.  When you write functions' definitions, you will write them in\
Emacs Lisp and use other functions as your building blocks.  Some of the\
functions you will use will themselves be written in Emacs Lisp (perhaps\
by you) and some will be primitives written in C.  The primitive\
functions are used exactly like those written in Emacs Lisp and behave\
like them.  They are written in C so we can easily run GNU Emacs on any\
computer that has sufficient power and can run C.\
\
Let me re-emphasize this: when you write code in Emacs Lisp, you do not\
distinguish between the use of functions written in C and the use of\
functions written in Emacs Lisp.  The difference is irrelevant.  I\
mention the distinction only because it is interesting to know.  Indeed,\
unless you investigate, you won't know whether an already-written\
function is written in Emacs Lisp or C.}