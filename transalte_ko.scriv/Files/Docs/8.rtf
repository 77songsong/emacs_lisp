{\rtf1\ansi\ansicpg949\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 \
@node Writing Defuns, Buffer Walk Through, Practicing Evaluation, Top\
@comment  node-name,  next,  previous,  up\
@chapter How To Write Function Definitions\
@cindex Definition writing\
@cindex Function definition writing\
@cindex Writing a function definition\
\
When the Lisp interpreter evaluates a list, it looks to see whether the\
first symbol on the list has a function definition attached to it; or,\
put another way, whether the symbol points to a function definition.  If\
it does, the computer carries out the instructions in the definition.  A\
symbol that has a function definition is called, simply, a function\
(although, properly speaking, the definition is the function and the\
symbol refers to it.)\
\
@menu\
* Primitive Functions::\
* defun::                        The @code\{defun\} special form.\
* Install::                      Install a function definition.\
* Interactive::                  Making a function interactive.\
* Interactive Options::          Different options for @code\{interactive\}.\
* Permanent Installation::       Installing code permanently.\
* let::                          Creating and initializing local variables.\
* if::                           What if?\
* else::                         If--then--else expressions.\
* Truth & Falsehood::            What Lisp considers false and true.\
* save-excursion::               Keeping track of point, mark, and buffer.\
* Review::\
* defun Exercises::\
@end menu\
\
@node Primitive Functions, defun, Writing Defuns, Writing Defuns\
@ifnottex\
@unnumberedsec An Aside about Primitive Functions\
@end ifnottex\
@cindex Primitive functions\
@cindex Functions, primitive\
\
@cindex C language primitives\
@cindex Primitives written in C\
All functions are defined in terms of other functions, except for a few\
@dfn\{primitive\} functions that are written in the C programming\
language.  When you write functions' definitions, you will write them in\
Emacs Lisp and use other functions as your building blocks.  Some of the\
functions you will use will themselves be written in Emacs Lisp (perhaps\
by you) and some will be primitives written in C.  The primitive\
functions are used exactly like those written in Emacs Lisp and behave\
like them.  They are written in C so we can easily run GNU Emacs on any\
computer that has sufficient power and can run C.\
\
Let me re-emphasize this: when you write code in Emacs Lisp, you do not\
distinguish between the use of functions written in C and the use of\
functions written in Emacs Lisp.  The difference is irrelevant.  I\
mention the distinction only because it is interesting to know.  Indeed,\
unless you investigate, you won't know whether an already-written\
function is written in Emacs Lisp or C.\
\
@node defun, Install, Primitive Functions, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section The @code\{defun\} Special Form\
@findex defun\
@cindex Special form of @code\{defun\}\
\
@cindex @samp\{function definition\} defined\
In Lisp, a symbol such as @code\{mark-whole-buffer\} has code attached to\
it that tells the computer what to do when the function is called.\
This code is called the @dfn\{function definition\} and is created by\
evaluating a Lisp expression that starts with the symbol @code\{defun\}\
(which is an abbreviation for @emph\{define function\}).  Because\
@code\{defun\} does not evaluate its arguments in the usual way, it is\
called a @dfn\{special form\}.\
\
In subsequent sections, we will look at function definitions from the\
Emacs source code, such as @code\{mark-whole-buffer\}.  In this section,\
we will describe a simple function definition so you can see how it\
looks.  This function definition uses arithmetic because it makes for a\
simple example.  Some people dislike examples using arithmetic; however,\
if you are such a person, do not despair.  Hardly any of the code we\
will study in the remainder of this introduction involves arithmetic or\
mathematics.  The examples mostly involve text in one way or another.\
\
A function definition has up to five parts following the word\
@code\{defun\}:\
\
@enumerate\
@item\
The name of the symbol to which the function definition should be\
attached.\
\
@item\
A list of the arguments that will be passed to the function.  If no\
arguments will be passed to the function, this is an empty list,\
@code\{()\}.\
\
@item\
Documentation describing the function.  (Technically optional, but\
strongly recommended.)\
\
@item\
Optionally, an expression to make the function interactive so you can\
use it by typing @kbd\{M-x\} and then the name of the function; or by\
typing an appropriate key or keychord.\
\
@cindex @samp\{body\} defined\
@item\
The code that instructs the computer what to do: the @dfn\{body\} of the\
function definition.\
@end enumerate\
\
It is helpful to think of the five parts of a function definition as\
being organized in a template, with slots for each part:\
\
@smallexample\
@group\
(defun @var\{function-name\} (@var\{arguments\}@dots\{\})\
  "@var\{optional-documentation\}@dots\{\}"\
  (interactive @var\{argument-passing-info\})     ; @r\{optional\}\
  @var\{body\}@dots\{\})\
@end group\
@end smallexample\
\
As an example, here is the code for a function that multiplies its\
argument by 7.  (This example is not interactive.  @xref\{Interactive,\
, Making a Function Interactive\}, for that information.)\
\
@smallexample\
@group\
(defun multiply-by-seven (number)\
  "Multiply NUMBER by seven."\
  (* 7 number))\
@end group\
@end smallexample\
\
This definition begins with a parenthesis and the symbol @code\{defun\},\
followed by the name of the function.\
\
@cindex @samp\{argument list\} defined\
The name of the function is followed by a list that contains the\
arguments that will be passed to the function.  This list is called\
the @dfn\{argument list\}.  In this example, the list has only one\
element, the symbol, @code\{number\}.  When the function is used, the\
symbol will be bound to the value that is used as the argument to the\
function.\
\
Instead of choosing the word @code\{number\} for the name of the argument,\
I could have picked any other name.  For example, I could have chosen\
the word @code\{multiplicand\}.  I picked the word `number' because it\
tells what kind of value is intended for this slot; but I could just as\
well have chosen the word `multiplicand' to indicate the role that the\
value placed in this slot will play in the workings of the function.  I\
could have called it @code\{foogle\}, but that would have been a bad\
choice because it would not tell humans what it means.  The choice of\
name is up to the programmer and should be chosen to make the meaning of\
the function clear.\
\
Indeed, you can choose any name you wish for a symbol in an argument\
list, even the name of a symbol used in some other function: the name\
you use in an argument list is private to that particular definition.\
In that definition, the name refers to a different entity than any use\
of the same name outside the function definition.  Suppose you have a\
nick-name `Shorty' in your family; when your family members refer to\
`Shorty', they mean you.  But outside your family, in a movie, for\
example, the name `Shorty' refers to someone else.  Because a name in an\
argument list is private to the function definition, you can change the\
value of such a symbol inside the body of a function without changing\
its value outside the function.  The effect is similar to that produced\
by a @code\{let\} expression.  (@xref\{let, , @code\{let\}\}.)\
\
@ignore\
Note also that we discuss the word `number' in two different ways: as a\
symbol that appears in the code, and as the name of something that will\
be replaced by a something else during the evaluation of the function.\
In the first case, @code\{number\} is a symbol, not a number; it happens\
that within the function, it is a variable who value is the number in\
question, but our primary interest in it is as a symbol.  On the other\
hand, when we are talking about the function, our interest is that we\
will substitute a number for the word @var\{number\}.  To keep this\
distinction clear, we use different typography for the two\
circumstances.  When we talk about this function, or about how it works,\
we refer to this number by writing @var\{number\}.  In the function\
itself, we refer to it by writing @code\{number\}.\
@end ignore\
\
The argument list is followed by the documentation string that\
describes the function.  This is what you see when you type\
@w\{@kbd\{C-h f\}\} and the name of a function.  Incidentally, when you\
write a documentation string like this, you should make the first line\
a complete sentence since some commands, such as @code\{apropos\}, print\
only the first line of a multi-line documentation string.  Also, you\
should not indent the second line of a documentation string, if you\
have one, because that looks odd when you use @kbd\{C-h f\}\
(@code\{describe-function\}).  The documentation string is optional, but\
it is so useful, it should be included in almost every function you\
write.\
\
@findex * @r\{(multiplication)\}\
The third line of the example consists of the body of the function\
definition.  (Most functions' definitions, of course, are longer than\
this.)  In this function, the body is the list, @code\{(* 7 number)\}, which\
says to multiply the value of @var\{number\} by 7.  (In Emacs Lisp,\
@code\{*\} is the function for multiplication, just as @code\{+\} is the\
function for addition.)\
\
When you use the @code\{multiply-by-seven\} function, the argument\
@code\{number\} evaluates to the actual number you want used.  Here is an\
example that shows how @code\{multiply-by-seven\} is used; but don't try\
to evaluate this yet!\
\
@smallexample\
(multiply-by-seven 3)\
@end smallexample\
\
@noindent\
The symbol @code\{number\}, specified in the function definition in the\
next section, is given or ``bound to'' the value 3 in the actual use of\
the function.  Note that although @code\{number\} was inside parentheses\
in the function definition, the argument passed to the\
@code\{multiply-by-seven\} function is not in parentheses.  The\
parentheses are written in the function definition so the computer can\
figure out where the argument list ends and the rest of the function\
definition begins.\
\
If you evaluate this example, you are likely to get an error message.\
(Go ahead, try it!)  This is because we have written the function\
definition, but not yet told the computer about the definition---we have\
not yet installed (or `loaded') the function definition in Emacs.\
Installing a function is the process that tells the Lisp interpreter the\
definition of the function.  Installation is described in the next\
section.\
\
@node Install, Interactive, defun, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section Install a Function Definition\
@cindex Install a Function Definition\
@cindex Definition installation\
@cindex Function definition installation\
\
If you are reading this inside of Info in Emacs, you can try out the\
@code\{multiply-by-seven\} function by first evaluating the function\
definition and then evaluating @code\{(multiply-by-seven 3)\}.  A copy of\
the function definition follows.  Place the cursor after the last\
parenthesis of the function definition and type @kbd\{C-x C-e\}.  When you\
do this, @code\{multiply-by-seven\} will appear in the echo area.  (What\
this means is that when a function definition is evaluated, the value it\
returns is the name of the defined function.)  At the same time, this\
action installs the function definition.\
\
@smallexample\
@group\
(defun multiply-by-seven (number)\
  "Multiply NUMBER by seven."\
  (* 7 number))\
@end group\
@end smallexample\
\
@noindent\
By evaluating this @code\{defun\}, you have just installed\
@code\{multiply-by-seven\} in Emacs.  The function is now just as much a\
part of Emacs as @code\{forward-word\} or any other editing function you\
use.  (@code\{multiply-by-seven\} will stay installed until you quit\
Emacs.  To reload code automatically whenever you start Emacs, see\
@ref\{Permanent Installation, , Installing Code Permanently\}.)\
\
@menu\
* Effect of installation::\
* Change a defun::              How to change a function definition.\
@end menu\
\
@node Effect of installation, Change a defun, Install, Install\
@ifnottex\
@unnumberedsubsec The effect of installation\
@end ifnottex\
\
You can see the effect of installing @code\{multiply-by-seven\} by\
evaluating the following sample.  Place the cursor after the following\
expression and type @kbd\{C-x C-e\}.  The number 21 will appear in the\
echo area.\
\
@smallexample\
(multiply-by-seven 3)\
@end smallexample\
\
If you wish, you can read the documentation for the function by typing\
@kbd\{C-h f\} (@code\{describe-function\}) and then the name of the\
function, @code\{multiply-by-seven\}.  When you do this, a\
@file\{*Help*\} window will appear on your screen that says:\
\
@smallexample\
@group\
multiply-by-seven is a Lisp function.\
(multiply-by-seven NUMBER)\
\
Multiply NUMBER by seven.\
@end group\
@end smallexample\
\
@noindent\
(To return to a single window on your screen, type @kbd\{C-x 1\}.)\
\
@node Change a defun,  , Effect of installation, Install\
@comment  node-name,  next,  previous,  up\
@subsection Change a Function Definition\
@cindex Changing a function definition\
@cindex Function definition, how to change\
@cindex Definition, how to change\
\
If you want to change the code in @code\{multiply-by-seven\}, just rewrite\
it.  To install the new version in place of the old one, evaluate the\
function definition again.  This is how you modify code in Emacs.  It is\
very simple.\
\
As an example, you can change the @code\{multiply-by-seven\} function to\
add the number to itself seven times instead of multiplying the number\
by seven.  It produces the same answer, but by a different path.  At\
the same time, we will add a comment to the code; a comment is text\
that the Lisp interpreter ignores, but that a human reader may find\
useful or enlightening.  The comment is that this is the ``second\
version''.\
\
@smallexample\
@group\
(defun multiply-by-seven (number)       ; @r\{Second version.\}\
  "Multiply NUMBER by seven."\
  (+ number number number number number number number))\
@end group\
@end smallexample\
\
@cindex Comments in Lisp code\
The comment follows a semicolon, @samp\{;\}.  In Lisp, everything on a\
line that follows a semicolon is a comment.  The end of the line is the\
end of the comment.  To stretch a comment over two or more lines, begin\
each line with a semicolon.\
\
@xref\{Beginning a .emacs File, , Beginning a @file\{.emacs\}\
File\}, and @ref\{Comments, , Comments, elisp, The GNU Emacs Lisp\
Reference Manual\}, for more about comments.\
\
You can install this version of the @code\{multiply-by-seven\} function by\
evaluating it in the same way you evaluated the first function: place\
the cursor after the last parenthesis and type @kbd\{C-x C-e\}.\
\
In summary, this is how you write code in Emacs Lisp: you write a\
function; install it; test it; and then make fixes or enhancements and\
install it again.\
\
@node Interactive, Interactive Options, Install, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section Make a Function Interactive\
@cindex Interactive functions\
@findex interactive\
\
You make a function interactive by placing a list that begins with\
the special form @code\{interactive\} immediately after the\
documentation.  A user can invoke an interactive function by typing\
@kbd\{M-x\} and then the name of the function; or by typing the keys to\
which it is bound, for example, by typing @kbd\{C-n\} for\
@code\{next-line\} or @kbd\{C-x h\} for @code\{mark-whole-buffer\}.\
\
Interestingly, when you call an interactive function interactively,\
the value returned is not automatically displayed in the echo area.\
This is because you often call an interactive function for its side\
effects, such as moving forward by a word or line, and not for the\
value returned.  If the returned value were displayed in the echo area\
each time you typed a key, it would be very distracting.\
\
@menu\
* Interactive multiply-by-seven::  An overview.\
* multiply-by-seven in detail::    The interactive version.\
@end menu\
\
@node Interactive multiply-by-seven, multiply-by-seven in detail, Interactive, Interactive\
@ifnottex\
@unnumberedsubsec An Interactive @code\{multiply-by-seven\}, An Overview\
@end ifnottex\
\
Both the use of the special form @code\{interactive\} and one way to\
display a value in the echo area can be illustrated by creating an\
interactive version of @code\{multiply-by-seven\}.\
\
@need 1250\
Here is the code:\
\
@smallexample\
@group\
(defun multiply-by-seven (number)       ; @r\{Interactive version.\}\
  "Multiply NUMBER by seven."\
  (interactive "p")\
  (message "The result is %d" (* 7 number)))\
@end group\
@end smallexample\
\
@noindent\
You can install this code by placing your cursor after it and typing\
@kbd\{C-x C-e\}.  The name of the function will appear in your echo area.\
Then, you can use this code by typing @kbd\{C-u\} and a number and then\
typing @kbd\{M-x multiply-by-seven\} and pressing @key\{RET\}.  The phrase\
@samp\{The result is @dots\{\}\} followed by the product will appear in the\
echo area.\
\
Speaking more generally, you invoke a function like this in either of two\
ways:\
\
@enumerate\
@item\
By typing a prefix argument that contains the number to be passed, and\
then typing @kbd\{M-x\} and the name of the function, as with\
@kbd\{C-u 3 M-x forward-sentence\}; or,\
\
@item\
By typing whatever key or keychord the function is bound to, as with\
@kbd\{C-u 3 M-e\}.\
@end enumerate\
\
@noindent\
Both the examples just mentioned work identically to move point forward\
three sentences.  (Since @code\{multiply-by-seven\} is not bound to a key,\
it could not be used as an example of key binding.)\
\
(@xref\{Keybindings, , Some Keybindings\}, to learn how to bind a command\
to a key.)\
\
A prefix argument is passed to an interactive function by typing the\
@key\{META\} key followed by a number, for example, @kbd\{M-3 M-e\}, or by\
typing @kbd\{C-u\} and then a number, for example, @kbd\{C-u 3 M-e\} (if you\
type @kbd\{C-u\} without a number, it defaults to 4).\
\
@node multiply-by-seven in detail,  , Interactive multiply-by-seven, Interactive\
@comment  node-name,  next,  previous,  up\
@subsection An Interactive @code\{multiply-by-seven\}\
\
Let's look at the use of the special form @code\{interactive\} and then at\
the function @code\{message\} in the interactive version of\
@code\{multiply-by-seven\}.  You will recall that the function definition\
looks like this:\
\
@smallexample\
@group\
(defun multiply-by-seven (number)       ; @r\{Interactive version.\}\
  "Multiply NUMBER by seven."\
  (interactive "p")\
  (message "The result is %d" (* 7 number)))\
@end group\
@end smallexample\
\
In this function, the expression, @code\{(interactive "p")\}, is a list of\
two elements.  The @code\{"p"\} tells Emacs to pass the prefix argument to\
the function and use its value for the argument of the function.\
\
@need 1000\
The argument will be a number.  This means that the symbol\
@code\{number\} will be bound to a number in the line:\
\
@smallexample\
(message "The result is %d" (* 7 number))\
@end smallexample\
\
@need 1250\
@noindent\
For example, if your prefix argument is 5, the Lisp interpreter will\
evaluate the line as if it were:\
\
@smallexample\
(message "The result is %d" (* 7 5))\
@end smallexample\
\
@noindent\
(If you are reading this in GNU Emacs, you can evaluate this expression\
yourself.)  First, the interpreter will evaluate the inner list, which\
is @code\{(* 7 5)\}.  This returns a value of 35.  Next, it\
will evaluate the outer list, passing the values of the second and\
subsequent elements of the list to the function @code\{message\}.\
\
As we have seen, @code\{message\} is an Emacs Lisp function especially\
designed for sending a one line message to a user.  (@xref\{message, ,\
The @code\{message\} function\}.)  In summary, the @code\{message\}\
function prints its first argument in the echo area as is, except for\
occurrences of @samp\{%d\} or @samp\{%s\} (and various other %-sequences\
which we have not mentioned).  When it sees a control sequence, the\
function looks to the second or subsequent arguments and prints the\
value of the argument in the location in the string where the control\
sequence is located.\
\
In the interactive @code\{multiply-by-seven\} function, the control string\
is @samp\{%d\}, which requires a number, and the value returned by\
evaluating @code\{(* 7 5)\} is the number 35.  Consequently, the number 35\
is printed in place of the @samp\{%d\} and the message is @samp\{The result\
is 35\}.\
\
(Note that when you call the function @code\{multiply-by-seven\}, the\
message is printed without quotes, but when you call @code\{message\}, the\
text is printed in double quotes.  This is because the value returned by\
@code\{message\} is what appears in the echo area when you evaluate an\
expression whose first element is @code\{message\}; but when embedded in a\
function, @code\{message\} prints the text as a side effect without\
quotes.)\
\
@node Interactive Options, Permanent Installation, Interactive, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section Different Options for @code\{interactive\}\
@cindex Options for @code\{interactive\}\
@cindex Interactive options\
\
In the example, @code\{multiply-by-seven\} used @code\{"p"\} as the\
argument to @code\{interactive\}.  This argument told Emacs to interpret\
your typing either @kbd\{C-u\} followed by a number or @key\{META\}\
followed by a number as a command to pass that number to the function\
as its argument.  Emacs has more than twenty characters predefined for\
use with @code\{interactive\}.  In almost every case, one of these\
options will enable you to pass the right information interactively to\
a function.  (@xref\{Interactive Codes, , Code Characters for\
@code\{interactive\}, elisp, The GNU Emacs Lisp Reference Manual\}.)\
\
@need 1250\
Consider the function @code\{zap-to-char\}.  Its interactive expression\
is\
\
@smallexample\
(interactive "p\\ncZap to char: ")\
@end smallexample\
\
The first part of the argument to @code\{interactive\} is @samp\{p\}, with\
which you are already familiar.  This argument tells Emacs to\
interpret a `prefix', as a number to be passed to the function.  You\
can specify a prefix either by typing @kbd\{C-u\} followed by a number\
or by typing @key\{META\} followed by a number.  The prefix is the\
number of specified characters.  Thus, if your prefix is three and the\
specified character is @samp\{x\}, then you will delete all the text up\
to and including the third next @samp\{x\}.  If you do not set a prefix,\
then you delete all the text up to and including the specified\
character, but no more.\
\
The @samp\{c\} tells the function the name of the character to which to delete.\
\
More formally, a function with two or more arguments can have\
information passed to each argument by adding parts to the string that\
follows @code\{interactive\}.  When you do this, the information is\
passed to each argument in the same order it is specified in the\
@code\{interactive\} list.  In the string, each part is separated from\
the next part by a @samp\{\\n\}, which is a newline.  For example, you\
can follow @samp\{p\} with a @samp\{\\n\} and an @samp\{cZap to char:@: \}.\
This causes Emacs to pass the value of the prefix argument (if there\
is one) and the character.\
\
In this case, the function definition looks like the following, where\
@code\{arg\} and @code\{char\} are the symbols to which @code\{interactive\}\
binds the prefix argument and the specified character:\
\
@smallexample\
@group\
(defun @var\{name-of-function\} (arg char)\
  "@var\{documentation\}@dots\{\}"\
  (interactive "p\\ncZap to char: ")\
  @var\{body-of-function\}@dots\{\})\
@end group\
@end smallexample\
\
@noindent\
(The space after the colon in the prompt makes it look better when you\
are prompted.  @xref\{copy-to-buffer, , The Definition of\
@code\{copy-to-buffer\}\}, for an example.)\
\
When a function does not take arguments, @code\{interactive\} does not\
require any.  Such a function contains the simple expression\
@code\{(interactive)\}.  The @code\{mark-whole-buffer\} function is like\
this.\
\
Alternatively, if the special letter-codes are not right for your\
application, you can pass your own arguments to @code\{interactive\} as\
a list.\
\
@xref\{append-to-buffer, , The Definition of @code\{append-to-buffer\}\},\
for an example.  @xref\{Using Interactive, , Using @code\{Interactive\},\
elisp, The GNU Emacs Lisp Reference Manual\}, for a more complete\
explanation about this technique.\
\
@node Permanent Installation, let, Interactive Options, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section Install Code Permanently\
@cindex Install code permanently\
@cindex Permanent code installation\
@cindex Code installation\
\
When you install a function definition by evaluating it, it will stay\
installed until you quit Emacs.  The next time you start a new session\
of Emacs, the function will not be installed unless you evaluate the\
function definition again.\
\
At some point, you may want to have code installed automatically\
whenever you start a new session of Emacs.  There are several ways of\
doing this:\
\
@itemize @bullet\
@item\
If you have code that is just for yourself, you can put the code for the\
function definition in your @file\{.emacs\} initialization file.  When you\
start Emacs, your @file\{.emacs\} file is automatically evaluated and all\
the function definitions within it are installed.\
@xref\{Emacs Initialization, , Your @file\{.emacs\} File\}.\
\
@item\
Alternatively, you can put the function definitions that you want\
installed in one or more files of their own and use the @code\{load\}\
function to cause Emacs to evaluate and thereby install each of the\
functions in the files.\
@xref\{Loading Files, , Loading Files\}.\
\
@item\
Thirdly, if you have code that your whole site will use, it is usual\
to put it in a file called @file\{site-init.el\} that is loaded when\
Emacs is built.  This makes the code available to everyone who uses\
your machine.  (See the @file\{INSTALL\} file that is part of the Emacs\
distribution.)\
@end itemize\
\
Finally, if you have code that everyone who uses Emacs may want, you\
can post it on a computer network or send a copy to the Free Software\
Foundation.  (When you do this, please license the code and its\
documentation under a license that permits other people to run, copy,\
study, modify, and redistribute the code and which protects you from\
having your work taken from you.)  If you send a copy of your code to\
the Free Software Foundation, and properly protect yourself and\
others, it may be included in the next release of Emacs.  In large\
part, this is how Emacs has grown over the past years, by donations.\
\
@node let, if, Permanent Installation, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section @code\{let\}\
@findex let\
\
The @code\{let\} expression is a special form in Lisp that you will need\
to use in most function definitions.\
\
@code\{let\} is used to attach or bind a symbol to a value in such a way\
that the Lisp interpreter will not confuse the variable with a\
variable of the same name that is not part of the function.\
\
To understand why the @code\{let\} special form is necessary, consider\
the situation in which you own a home that you generally refer to as\
`the house', as in the sentence, ``The house needs painting.''  If you\
are visiting a friend and your host refers to `the house', he is\
likely to be referring to @emph\{his\} house, not yours, that is, to a\
different house.\
\
If your friend is referring to his house and you think he is referring\
to your house, you may be in for some confusion.  The same thing could\
happen in Lisp if a variable that is used inside of one function has\
the same name as a variable that is used inside of another function,\
and the two are not intended to refer to the same value.  The\
@code\{let\} special form prevents this kind of confusion.\
\
@menu\
* Prevent confusion::\
* Parts of let Expression::\
* Sample let Expression::\
* Uninitialized let Variables::\
@end menu\
\
@node Prevent confusion, Parts of let Expression, let, let\
@ifnottex\
@unnumberedsubsec @code\{let\} Prevents Confusion\
@end ifnottex\
\
@cindex @samp\{local variable\} defined\
@cindex @samp\{variable, local\}, defined\
The @code\{let\} special form prevents confusion.  @code\{let\} creates a\
name for a @dfn\{local variable\} that overshadows any use of the same\
name outside the @code\{let\} expression.  This is like understanding\
that whenever your host refers to `the house', he means his house, not\
yours.  (Symbols used in argument lists work the same way.\
@xref\{defun, , The @code\{defun\} Special Form\}.)\
\
Local variables created by a @code\{let\} expression retain their value\
@emph\{only\} within the @code\{let\} expression itself (and within\
expressions called within the @code\{let\} expression); the local\
variables have no effect outside the @code\{let\} expression.\
\
Another way to think about @code\{let\} is that it is like a @code\{setq\}\
that is temporary and local.  The values set by @code\{let\} are\
automatically undone when the @code\{let\} is finished.  The setting\
only affects expressions that are inside the bounds of the @code\{let\}\
expression.  In computer science jargon, we would say ``the binding of\
a symbol is visible only in functions called in the @code\{let\} form;\
in Emacs Lisp, scoping is dynamic, not lexical.''\
\
@code\{let\} can create more than one variable at once.  Also,\
@code\{let\} gives each variable it creates an initial value, either a\
value specified by you, or @code\{nil\}.  (In the jargon, this is called\
`binding the variable to the value'.)  After @code\{let\} has created\
and bound the variables, it executes the code in the body of the\
@code\{let\}, and returns the value of the last expression in the body,\
as the value of the whole @code\{let\} expression.  (`Execute' is a jargon\
term that means to evaluate a list; it comes from the use of the word\
meaning `to give practical effect to' (@cite\{Oxford English\
Dictionary\}).  Since you evaluate an expression to perform an action,\
`execute' has evolved as a synonym to `evaluate'.)\
\
@node Parts of let Expression, Sample let Expression, Prevent confusion, let\
@comment  node-name,  next,  previous,  up\
@subsection The Parts of a @code\{let\} Expression\
@cindex @code\{let\} expression, parts of\
@cindex Parts of @code\{let\} expression\
\
@cindex @samp\{varlist\} defined\
A @code\{let\} expression is a list of three parts.  The first part is\
the symbol @code\{let\}.  The second part is a list, called a\
@dfn\{varlist\}, each element of which is either a symbol by itself or a\
two-element list, the first element of which is a symbol.  The third\
part of the @code\{let\} expression is the body of the @code\{let\}.  The\
body usually consists of one or more lists.\
\
@need 800\
A template for a @code\{let\} expression looks like this:\
\
@smallexample\
(let @var\{varlist\} @var\{body\}@dots\{\})\
@end smallexample\
\
@noindent\
The symbols in the varlist are the variables that are given initial\
values by the @code\{let\} special form.  Symbols by themselves are given\
the initial value of @code\{nil\}; and each symbol that is the first\
element of a two-element list is bound to the value that is returned\
when the Lisp interpreter evaluates the second element.\
\
Thus, a varlist might look like this: @code\{(thread (needles 3))\}.  In\
this case, in a @code\{let\} expression, Emacs binds the symbol\
@code\{thread\} to an initial value of @code\{nil\}, and binds the symbol\
@code\{needles\} to an initial value of 3.\
\
When you write a @code\{let\} expression, what you do is put the\
appropriate expressions in the slots of the @code\{let\} expression\
template.\
\
If the varlist is composed of two-element lists, as is often the case,\
the template for the @code\{let\} expression looks like this:\
\
@smallexample\
@group\
(let ((@var\{variable\} @var\{value\})\
      (@var\{variable\} @var\{value\})\
      @dots\{\})\
  @var\{body\}@dots\{\})\
@end group\
@end smallexample\
\
@node Sample let Expression, Uninitialized let Variables, Parts of let Expression, let\
@comment  node-name,  next,  previous,  up\
@subsection Sample @code\{let\} Expression\
@cindex Sample @code\{let\} expression\
@cindex @code\{let\} expression sample\
\
The following expression creates and gives initial values\
to the two variables @code\{zebra\} and @code\{tiger\}.  The body of the\
@code\{let\} expression is a list which calls the @code\{message\} function.\
\
@smallexample\
@group\
(let ((zebra 'stripes)\
      (tiger 'fierce))\
  (message "One kind of animal has %s and another is %s."\
           zebra tiger))\
@end group\
@end smallexample\
\
Here, the varlist is @code\{((zebra 'stripes) (tiger 'fierce))\}.\
\
The two variables are @code\{zebra\} and @code\{tiger\}.  Each variable is\
the first element of a two-element list and each value is the second\
element of its two-element list.  In the varlist, Emacs binds the\
variable @code\{zebra\} to the value @code\{stripes\}@footnote\{According\
to Jared Diamond in @cite\{Guns, Germs, and Steel\}, ``@dots\{\} zebras\
become impossibly dangerous as they grow older'' but the claim here is\
that they do not become fierce like a tiger.  (1997, W. W. Norton and\
Co., ISBN 0-393-03894-2, page 171)\}, and binds the\
variable @code\{tiger\} to the value @code\{fierce\}.  In this example,\
both values are symbols preceded by a quote.  The values could just as\
well have been another list or a string.  The body of the @code\{let\}\
follows after the list holding the variables.  In this example, the\
body is a list that uses the @code\{message\} function to print a string\
in the echo area.\
\
@need 1500\
You may evaluate the example in the usual fashion, by placing the\
cursor after the last parenthesis and typing @kbd\{C-x C-e\}.  When you do\
this, the following will appear in the echo area:\
\
@smallexample\
"One kind of animal has stripes and another is fierce."\
@end smallexample\
\
As we have seen before, the @code\{message\} function prints its first\
argument, except for @samp\{%s\}.  In this example, the value of the variable\
@code\{zebra\} is printed at the location of the first @samp\{%s\} and the\
value of the variable @code\{tiger\} is printed at the location of the\
second @samp\{%s\}.\
\
@node Uninitialized let Variables,  , Sample let Expression, let\
@comment  node-name,  next,  previous,  up\
@subsection Uninitialized Variables in a @code\{let\} Statement\
@cindex Uninitialized @code\{let\} variables\
@cindex @code\{let\} variables uninitialized\
\
If you do not bind the variables in a @code\{let\} statement to specific\
initial values, they will automatically be bound to an initial value of\
@code\{nil\}, as in the following expression:\
\
@smallexample\
@group\
(let ((birch 3)\
      pine\
      fir\
      (oak 'some))\
  (message\
   "Here are %d variables with %s, %s, and %s value."\
   birch pine fir oak))\
@end group\
@end smallexample\
\
@noindent\
Here, the varlist is @code\{((birch 3) pine fir (oak 'some))\}.\
\
@need 1250\
If you evaluate this expression in the usual way, the following will\
appear in your echo area:\
\
@smallexample\
"Here are 3 variables with nil, nil, and some value."\
@end smallexample\
\
@noindent\
In this example, Emacs binds the symbol @code\{birch\} to the number 3,\
binds the symbols @code\{pine\} and @code\{fir\} to @code\{nil\}, and binds\
the symbol @code\{oak\} to the value @code\{some\}.\
\
Note that in the first part of the @code\{let\}, the variables @code\{pine\}\
and @code\{fir\} stand alone as atoms that are not surrounded by\
parentheses; this is because they are being bound to @code\{nil\}, the\
empty list.  But @code\{oak\} is bound to @code\{some\} and so is a part of\
the list @code\{(oak 'some)\}.  Similarly, @code\{birch\} is bound to the\
number 3 and so is in a list with that number.  (Since a number\
evaluates to itself, the number does not need to be quoted.  Also, the\
number is printed in the message using a @samp\{%d\} rather than a\
@samp\{%s\}.)  The four variables as a group are put into a list to\
delimit them from the body of the @code\{let\}.\
\
@node if, else, let, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section The @code\{if\} Special Form\
@findex if\
@cindex Conditional with @code\{if\}\
\
A third special form, in addition to @code\{defun\} and @code\{let\}, is the\
conditional @code\{if\}.  This form is used to instruct the computer to\
make decisions.  You can write function definitions without using\
@code\{if\}, but it is used often enough, and is important enough, to be\
included here.  It is used, for example, in the code for the\
function @code\{beginning-of-buffer\}.\
\
The basic idea behind an @code\{if\}, is that ``@emph\{if\} a test is true,\
@emph\{then\} an expression is evaluated.''  If the test is not true, the\
expression is not evaluated.  For example, you might make a decision\
such as, ``if it is warm and sunny, then go to the beach!''\
\
@menu\
* if in more detail::\
* type-of-animal in detail::    An example of an @code\{if\} expression.\
@end menu\
\
@node if in more detail, type-of-animal in detail, if, if\
@ifnottex\
@unnumberedsubsec @code\{if\} in more detail\
@end ifnottex\
\
@cindex @samp\{if-part\} defined\
@cindex @samp\{then-part\} defined\
An @code\{if\} expression written in Lisp does not use the word `then';\
the test and the action are the second and third elements of the list\
whose first element is @code\{if\}.  Nonetheless, the test part of an\
@code\{if\} expression is often called the @dfn\{if-part\} and the second\
argument is often called the @dfn\{then-part\}.\
\
Also, when an @code\{if\} expression is written, the true-or-false-test\
is usually written on the same line as the symbol @code\{if\}, but the\
action to carry out if the test is true, the ``then-part'', is written\
on the second and subsequent lines.  This makes the @code\{if\}\
expression easier to read.\
\
@smallexample\
@group\
(if @var\{true-or-false-test\}\
    @var\{action-to-carry-out-if-test-is-true\})\
@end group\
@end smallexample\
\
@noindent\
The true-or-false-test will be an expression that\
is evaluated by the Lisp interpreter.\
\
Here is an example that you can evaluate in the usual manner.  The test\
is whether the number 5 is greater than the number 4.  Since it is, the\
message @samp\{5 is greater than 4!\} will be printed.\
\
@smallexample\
@group\
(if (> 5 4)                             ; @r\{if-part\}\
    (message "5 is greater than 4!"))   ; @r\{then-part\}\
@end group\
@end smallexample\
\
@noindent\
(The function @code\{>\} tests whether its first argument is greater than\
its second argument and returns true if it is.)\
@findex > (greater than)\
\
Of course, in actual use, the test in an @code\{if\} expression will not\
be fixed for all time as it is by the expression @code\{(> 5 4)\}.\
Instead, at least one of the variables used in the test will be bound to\
a value that is not known ahead of time.  (If the value were known ahead\
of time, we would not need to run the test!)\
\
For example, the value may be bound to an argument of a function\
definition.  In the following function definition, the character of the\
animal is a value that is passed to the function.  If the value bound to\
@code\{characteristic\} is @code\{fierce\}, then the message, @samp\{It's a\
tiger!\} will be printed; otherwise, @code\{nil\} will be returned.\
\
@smallexample\
@group\
(defun type-of-animal (characteristic)\
  "Print message in echo area depending on CHARACTERISTIC.\
If the CHARACTERISTIC is the symbol `fierce',\
then warn of a tiger."\
  (if (equal characteristic 'fierce)\
      (message "It's a tiger!")))\
@end group\
@end smallexample\
\
@need 1500\
@noindent\
If you are reading this inside of GNU Emacs, you can evaluate the\
function definition in the usual way to install it in Emacs, and then you\
can evaluate the following two expressions to see the results:\
\
@smallexample\
@group\
(type-of-animal 'fierce)\
\
(type-of-animal 'zebra)\
\
@end group\
@end smallexample\
\
@c Following sentences rewritten to prevent overfull hbox.\
@noindent\
When you evaluate @code\{(type-of-animal 'fierce)\}, you will see the\
following message printed in the echo area: @code\{"It's a tiger!"\}; and\
when you evaluate @code\{(type-of-animal 'zebra)\} you will see @code\{nil\}\
printed in the echo area.\
\
@node type-of-animal in detail,  , if in more detail, if\
@comment  node-name,  next,  previous,  up\
@subsection The @code\{type-of-animal\} Function in Detail\
\
Let's look at the @code\{type-of-animal\} function in detail.\
\
The function definition for @code\{type-of-animal\} was written by filling\
the slots of two templates, one for a function definition as a whole, and\
a second for an @code\{if\} expression.\
\
@need 1250\
The template for every function that is not interactive is:\
\
@smallexample\
@group\
(defun @var\{name-of-function\} (@var\{argument-list\})\
  "@var\{documentation\}@dots\{\}"\
  @var\{body\}@dots\{\})\
@end group\
@end smallexample\
\
@need 800\
The parts of the function that match this template look like this:\
\
@smallexample\
@group\
(defun type-of-animal (characteristic)\
  "Print message in echo area depending on CHARACTERISTIC.\
If the CHARACTERISTIC is the symbol `fierce',\
then warn of a tiger."\
  @var\{body: the\} @code\{if\} @var\{expression\})\
@end group\
@end smallexample\
\
The name of function is @code\{type-of-animal\}; it is passed the value\
of one argument.  The argument list is followed by a multi-line\
documentation string.  The documentation string is included in the\
example because it is a good habit to write documentation string for\
every function definition.  The body of the function definition\
consists of the @code\{if\} expression.\
\
@need 800\
The template for an @code\{if\} expression looks like this:\
\
@smallexample\
@group\
(if @var\{true-or-false-test\}\
    @var\{action-to-carry-out-if-the-test-returns-true\})\
@end group\
@end smallexample\
\
@need 1250\
In the @code\{type-of-animal\} function, the code for the @code\{if\}\
looks like this:\
\
@smallexample\
@group\
(if (equal characteristic 'fierce)\
    (message "It's a tiger!")))\
@end group\
@end smallexample\
\
@need 800\
Here, the true-or-false-test is the expression:\
\
@smallexample\
(equal characteristic 'fierce)\
@end smallexample\
\
@noindent\
In Lisp, @code\{equal\} is a function that determines whether its first\
argument is equal to its second argument.  The second argument is the\
quoted symbol @code\{'fierce\} and the first argument is the value of the\
symbol @code\{characteristic\}---in other words, the argument passed to\
this function.\
\
In the first exercise of @code\{type-of-animal\}, the argument\
@code\{fierce\} is passed to @code\{type-of-animal\}.  Since @code\{fierce\}\
is equal to @code\{fierce\}, the expression, @code\{(equal characteristic\
'fierce)\}, returns a value of true.  When this happens, the @code\{if\}\
evaluates the second argument or then-part of the @code\{if\}:\
@code\{(message "It's tiger!")\}.\
\
On the other hand, in the second exercise of @code\{type-of-animal\}, the\
argument @code\{zebra\} is passed to @code\{type-of-animal\}.  @code\{zebra\}\
is not equal to @code\{fierce\}, so the then-part is not evaluated and\
@code\{nil\} is returned by the @code\{if\} expression.\
\
@node else, Truth & Falsehood, if, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section If--then--else Expressions\
@cindex Else\
\
An @code\{if\} expression may have an optional third argument, called\
the @dfn\{else-part\}, for the case when the true-or-false-test returns\
false.  When this happens, the second argument or then-part of the\
overall @code\{if\} expression is @emph\{not\} evaluated, but the third or\
else-part @emph\{is\} evaluated.  You might think of this as the cloudy\
day alternative for the decision ``if it is warm and sunny, then go to\
the beach, else read a book!''.\
\
The word ``else'' is not written in the Lisp code; the else-part of an\
@code\{if\} expression comes after the then-part.  In the written Lisp, the\
else-part is usually written to start on a line of its own and is\
indented less than the then-part:\
\
@smallexample\
@group\
(if @var\{true-or-false-test\}\
    @var\{action-to-carry-out-if-the-test-returns-true\}\
  @var\{action-to-carry-out-if-the-test-returns-false\})\
@end group\
@end smallexample\
\
For example, the following @code\{if\} expression prints the message @samp\{4\
is not greater than 5!\} when you evaluate it in the usual way:\
\
@smallexample\
@group\
(if (> 4 5)                               ; @r\{if-part\}\
    (message "4 falsely greater than 5!") ; @r\{then-part\}\
  (message "4 is not greater than 5!"))   ; @r\{else-part\}\
@end group\
@end smallexample\
\
@noindent\
Note that the different levels of indentation make it easy to\
distinguish the then-part from the else-part.  (GNU Emacs has several\
commands that automatically indent @code\{if\} expressions correctly.\
@xref\{Typing Lists, , GNU Emacs Helps You Type Lists\}.)\
\
We can extend the @code\{type-of-animal\} function to include an\
else-part by simply incorporating an additional part to the @code\{if\}\
expression.\
\
@need 1500\
You can see the consequences of doing this if you evaluate the following\
version of the @code\{type-of-animal\} function definition to install it\
and then evaluate the two subsequent expressions to pass different\
arguments to the function.\
\
@smallexample\
@group\
(defun type-of-animal (characteristic)  ; @r\{Second version.\}\
  "Print message in echo area depending on CHARACTERISTIC.\
If the CHARACTERISTIC is the symbol `fierce',\
then warn of a tiger;\
else say it's not fierce."\
  (if (equal characteristic 'fierce)\
      (message "It's a tiger!")\
    (message "It's not fierce!")))\
@end group\
@end smallexample\
@sp 1\
\
@smallexample\
@group\
(type-of-animal 'fierce)\
\
(type-of-animal 'zebra)\
\
@end group\
@end smallexample\
\
@c Following sentence rewritten to prevent overfull hbox.\
@noindent\
When you evaluate @code\{(type-of-animal 'fierce)\}, you will see the\
following message printed in the echo area: @code\{"It's a tiger!"\}; but\
when you evaluate @code\{(type-of-animal 'zebra)\}, you will see\
@code\{"It's not fierce!"\}.\
\
(Of course, if the @var\{characteristic\} were @code\{ferocious\}, the\
message @code\{"It's not fierce!"\} would be printed; and it would be\
misleading!  When you write code, you need to take into account the\
possibility that some such argument will be tested by the @code\{if\}\
and write your program accordingly.)\
\
@node Truth & Falsehood, save-excursion, else, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section Truth and Falsehood in Emacs Lisp\
@cindex Truth and falsehood in Emacs Lisp\
@cindex Falsehood and truth in Emacs Lisp\
@findex nil\
\
There is an important aspect to the truth test in an @code\{if\}\
expression.  So far, we have spoken of `true' and `false' as values of\
predicates as if they were new kinds of Emacs Lisp objects.  In fact,\
`false' is just our old friend @code\{nil\}.  Anything else---anything\
at all---is `true'.\
\
The expression that tests for truth is interpreted as @dfn\{true\}\
if the result of evaluating it is a value that is not @code\{nil\}.  In\
other words, the result of the test is considered true if the value\
returned is a number such as 47, a string such as @code\{"hello"\}, or a\
symbol (other than @code\{nil\}) such as @code\{flowers\}, or a list (so\
long as it is not empty), or even a buffer!\
\
@menu\
* nil explained::               @code\{nil\} has two meanings.\
@end menu\
\
@node nil explained,  , Truth & Falsehood, Truth & Falsehood\
@ifnottex\
@unnumberedsubsec An explanation of @code\{nil\}\
@end ifnottex\
\
Before illustrating a test for truth, we need an explanation of @code\{nil\}.\
\
In Emacs Lisp, the symbol @code\{nil\} has two meanings.  First, it means the\
empty list.  Second, it means false and is the value returned when a\
true-or-false-test tests false.  @code\{nil\} can be written as an empty\
list, @code\{()\}, or as @code\{nil\}.  As far as the Lisp interpreter is\
concerned, @code\{()\} and @code\{nil\} are the same.  Humans, however, tend\
to use @code\{nil\} for false and @code\{()\} for the empty list.\
\
In Emacs Lisp, any value that is not @code\{nil\}---is not the empty\
list---is considered true.  This means that if an evaluation returns\
something that is not an empty list, an @code\{if\} expression will test\
true.  For example, if a number is put in the slot for the test, it\
will be evaluated and will return itself, since that is what numbers\
do when evaluated.  In this conditional, the @code\{if\} expression will\
test true.  The expression tests false only when @code\{nil\}, an empty\
list, is returned by evaluating the expression.\
\
You can see this by evaluating the two expressions in the following examples.\
\
In the first example, the number 4 is evaluated as the test in the\
@code\{if\} expression and returns itself; consequently, the then-part\
of the expression is evaluated and returned: @samp\{true\} appears in\
the echo area.  In the second example, the @code\{nil\} indicates false;\
consequently, the else-part of the expression is evaluated and\
returned: @samp\{false\} appears in the echo area.\
\
@smallexample\
@group\
(if 4\
    'true\
  'false)\
@end group\
\
@group\
(if nil\
    'true\
  'false)\
@end group\
@end smallexample\
\
@need 1250\
Incidentally, if some other useful value is not available for a test that\
returns true, then the Lisp interpreter will return the symbol @code\{t\}\
for true.  For example, the expression @code\{(> 5 4)\} returns @code\{t\}\
when evaluated, as you can see by evaluating it in the usual way:\
\
@smallexample\
(> 5 4)\
@end smallexample\
\
@need 1250\
@noindent\
On the other hand, this function returns @code\{nil\} if the test is false.\
\
@smallexample\
(> 4 5)\
@end smallexample\
\
@node save-excursion, Review, Truth & Falsehood, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section @code\{save-excursion\}\
@findex save-excursion\
@cindex Region, what it is\
@cindex Preserving point, mark, and buffer\
@cindex Point, mark, buffer preservation\
@findex point\
@findex mark\
\
The @code\{save-excursion\} function is the fourth and final special form\
that we will discuss in this chapter.\
\
In Emacs Lisp programs used for editing, the @code\{save-excursion\}\
function is very common.  It saves the location of point and mark,\
executes the body of the function, and then restores point and mark to\
their previous positions if their locations were changed.  Its primary\
purpose is to keep the user from being surprised and disturbed by\
unexpected movement of point or mark.\
\
@menu\
* Point and mark::              A review of various locations.\
* Template for save-excursion::\
@end menu\
\
@node Point and mark, Template for save-excursion, save-excursion, save-excursion\
@ifnottex\
@unnumberedsubsec Point and Mark\
@end ifnottex\
\
Before discussing @code\{save-excursion\}, however, it may be useful\
first to review what point and mark are in GNU Emacs.  @dfn\{Point\} is\
the current location of the cursor.  Wherever the cursor\
is, that is point.  More precisely, on terminals where the cursor\
appears to be on top of a character, point is immediately before the\
character.  In Emacs Lisp, point is an integer.  The first character in\
a buffer is number one, the second is number two, and so on.  The\
function @code\{point\} returns the current position of the cursor as a\
number.  Each buffer has its own value for point.\
\
The @dfn\{mark\} is another position in the buffer; its value can be set\
with a command such as @kbd\{C-@key\{SPC\}\} (@code\{set-mark-command\}).  If\
a mark has been set, you can use the command @kbd\{C-x C-x\}\
(@code\{exchange-point-and-mark\}) to cause the cursor to jump to the mark\
and set the mark to be the previous position of point.  In addition, if\
you set another mark, the position of the previous mark is saved in the\
mark ring.  Many mark positions can be saved this way.  You can jump the\
cursor to a saved mark by typing @kbd\{C-u C-@key\{SPC\}\} one or more\
times.\
\
The part of the buffer between point and mark is called @dfn\{the\
region\}.  Numerous commands work on the region, including\
@code\{center-region\}, @code\{count-lines-region\}, @code\{kill-region\}, and\
@code\{print-region\}.\
\
The @code\{save-excursion\} special form saves the locations of point and\
mark and restores those positions after the code within the body of the\
special form is evaluated by the Lisp interpreter.  Thus, if point were\
in the beginning of a piece of text and some code moved point to the end\
of the buffer, the @code\{save-excursion\} would put point back to where\
it was before, after the expressions in the body of the function were\
evaluated.\
\
In Emacs, a function frequently moves point as part of its internal\
workings even though a user would not expect this.  For example,\
@code\{count-lines-region\} moves point.  To prevent the user from being\
bothered by jumps that are both unexpected and (from the user's point of\
view) unnecessary, @code\{save-excursion\} is often used to keep point and\
mark in the location expected by the user.  The use of\
@code\{save-excursion\} is good housekeeping.\
\
To make sure the house stays clean, @code\{save-excursion\} restores the\
values of point and mark even if something goes wrong in the code inside\
of it (or, to be more precise and to use the proper jargon, ``in case of\
abnormal exit'').  This feature is very helpful.\
\
In addition to recording the values of point and mark,\
@code\{save-excursion\} keeps track of the current buffer, and restores\
it, too.  This means you can write code that will change the buffer and\
have @code\{save-excursion\} switch you back to the original buffer.\
This is how @code\{save-excursion\} is used in @code\{append-to-buffer\}.\
(@xref\{append-to-buffer, , The Definition of @code\{append-to-buffer\}\}.)\
\
@node Template for save-excursion,  , Point and mark, save-excursion\
@comment  node-name,  next,  previous,  up\
@subsection Template for a @code\{save-excursion\} Expression\
\
@need 800\
The template for code using @code\{save-excursion\} is simple:\
\
@smallexample\
@group\
(save-excursion\
  @var\{body\}@dots\{\})\
@end group\
@end smallexample\
\
@noindent\
The body of the function is one or more expressions that will be\
evaluated in sequence by the Lisp interpreter.  If there is more than\
one expression in the body, the value of the last one will be returned\
as the value of the @code\{save-excursion\} function.  The other\
expressions in the body are evaluated only for their side effects; and\
@code\{save-excursion\} itself is used only for its side effect (which\
is restoring the positions of point and mark).\
\
@need 1250\
In more detail, the template for a @code\{save-excursion\} expression\
looks like this:\
\
@smallexample\
@group\
(save-excursion\
  @var\{first-expression-in-body\}\
  @var\{second-expression-in-body\}\
  @var\{third-expression-in-body\}\
   @dots\{\}\
  @var\{last-expression-in-body\})\
@end group\
@end smallexample\
\
@noindent\
An expression, of course, may be a symbol on its own or a list.\
\
In Emacs Lisp code, a @code\{save-excursion\} expression often occurs\
within the body of a @code\{let\} expression.  It looks like this:\
\
@smallexample\
@group\
(let @var\{varlist\}\
  (save-excursion\
    @var\{body\}@dots\{\}))\
@end group\
@end smallexample\
\
@node Review, defun Exercises, save-excursion, Writing Defuns\
@comment  node-name,  next,  previous,  up\
@section Review\
\
In the last few chapters we have introduced a fair number of functions\
and special forms.  Here they are described in brief, along with a few\
similar functions that have not been mentioned yet.\
\
@table @code\
@item eval-last-sexp\
Evaluate the last symbolic expression before the current location of\
point.  The value is printed in the echo area unless the function is\
invoked with an argument; in that case, the output is printed in the\
current buffer.  This command is normally bound to @kbd\{C-x C-e\}.\
\
@item defun\
Define function.  This special form has up to five parts: the name,\
a template for the arguments that will be passed to the function,\
documentation, an optional interactive declaration, and the body of the\
definition.\
\
@need 1250\
For example, in an early version of Emacs, the function definition was\
as follows.  (It is slightly more complex now that it seeks the first\
non-whitespace character rather than the first visible character.)\
\
@smallexample\
@group\
(defun back-to-indentation ()\
  "Move point to first visible character on line."\
  (interactive)\
  (beginning-of-line 1)\
  (skip-chars-forward " \\t"))\
@end group\
@end smallexample\
\
@ignore\
In GNU Emacs 22,\
\
(defun backward-to-indentation (&optional arg)\
  "Move backward ARG lines and position at first nonblank character."\
  (interactive "p")\
  (forward-line (- (or arg 1)))\
  (skip-chars-forward " \\t"))\
\
(defun back-to-indentation ()\
  "Move point to the first non-whitespace character on this line."\
  (interactive)\
  (beginning-of-line 1)\
  (skip-syntax-forward " " (line-end-position))\
  ;; Move back over chars that have whitespace syntax but have the p flag.\
  (backward-prefix-chars))\
@end ignore\
\
@item interactive\
Declare to the interpreter that the function can be used\
interactively.  This special form may be followed by a string with one\
or more parts that pass the information to the arguments of the\
function, in sequence.  These parts may also tell the interpreter to\
prompt for information.  Parts of the string are separated by\
newlines, @samp\{\\n\}.\
\
@need 1000\
Common code characters are:\
\
@table @code\
@item b\
The name of an existing buffer.\
\
@item f\
The name of an existing file.\
\
@item p\
The numeric prefix argument.  (Note that this `p' is lower case.)\
\
@item r\
Point and the mark, as two numeric arguments, smallest first.  This\
is the only code letter that specifies two successive arguments\
rather than one.\
@end table\
\
@xref\{Interactive Codes, , Code Characters for @samp\{interactive\},\
elisp, The GNU Emacs Lisp Reference Manual\}, for a complete list of\
code characters.\
\
@item let\
Declare that a list of variables is for use within the body of the\
@code\{let\} and give them an initial value, either @code\{nil\} or a\
specified value; then evaluate the rest of the expressions in the body\
of the @code\{let\} and return the value of the last one.  Inside the\
body of the @code\{let\}, the Lisp interpreter does not see the values of\
the variables of the same names that are bound outside of the\
@code\{let\}.\
\
@need 1250\
For example,\
\
@smallexample\
@group\
(let ((foo (buffer-name))\
      (bar (buffer-size)))\
  (message\
   "This buffer is %s and has %d characters."\
   foo bar))\
@end group\
@end smallexample\
\
@item save-excursion\
Record the values of point and mark and the current buffer before\
evaluating the body of this special form.  Restore the values of point\
and mark and buffer afterward.\
\
@need 1250\
For example,\
\
@smallexample\
@group\
(message "We are %d characters into this buffer."\
         (- (point)\
            (save-excursion\
              (goto-char (point-min)) (point))))\
@end group\
@end smallexample\
\
@item if\
Evaluate the first argument to the function; if it is true, evaluate\
the second argument; else evaluate the third argument, if there is one.\
\
The @code\{if\} special form is called a @dfn\{conditional\}.  There are\
other conditionals in Emacs Lisp, but @code\{if\} is perhaps the most\
commonly used.\
\
@need 1250\
For example,\
\
@smallexample\
@group\
(if (= 22 emacs-major-version)\
    (message "This is version 22 Emacs")\
  (message "This is not version 22 Emacs"))\
@end group\
@end smallexample\
\
@need 1250\
@item <\
@itemx >\
@itemx <=\
@itemx >=\
The @code\{<\} function tests whether its first argument is smaller than\
its second argument.  A corresponding function, @code\{>\}, tests whether\
the first argument is greater than the second.  Likewise, @code\{<=\}\
tests whether the first argument is less than or equal to the second and\
@code\{>=\} tests whether the first argument is greater than or equal to\
the second.  In all cases, both arguments must be numbers or markers\
(markers indicate positions in buffers).\
\
@need 800\
@item =\
The @code\{=\} function tests whether two arguments, both numbers or\
markers, are equal.\
\
@need 1250\
@item equal\
@itemx eq\
Test whether two objects are the same.  @code\{equal\} uses one meaning\
of the word `same' and @code\{eq\} uses another:  @code\{equal\} returns\
true if the two objects have a similar structure and contents, such as\
two copies of the same book.  On the other hand, @code\{eq\}, returns\
true if both arguments are actually the same object.\
@findex equal\
@findex eq\
\
@need 1250\
@item string<\
@itemx string-lessp\
@itemx string=\
@itemx string-equal\
The @code\{string-lessp\} function tests whether its first argument is\
smaller than the second argument.  A shorter, alternative name for the\
same function (a @code\{defalias\}) is @code\{string<\}.\
\
The arguments to @code\{string-lessp\} must be strings or symbols; the\
ordering is lexicographic, so case is significant.  The print names of\
symbols are used instead of the symbols themselves.\
\
@cindex @samp\{empty string\} defined\
An empty string, @samp\{""\}, a string with no characters in it, is\
smaller than any string of characters.\
\
@code\{string-equal\} provides the corresponding test for equality.  Its\
shorter, alternative name is @code\{string=\}.  There are no string test\
functions that correspond to @var\{>\}, @code\{>=\}, or @code\{<=\}.\
\
@item message\
Print a message in the echo area. The first argument is a string that\
can contain @samp\{%s\}, @samp\{%d\}, or @samp\{%c\} to print the value of\
arguments that follow the string.  The argument used by @samp\{%s\} must\
be a string or a symbol; the argument used by @samp\{%d\} must be a\
number.  The argument used by @samp\{%c\} must be an @sc\{ascii\} code\
number; it will be printed as the character with that @sc\{ascii\} code.\
(Various other %-sequences have not been mentioned.)\
\
@item setq\
@itemx set\
The @code\{setq\} function sets the value of its first argument to the\
value of the second argument.  The first argument is automatically\
quoted by @code\{setq\}.  It does the same for succeeding pairs of\
arguments.  Another function, @code\{set\}, takes only two arguments and\
evaluates both of them before setting the value returned by its first\
argument to the value returned by its second argument.\
\
@item buffer-name\
Without an argument, return the name of the buffer, as a string.\
\
@itemx buffer-file-name\
Without an argument, return the name of the file the buffer is\
visiting.\
\
@item current-buffer\
Return the buffer in which Emacs is active; it may not be\
the buffer that is visible on the screen.\
\
@item other-buffer\
Return the most recently selected buffer (other than the buffer passed\
to @code\{other-buffer\} as an argument and other than the current\
buffer).\
\
@item switch-to-buffer\
Select a buffer for Emacs to be active in and display it in the current\
window so users can look at it.  Usually bound to @kbd\{C-x b\}.\
\
@item set-buffer\
Switch Emacs' attention to a buffer on which programs will run.  Don't\
alter what the window is showing.\
\
@item buffer-size\
Return the number of characters in the current buffer.\
\
@item point\
Return the value of the current position of the cursor, as an\
integer counting the number of characters from the beginning of the\
buffer.\
\
@item point-min\
Return the minimum permissible value of point in\
the current buffer.  This is 1, unless narrowing is in effect.\
\
@item point-max\
Return the value of the maximum permissible value of point in the\
current buffer.  This is the end of the buffer, unless narrowing is in\
effect.\
@end table\
\
@need 1500\
@node defun Exercises,  , Review, Writing Defuns\
@section Exercises\
\
@itemize @bullet\
@item\
Write a non-interactive function that doubles the value of its\
argument, a number.  Make that function interactive.\
\
@item\
Write a function that tests whether the current value of\
@code\{fill-column\} is greater than the argument passed to the function,\
and if so, prints an appropriate message.\
@end itemize}